
ADCS_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc0  08003bc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc0  08003bc0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc0  08003bc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000070  08003c38  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08003c38  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e52f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f72  00000000  00000000  0002e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00030540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  00030e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017207  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b48f  00000000  00000000  00048887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085763  00000000  00000000  00053d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9479  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002814  00000000  00000000  000d94cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a48 	.word	0x08003a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a48 	.word	0x08003a48

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <LSM9DS1_ReadReg>:
 * @brief  Read data from Specific Register address of LSM9DS1
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address from which data is to be read
 */
uint8_t LSM9DS1_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800062a:	b2db      	uxtb	r3, r3
 800062c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2110      	movs	r1, #16
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <LSM9DS1_ReadReg+0x50>)
 8000634:	f001 f9b0 	bl	8001998 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 8000638:	1cf9      	adds	r1, r7, #3
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	2201      	movs	r2, #1
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f001 fe54 	bl	80022ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 8000644:	f107 010f 	add.w	r1, r7, #15
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	2201      	movs	r2, #1
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f001 ff90 	bl	8002572 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2110      	movs	r1, #16
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <LSM9DS1_ReadReg+0x50>)
 8000658:	f001 f99e 	bl	8001998 <HAL_GPIO_WritePin>
	return val;
 800065c:	7bfb      	ldrb	r3, [r7, #15]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40010800 	.word	0x40010800

0800066c <LSM9DS1_WriteReg>:
 * @brief  Write on Specific Register address of LSM9DS1
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address where certain value is to be written
 */
void LSM9DS1_WriteReg(SPI_HandleTypeDef *hspi, uint8_t add, uint8_t val) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
 8000678:	4613      	mov	r3, r2
 800067a:	70bb      	strb	r3, [r7, #2]
	add &= 0x7F;  // clear the MSB to indicate a write operation
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000682:	b2db      	uxtb	r3, r3
 8000684:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2110      	movs	r1, #16
 800068a:	480c      	ldr	r0, [pc, #48]	; (80006bc <LSM9DS1_WriteReg+0x50>)
 800068c:	f001 f984 	bl	8001998 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 8000690:	1cf9      	adds	r1, r7, #3
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	2201      	movs	r2, #1
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f001 fe28 	bl	80022ec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 800069c:	1cb9      	adds	r1, r7, #2
 800069e:	2364      	movs	r3, #100	; 0x64
 80006a0:	2201      	movs	r2, #1
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f001 fe22 	bl	80022ec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2110      	movs	r1, #16
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <LSM9DS1_WriteReg+0x50>)
 80006ae:	f001 f973 	bl	8001998 <HAL_GPIO_WritePin>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010800 	.word	0x40010800

080006c0 <LSM9DS1_Init>:
 * @brief  Initialize LSM9DS1 to work in 16-bit, 1.25Hz ODR, ±4 Gauss and Continuous conversion Mode
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  ctrl2 Control Register Value to choose LSM9DS1 sensor Scale
 */
void LSM9DS1_Init(SPI_HandleTypeDef *hspi, uint8_t ctrl2) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl1 = 0x74; // set the magnetic resolution to 16-bit, 20 Hz ODR, UHP mode in X-Y axis
 80006cc:	2374      	movs	r3, #116	; 0x74
 80006ce:	73fb      	strb	r3, [r7, #15]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG1_M, ctrl1);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	461a      	mov	r2, r3
 80006d4:	2120      	movs	r1, #32
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ffc8 	bl	800066c <LSM9DS1_WriteReg>

	/* Change the full-scale range to ±4 Gauss */

	//value to set the full-scale range
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG2_M, ctrl2);
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	461a      	mov	r2, r3
 80006e0:	2121      	movs	r1, #33	; 0x21
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ffc2 	bl	800066c <LSM9DS1_WriteReg>

	/* Change the control register 3 to continuous conversion mode */

	uint8_t ctrl3 = 0x00; // value to set the continuous conversion mode
 80006e8:	2300      	movs	r3, #0
 80006ea:	73bb      	strb	r3, [r7, #14]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG3_M, ctrl3);
 80006ec:	7bbb      	ldrb	r3, [r7, #14]
 80006ee:	461a      	mov	r2, r3
 80006f0:	2122      	movs	r1, #34	; 0x22
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ffba 	bl	800066c <LSM9DS1_WriteReg>

	uint8_t ctrl4 = 0x0C; // value to set the UHP mode on Z-axis
 80006f8:	230c      	movs	r3, #12
 80006fa:	737b      	strb	r3, [r7, #13]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG4_M, ctrl4);
 80006fc:	7b7b      	ldrb	r3, [r7, #13]
 80006fe:	461a      	mov	r2, r3
 8000700:	2123      	movs	r1, #35	; 0x23
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ffb2 	bl	800066c <LSM9DS1_WriteReg>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <MPU_begin>:

//MPU6500 Functions

uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU6500_t *pMPU6500) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	// Initialize variables
	uint8_t addr, val;
//	 Confirm device
//	HAL_Delay(100);
	whoAmI();
 800071a:	f000 f8dd 	bl	80008d8 <whoAmI>
	readRegisters(WHO_AM_I, 1, &check);
 800071e:	4a1b      	ldr	r2, [pc, #108]	; (800078c <MPU_begin+0x7c>)
 8000720:	2101      	movs	r1, #1
 8000722:	2075      	movs	r0, #117	; 0x75
 8000724:	f000 f8c5 	bl	80008b2 <readRegisters>
	if (check == WHO_AM_I_6500_ANS) {
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MPU_begin+0x7c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b70      	cmp	r3, #112	; 0x70
 800072e:	d128      	bne.n	8000782 <MPU_begin+0x72>
//	 Startup / reset the sensor
		addr = PWR_MGMT_1;
 8000730:	236b      	movs	r3, #107	; 0x6b
 8000732:	73fb      	strb	r3, [r7, #15]
		val = 0x00;
 8000734:	2300      	movs	r3, #0
 8000736:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8000738:	7bba      	ldrb	r2, [r7, #14]
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	4611      	mov	r1, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f8a2 	bl	8000888 <writeRegister>

		// Disable I2C (SPI only)
		addr = USER_CTRL;
 8000744:	236a      	movs	r3, #106	; 0x6a
 8000746:	73fb      	strb	r3, [r7, #15]
		val = 0x10;
 8000748:	2310      	movs	r3, #16
 800074a:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800074c:	7bba      	ldrb	r2, [r7, #14]
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f898 	bl	8000888 <writeRegister>

		// Configure DLPF value()
		val = 0x11;
 8000758:	2311      	movs	r3, #17
 800075a:	73bb      	strb	r3, [r7, #14]
		MPU6500_SetDLPFBandwidth(DLPF_BANDWIDTH_20HZ);
 800075c:	2004      	movs	r0, #4
 800075e:	f000 f8c9 	bl	80008f4 <MPU6500_SetDLPFBandwidth>

		// Set the full scale ranges
		MPU_writeAccFullScaleRange(pMPU6500,
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000768:	4619      	mov	r1, r3
 800076a:	6838      	ldr	r0, [r7, #0]
 800076c:	f000 f8d8 	bl	8000920 <MPU_writeAccFullScaleRange>
				pMPU6500->settings.aFullScaleRange);
		MPU_writeGyroFullScaleRange(pMPU6500,
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000776:	4619      	mov	r1, r3
 8000778:	6838      	ldr	r0, [r7, #0]
 800077a:	f000 f92d 	bl	80009d8 <MPU_writeGyroFullScaleRange>
				pMPU6500->settings.gFullScaleRange);
		return 1;
 800077e:	2301      	movs	r3, #1
 8000780:	e000      	b.n	8000784 <MPU_begin+0x74>
	} else {
		return 0;
 8000782:	2300      	movs	r3, #0
	}
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000398 	.word	0x20000398

08000790 <MPU_CS>:

void MPU_CS(uint8_t state) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, CS_MPU_Pin, state);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	461a      	mov	r2, r3
 800079e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a2:	4803      	ldr	r0, [pc, #12]	; (80007b0 <MPU_CS+0x20>)
 80007a4:	f001 f8f8 	bl	8001998 <HAL_GPIO_WritePin>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40011800 	.word	0x40011800

080007b4 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
	if (HAL_SPI_TransmitReceive(&IMU_STREAM, (uint8_t*) &Byte,
 80007c2:	f107 020f 	add.w	r2, r7, #15
 80007c6:	1df9      	adds	r1, r7, #7
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <SPIx_WriteRead+0x38>)
 80007d2:	f001 ffe6 	bl	80027a2 <HAL_SPI_TransmitReceive>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SPIx_WriteRead+0x2c>
			(uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK) {
		return -1;
 80007dc:	23ff      	movs	r3, #255	; 0xff
 80007de:	e000      	b.n	80007e2 <SPIx_WriteRead+0x2e>
	} else {
	}
	return receivedbyte;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000258 	.word	0x20000258

080007f0 <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
 80007fc:	4613      	mov	r3, r2
 80007fe:	803b      	strh	r3, [r7, #0]
	MPU_CS(CS_SEL);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ffc5 	bl	8000790 <MPU_CS>
	SPIx_WriteRead(WriteAddr);
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffd3 	bl	80007b4 <SPIx_WriteRead>
	while (NumByteToWrite >= 0x01) {
 800080e:	e00a      	b.n	8000826 <MPU_SPI_Write+0x36>
		SPIx_WriteRead(*pBuffer);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ffcd 	bl	80007b4 <SPIx_WriteRead>
		NumByteToWrite--;
 800081a:	883b      	ldrh	r3, [r7, #0]
 800081c:	3b01      	subs	r3, #1
 800081e:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3301      	adds	r3, #1
 8000824:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite >= 0x01) {
 8000826:	883b      	ldrh	r3, [r7, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f1      	bne.n	8000810 <MPU_SPI_Write+0x20>
	}
	MPU_CS(CS_DES);
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff ffaf 	bl	8000790 <MPU_CS>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
 8000848:	4613      	mov	r3, r2
 800084a:	803b      	strh	r3, [r7, #0]
	MPU_CS(CS_SEL);
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff ff9f 	bl	8000790 <MPU_CS>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	4313      	orrs	r3, r2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&IMU_STREAM, &data, 1, 100);
 800085c:	f107 010f 	add.w	r1, r7, #15
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	2201      	movs	r2, #1
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <MPU_SPI_Read+0x48>)
 8000866:	f001 fd41 	bl	80022ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(&IMU_STREAM, pBuffer, NumByteToRead, 100);
 800086a:	883a      	ldrh	r2, [r7, #0]
 800086c:	2364      	movs	r3, #100	; 0x64
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MPU_SPI_Read+0x48>)
 8000872:	f001 fe7e 	bl	8002572 <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff ff8a 	bl	8000790 <MPU_CS>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000258 	.word	0x20000258

08000888 <writeRegister>:

/* writes a byte to MPU6500 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	460a      	mov	r2, r1
 8000892:	71fb      	strb	r3, [r7, #7]
 8000894:	4613      	mov	r3, r2
 8000896:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8000898:	79f9      	ldrb	r1, [r7, #7]
 800089a:	1dbb      	adds	r3, r7, #6
 800089c:	2201      	movs	r2, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ffa6 	bl	80007f0 <MPU_SPI_Write>
	HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 fdeb 	bl	8001480 <HAL_Delay>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <readRegisters>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t *dest) {
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	603a      	str	r2, [r7, #0]
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	460b      	mov	r3, r1
 80008c0:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4619      	mov	r1, r3
 80008ca:	6838      	ldr	r0, [r7, #0]
 80008cc:	f7ff ffb6 	bl	800083c <MPU_SPI_Read>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <whoAmI>:

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x71 */
uint8_t whoAmI() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I, 1, &_buffer1);
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <whoAmI+0x18>)
 80008de:	2101      	movs	r1, #1
 80008e0:	2075      	movs	r0, #117	; 0x75
 80008e2:	f7ff ffe6 	bl	80008b2 <readRegisters>

	// return the register value
	return _buffer1;
 80008e6:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <whoAmI+0x18>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000172 	.word	0x20000172

080008f4 <MPU6500_SetDLPFBandwidth>:

/* sets the DLPF bandwidth to values other than default */
void MPU6500_SetDLPFBandwidth(DLPFBandwidth bandwidth) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG2, bandwidth);
 80008fe:	221d      	movs	r2, #29
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4619      	mov	r1, r3
 8000904:	4610      	mov	r0, r2
 8000906:	f7ff ffbf 	bl	8000888 <writeRegister>
	writeRegister(CONFIG, bandwidth);
 800090a:	221a      	movs	r2, #26
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4619      	mov	r1, r3
 8000910:	4610      	mov	r0, r2
 8000912:	f7ff ffb9 	bl	8000888 <writeRegister>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(MPU6500_t *pMPU6500, uint8_t aScale) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = ACCEL_CONFIG;
 800092c:	231c      	movs	r3, #28
 800092e:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (aScale) {
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d83e      	bhi.n	80009b4 <MPU_writeAccFullScaleRange+0x94>
 8000936:	a201      	add	r2, pc, #4	; (adr r2, 800093c <MPU_writeAccFullScaleRange+0x1c>)
 8000938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093c:	0800094d 	.word	0x0800094d
 8000940:	08000967 	.word	0x08000967
 8000944:	08000981 	.word	0x08000981
 8000948:	0800099b 	.word	0x0800099b
	case AFSR_2G:
		pMPU6500->sensorData.aScaleFactor = 16384.0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000952:	60da      	str	r2, [r3, #12]
		val = 0x00;
 8000954:	2300      	movs	r3, #0
 8000956:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8000958:	7bba      	ldrb	r2, [r7, #14]
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff92 	bl	8000888 <writeRegister>
		break;
 8000964:	e033      	b.n	80009ce <MPU_writeAccFullScaleRange+0xae>
	case AFSR_4G:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800096c:	60da      	str	r2, [r3, #12]
		val = 0x08;
 800096e:	2308      	movs	r3, #8
 8000970:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8000972:	7bba      	ldrb	r2, [r7, #14]
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff85 	bl	8000888 <writeRegister>
		break;
 800097e:	e026      	b.n	80009ce <MPU_writeAccFullScaleRange+0xae>
	case AFSR_8G:
		pMPU6500->sensorData.aScaleFactor = 4096.0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000986:	60da      	str	r2, [r3, #12]
		val = 0x10;
 8000988:	2310      	movs	r3, #16
 800098a:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800098c:	7bba      	ldrb	r2, [r7, #14]
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff78 	bl	8000888 <writeRegister>
		break;
 8000998:	e019      	b.n	80009ce <MPU_writeAccFullScaleRange+0xae>
	case AFSR_16G:
		pMPU6500->sensorData.aScaleFactor = 2048.0;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80009a0:	60da      	str	r2, [r3, #12]
		val = 0x18;
 80009a2:	2318      	movs	r3, #24
 80009a4:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80009a6:	7bba      	ldrb	r2, [r7, #14]
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff6b 	bl	8000888 <writeRegister>
		break;
 80009b2:	e00c      	b.n	80009ce <MPU_writeAccFullScaleRange+0xae>
	default:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80009ba:	60da      	str	r2, [r3, #12]
		val = 0x08;
 80009bc:	2308      	movs	r3, #8
 80009be:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80009c0:	7bba      	ldrb	r2, [r7, #14]
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff5e 	bl	8000888 <writeRegister>
		break;
 80009cc:	bf00      	nop
	}
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop

080009d8 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(MPU6500_t *pMPU6500, uint8_t gScale) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = GYRO_CONFIG;
 80009e4:	231b      	movs	r3, #27
 80009e6:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (gScale) {
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d83a      	bhi.n	8000a64 <MPU_writeGyroFullScaleRange+0x8c>
 80009ee:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <MPU_writeGyroFullScaleRange+0x1c>)
 80009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f4:	08000a05 	.word	0x08000a05
 80009f8:	08000a1d 	.word	0x08000a1d
 80009fc:	08000a35 	.word	0x08000a35
 8000a00:	08000a4d 	.word	0x08000a4d
	case GFSR_250DPS:
		pMPU6500->sensorData.gScaleFactor = 131.0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <MPU_writeGyroFullScaleRange+0xac>)
 8000a08:	611a      	str	r2, [r3, #16]
		val = 0x00;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8000a0e:	7bba      	ldrb	r2, [r7, #14]
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff37 	bl	8000888 <writeRegister>
		break;
 8000a1a:	e02f      	b.n	8000a7c <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_500DPS:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <MPU_writeGyroFullScaleRange+0xb0>)
 8000a20:	611a      	str	r2, [r3, #16]
		val = 0x08;
 8000a22:	2308      	movs	r3, #8
 8000a24:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8000a26:	7bba      	ldrb	r2, [r7, #14]
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff2b 	bl	8000888 <writeRegister>
		break;
 8000a32:	e023      	b.n	8000a7c <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_1000DPS:
		pMPU6500->sensorData.gScaleFactor = 32.8;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <MPU_writeGyroFullScaleRange+0xb4>)
 8000a38:	611a      	str	r2, [r3, #16]
		val = 0x10;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8000a3e:	7bba      	ldrb	r2, [r7, #14]
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff1f 	bl	8000888 <writeRegister>
		break;
 8000a4a:	e017      	b.n	8000a7c <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_2000DPS:
		pMPU6500->sensorData.gScaleFactor = 16.4;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <MPU_writeGyroFullScaleRange+0xb8>)
 8000a50:	611a      	str	r2, [r3, #16]
		val = 0x18;
 8000a52:	2318      	movs	r3, #24
 8000a54:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8000a56:	7bba      	ldrb	r2, [r7, #14]
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff13 	bl	8000888 <writeRegister>
		break;
 8000a62:	e00b      	b.n	8000a7c <MPU_writeGyroFullScaleRange+0xa4>
	default:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <MPU_writeGyroFullScaleRange+0xb0>)
 8000a68:	611a      	str	r2, [r3, #16]
		val = 0x08;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8000a6e:	7bba      	ldrb	r2, [r7, #14]
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff07 	bl	8000888 <writeRegister>
		break;
 8000a7a:	bf00      	nop
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	43030000 	.word	0x43030000
 8000a88:	42830000 	.word	0x42830000
 8000a8c:	42033333 	.word	0x42033333
 8000a90:	41833333 	.word	0x41833333

08000a94 <MPU6500_ReadReg>:

uint8_t MPU6500_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	70fb      	strb	r3, [r7, #3]
	MPU_CS(CS_SEL);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fe70 	bl	8000790 <MPU_CS>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 8000ab0:	1cf9      	adds	r1, r7, #3
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f001 fc18 	bl	80022ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 8000abc:	f107 010f 	add.w	r1, r7, #15
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f001 fd54 	bl	8002572 <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff fe60 	bl	8000790 <MPU_CS>
	return val;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <MPU6500_GetData>:

/* read the data, each argument should point to a array for x, y, and x */
void MPU6500_GetData(MPU6500_t *pMPU6500) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU6500
	readRegisters(ACCEL_OUT, 14, _buffer);
 8000ae4:	233b      	movs	r3, #59	; 0x3b
 8000ae6:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000ae8:	210e      	movs	r1, #14
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fee1 	bl	80008b2 <readRegisters>

	// combine into 16 bit values
	pMPU6500->rawData.ax = (((int16_t) _buffer[0]) << 8) | _buffer[1];
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	801a      	strh	r2, [r3, #0]
	pMPU6500->rawData.ay = (((int16_t) _buffer[2]) << 8) | _buffer[3];
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b08:	789b      	ldrb	r3, [r3, #2]
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b10:	78db      	ldrb	r3, [r3, #3]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	805a      	strh	r2, [r3, #2]
	pMPU6500->rawData.az = (((int16_t) _buffer[4]) << 8) | _buffer[5];
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b1e:	791b      	ldrb	r3, [r3, #4]
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	809a      	strh	r2, [r3, #4]

	pMPU6500->rawData.gx = (((int16_t) _buffer[8]) << 8) | _buffer[9];
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b34:	7a1b      	ldrb	r3, [r3, #8]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b3c:	7a5b      	ldrb	r3, [r3, #9]
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	80da      	strh	r2, [r3, #6]
	pMPU6500->rawData.gy = (((int16_t) _buffer[10]) << 8) | _buffer[11];
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b4a:	7a9b      	ldrb	r3, [r3, #10]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b52:	7adb      	ldrb	r3, [r3, #11]
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	811a      	strh	r2, [r3, #8]
	pMPU6500->rawData.gz = (((int16_t) _buffer[12]) << 8) | _buffer[13];
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b60:	7b1b      	ldrb	r3, [r3, #12]
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	b21a      	sxth	r2, r3
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <MPU6500_GetData+0xa0>)
 8000b68:	7b5b      	ldrb	r3, [r3, #13]
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	815a      	strh	r2, [r3, #10]

}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000008c 	.word	0x2000008c

08000b80 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(MPU6500_t *pMPU6500, uint16_t numCalPoints) {
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
// Init
	int32_t x = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
	int32_t y = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
	int32_t z = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]

// Zero guard
	if (numCalPoints == 0) {
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <MPU_calibrateGyro+0x22>
		numCalPoints = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

// Save specified number of points
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	817b      	strh	r3, [r7, #10]
 8000ba6:	e01d      	b.n	8000be4 <MPU_calibrateGyro+0x64>
		MPU6500_GetData(pMPU6500);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff97 	bl	8000adc <MPU6500_GetData>

		x += pMPU6500->rawData.gx;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4413      	add	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
		y += pMPU6500->rawData.gy;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
		z += pMPU6500->rawData.gz;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]
		HAL_Delay(3);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 fc51 	bl	8001480 <HAL_Delay>
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 8000bde:	897b      	ldrh	r3, [r7, #10]
 8000be0:	3301      	adds	r3, #1
 8000be2:	817b      	strh	r3, [r7, #10]
 8000be4:	897a      	ldrh	r2, [r7, #10]
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3dd      	bcc.n	8000ba8 <MPU_calibrateGyro+0x28>
	}

// Average the saved data points to find the gyroscope offset
	pMPU6500->gyroCal.x = (float) x / (float) numCalPoints;
 8000bec:	6978      	ldr	r0, [r7, #20]
 8000bee:	f7ff fb6f 	bl	80002d0 <__aeabi_i2f>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fb66 	bl	80002c8 <__aeabi_ui2f>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff fc6d 	bl	80004e0 <__aeabi_fdiv>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
	pMPU6500->gyroCal.y = (float) y / (float) numCalPoints;
 8000c0e:	6938      	ldr	r0, [r7, #16]
 8000c10:	f7ff fb5e 	bl	80002d0 <__aeabi_i2f>
 8000c14:	4604      	mov	r4, r0
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fb55 	bl	80002c8 <__aeabi_ui2f>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4619      	mov	r1, r3
 8000c22:	4620      	mov	r0, r4
 8000c24:	f7ff fc5c 	bl	80004e0 <__aeabi_fdiv>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	631a      	str	r2, [r3, #48]	; 0x30
	pMPU6500->gyroCal.z = (float) z / (float) numCalPoints;
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff fb4d 	bl	80002d0 <__aeabi_i2f>
 8000c36:	4604      	mov	r4, r0
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fb44 	bl	80002c8 <__aeabi_ui2f>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4619      	mov	r1, r3
 8000c44:	4620      	mov	r0, r4
 8000c46:	f7ff fc4b 	bl	80004e0 <__aeabi_fdiv>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c52:	bf00      	nop
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
	...

08000c5c <IMU_Setup>:

	pMPU6500->attitude.y = atan2(Ym, Xm);

}

void IMU_Setup() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

	LSM9DS1_Init(&IMU_STREAM, 0x60); // ±16 Gauss full scale, 20Hz ODR, Continuous conversion mode
 8000c60:	2160      	movs	r1, #96	; 0x60
 8000c62:	481a      	ldr	r0, [pc, #104]	; (8000ccc <IMU_Setup+0x70>)
 8000c64:	f7ff fd2c 	bl	80006c0 <LSM9DS1_Init>
	HAL_Delay(1000);
 8000c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6c:	f000 fc08 	bl	8001480 <HAL_Delay>

	if (MPU_begin(&IMU_STREAM, &MPU6500) != TRUE) {
 8000c70:	4917      	ldr	r1, [pc, #92]	; (8000cd0 <IMU_Setup+0x74>)
 8000c72:	4816      	ldr	r0, [pc, #88]	; (8000ccc <IMU_Setup+0x70>)
 8000c74:	f7ff fd4c 	bl	8000710 <MPU_begin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d00e      	beq.n	8000c9c <IMU_Setup+0x40>
		sprintf((char*) serialBuf, "ERROR!\r\n");
 8000c7e:	4915      	ldr	r1, [pc, #84]	; (8000cd4 <IMU_Setup+0x78>)
 8000c80:	4815      	ldr	r0, [pc, #84]	; (8000cd8 <IMU_Setup+0x7c>)
 8000c82:	f002 fa6d 	bl	8003160 <siprintf>
		HAL_UART_Transmit(&DEBUG_STREAM, serialBuf, strlen((char*) serialBuf),
 8000c86:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <IMU_Setup+0x7c>)
 8000c88:	f7ff fa60 	bl	800014c <strlen>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	4911      	ldr	r1, [pc, #68]	; (8000cd8 <IMU_Setup+0x7c>)
 8000c94:	4811      	ldr	r0, [pc, #68]	; (8000cdc <IMU_Setup+0x80>)
 8000c96:	f002 f87d 	bl	8002d94 <HAL_UART_Transmit>
 8000c9a:	e002      	b.n	8000ca2 <IMU_Setup+0x46>
				100);
	} else {
		myprintf("MPU6500 Initialization Complete");
 8000c9c:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <IMU_Setup+0x84>)
 8000c9e:	f000 f8dd 	bl	8000e5c <myprintf>
	}

//	 Calibrate the IMU
	myprintf("Calibrating sensors.\r\n");
 8000ca2:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <IMU_Setup+0x88>)
 8000ca4:	f000 f8da 	bl	8000e5c <myprintf>
	HAL_Delay(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 fbe9 	bl	8001480 <HAL_Delay>
	MPU_calibrateGyro(&MPU6500, 1500);
 8000cae:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <IMU_Setup+0x74>)
 8000cb4:	f7ff ff64 	bl	8000b80 <MPU_calibrateGyro>
	HAL_Delay(1000);
 8000cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cbc:	f000 fbe0 	bl	8001480 <HAL_Delay>
	myprintf("Calibration  Complete");
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <IMU_Setup+0x8c>)
 8000cc2:	f000 f8cb 	bl	8000e5c <myprintf>

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000258 	.word	0x20000258
 8000cd0:	20000118 	.word	0x20000118
 8000cd4:	08003b04 	.word	0x08003b04
 8000cd8:	2000032c 	.word	0x2000032c
 8000cdc:	20000210 	.word	0x20000210
 8000ce0:	08003b10 	.word	0x08003b10
 8000ce4:	08003b30 	.word	0x08003b30
 8000ce8:	08003b48 	.word	0x08003b48

08000cec <IMU_Data>:

void IMU_Data() {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

//Gyro, Accel and Mag register data

	SAT_IMU[0] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_XOUT_H);
 8000cf0:	213b      	movs	r1, #59	; 0x3b
 8000cf2:	484c      	ldr	r0, [pc, #304]	; (8000e24 <IMU_Data+0x138>)
 8000cf4:	f7ff fece 	bl	8000a94 <MPU6500_ReadReg>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <IMU_Data+0x13c>)
 8000cfe:	701a      	strb	r2, [r3, #0]
	SAT_IMU[1] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_XOUT_L);
 8000d00:	213c      	movs	r1, #60	; 0x3c
 8000d02:	4848      	ldr	r0, [pc, #288]	; (8000e24 <IMU_Data+0x138>)
 8000d04:	f7ff fec6 	bl	8000a94 <MPU6500_ReadReg>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <IMU_Data+0x13c>)
 8000d0e:	705a      	strb	r2, [r3, #1]
	SAT_IMU[2] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_YOUT_H);
 8000d10:	213d      	movs	r1, #61	; 0x3d
 8000d12:	4844      	ldr	r0, [pc, #272]	; (8000e24 <IMU_Data+0x138>)
 8000d14:	f7ff febe 	bl	8000a94 <MPU6500_ReadReg>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b42      	ldr	r3, [pc, #264]	; (8000e28 <IMU_Data+0x13c>)
 8000d1e:	709a      	strb	r2, [r3, #2]
	SAT_IMU[3] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_YOUT_L);
 8000d20:	213e      	movs	r1, #62	; 0x3e
 8000d22:	4840      	ldr	r0, [pc, #256]	; (8000e24 <IMU_Data+0x138>)
 8000d24:	f7ff feb6 	bl	8000a94 <MPU6500_ReadReg>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <IMU_Data+0x13c>)
 8000d2e:	70da      	strb	r2, [r3, #3]
	SAT_IMU[4] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_ZOUT_H);
 8000d30:	213f      	movs	r1, #63	; 0x3f
 8000d32:	483c      	ldr	r0, [pc, #240]	; (8000e24 <IMU_Data+0x138>)
 8000d34:	f7ff feae 	bl	8000a94 <MPU6500_ReadReg>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <IMU_Data+0x13c>)
 8000d3e:	711a      	strb	r2, [r3, #4]
	SAT_IMU[5] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_ZOUT_L);
 8000d40:	2140      	movs	r1, #64	; 0x40
 8000d42:	4838      	ldr	r0, [pc, #224]	; (8000e24 <IMU_Data+0x138>)
 8000d44:	f7ff fea6 	bl	8000a94 <MPU6500_ReadReg>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <IMU_Data+0x13c>)
 8000d4e:	715a      	strb	r2, [r3, #5]

	SAT_IMU[6] = MPU6500_ReadReg(&IMU_STREAM, GYRO_XOUT_H);
 8000d50:	2143      	movs	r1, #67	; 0x43
 8000d52:	4834      	ldr	r0, [pc, #208]	; (8000e24 <IMU_Data+0x138>)
 8000d54:	f7ff fe9e 	bl	8000a94 <MPU6500_ReadReg>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <IMU_Data+0x13c>)
 8000d5e:	719a      	strb	r2, [r3, #6]
	SAT_IMU[7] = MPU6500_ReadReg(&IMU_STREAM, GYRO_XOUT_L);
 8000d60:	2144      	movs	r1, #68	; 0x44
 8000d62:	4830      	ldr	r0, [pc, #192]	; (8000e24 <IMU_Data+0x138>)
 8000d64:	f7ff fe96 	bl	8000a94 <MPU6500_ReadReg>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <IMU_Data+0x13c>)
 8000d6e:	71da      	strb	r2, [r3, #7]
	SAT_IMU[8] = MPU6500_ReadReg(&IMU_STREAM, GYRO_YOUT_H);
 8000d70:	2145      	movs	r1, #69	; 0x45
 8000d72:	482c      	ldr	r0, [pc, #176]	; (8000e24 <IMU_Data+0x138>)
 8000d74:	f7ff fe8e 	bl	8000a94 <MPU6500_ReadReg>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <IMU_Data+0x13c>)
 8000d7e:	721a      	strb	r2, [r3, #8]
	SAT_IMU[9] = MPU6500_ReadReg(&IMU_STREAM, GYRO_YOUT_L);
 8000d80:	2146      	movs	r1, #70	; 0x46
 8000d82:	4828      	ldr	r0, [pc, #160]	; (8000e24 <IMU_Data+0x138>)
 8000d84:	f7ff fe86 	bl	8000a94 <MPU6500_ReadReg>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <IMU_Data+0x13c>)
 8000d8e:	725a      	strb	r2, [r3, #9]
	SAT_IMU[10] = MPU6500_ReadReg(&IMU_STREAM, GYRO_ZOUT_H);
 8000d90:	2147      	movs	r1, #71	; 0x47
 8000d92:	4824      	ldr	r0, [pc, #144]	; (8000e24 <IMU_Data+0x138>)
 8000d94:	f7ff fe7e 	bl	8000a94 <MPU6500_ReadReg>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <IMU_Data+0x13c>)
 8000d9e:	729a      	strb	r2, [r3, #10]
	SAT_IMU[11] = MPU6500_ReadReg(&IMU_STREAM, GYRO_ZOUT_L);
 8000da0:	2148      	movs	r1, #72	; 0x48
 8000da2:	4820      	ldr	r0, [pc, #128]	; (8000e24 <IMU_Data+0x138>)
 8000da4:	f7ff fe76 	bl	8000a94 <MPU6500_ReadReg>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <IMU_Data+0x13c>)
 8000dae:	72da      	strb	r2, [r3, #11]

	SAT_IMU[12] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTX_L_M);
 8000db0:	2128      	movs	r1, #40	; 0x28
 8000db2:	481c      	ldr	r0, [pc, #112]	; (8000e24 <IMU_Data+0x138>)
 8000db4:	f7ff fc30 	bl	8000618 <LSM9DS1_ReadReg>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <IMU_Data+0x13c>)
 8000dbe:	731a      	strb	r2, [r3, #12]
	SAT_IMU[13] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTX_H_M);
 8000dc0:	2129      	movs	r1, #41	; 0x29
 8000dc2:	4818      	ldr	r0, [pc, #96]	; (8000e24 <IMU_Data+0x138>)
 8000dc4:	f7ff fc28 	bl	8000618 <LSM9DS1_ReadReg>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <IMU_Data+0x13c>)
 8000dce:	735a      	strb	r2, [r3, #13]
	SAT_IMU[14] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTY_L_M);
 8000dd0:	212a      	movs	r1, #42	; 0x2a
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <IMU_Data+0x138>)
 8000dd4:	f7ff fc20 	bl	8000618 <LSM9DS1_ReadReg>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <IMU_Data+0x13c>)
 8000dde:	739a      	strb	r2, [r3, #14]
	SAT_IMU[15] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTY_H_M);
 8000de0:	212b      	movs	r1, #43	; 0x2b
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <IMU_Data+0x138>)
 8000de4:	f7ff fc18 	bl	8000618 <LSM9DS1_ReadReg>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <IMU_Data+0x13c>)
 8000dee:	73da      	strb	r2, [r3, #15]
	SAT_IMU[16] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTZ_L_M);
 8000df0:	212c      	movs	r1, #44	; 0x2c
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <IMU_Data+0x138>)
 8000df4:	f7ff fc10 	bl	8000618 <LSM9DS1_ReadReg>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <IMU_Data+0x13c>)
 8000dfe:	741a      	strb	r2, [r3, #16]
	SAT_IMU[17] = LSM9DS1_ReadReg(&IMU_STREAM, LSM9DS1_OUTZ_H_M);
 8000e00:	212d      	movs	r1, #45	; 0x2d
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <IMU_Data+0x138>)
 8000e04:	f7ff fc08 	bl	8000618 <LSM9DS1_ReadReg>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <IMU_Data+0x13c>)
 8000e0e:	745a      	strb	r2, [r3, #17]

	HAL_UART_Transmit(&DEBUG_STREAM, SAT_IMU, sizeof(SAT_IMU), 1000);
 8000e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e14:	2212      	movs	r2, #18
 8000e16:	4904      	ldr	r1, [pc, #16]	; (8000e28 <IMU_Data+0x13c>)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <IMU_Data+0x140>)
 8000e1a:	f001 ffbb 	bl	8002d94 <HAL_UART_Transmit>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000258 	.word	0x20000258
 8000e28:	2000039c 	.word	0x2000039c
 8000e2c:	20000210 	.word	0x20000210

08000e30 <buffersize>:
 * @brief	counts the number of non-null data in given array
 *
 * @param	buff	pointer to the array of data to be counted
 * @retval	int		number of non-null values in the array
 */
int buffersize(char *buff) {
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8000e3c:	e002      	b.n	8000e44 <buffersize+0x14>
		i++;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f6      	bne.n	8000e3e <buffersize+0xe>
	return i;
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <myprintf>:
 *
 * @param	fmt	pointer the array of characters data to be transmitted
 *
 * @retval	none
 */
void myprintf(const char *fmt, ...) {
 8000e5c:	b40f      	push	{r0, r1, r2, r3}
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	607b      	str	r3, [r7, #4]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	2164      	movs	r1, #100	; 0x64
 8000e70:	481a      	ldr	r0, [pc, #104]	; (8000edc <myprintf+0x80>)
 8000e72:	f002 f9c1 	bl	80031f8 <vsniprintf>
	va_end(args);
	int len = buffersize(temp);
 8000e76:	4819      	ldr	r0, [pc, #100]	; (8000edc <myprintf+0x80>)
 8000e78:	f7ff ffda 	bl	8000e30 <buffersize>
 8000e7c:	60f8      	str	r0, [r7, #12]
#ifdef CDC_USB_DEBUG
	CDC_Transmit_FS((uint8_t*) temp, len);

#endif
#ifdef UART_DEBUG
	uint32_t tick = uwTick;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <myprintf+0x84>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	60bb      	str	r3, [r7, #8]
	while (DEBUG_DATA_TX_FLAG != 0) {
 8000e84:	e00d      	b.n	8000ea2 <myprintf+0x46>
		HAL_Delay(1);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f000 fafa 	bl	8001480 <HAL_Delay>
		if (uwTick - tick > 5000) {
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <myprintf+0x84>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d902      	bls.n	8000ea2 <myprintf+0x46>
			DEBUG_DATA_TX_FLAG = 0;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <myprintf+0x88>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
	while (DEBUG_DATA_TX_FLAG != 0) {
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <myprintf+0x88>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1ed      	bne.n	8000e86 <myprintf+0x2a>
		}
	}
	DEBUG_DATA_TX_FLAG = 0;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <myprintf+0x88>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&DEBUG_STREAM, (uint8_t*) temp, len);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4909      	ldr	r1, [pc, #36]	; (8000edc <myprintf+0x80>)
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <myprintf+0x8c>)
 8000eba:	f001 ffee 	bl	8002e9a <HAL_UART_Transmit_IT>
	while (DEBUG_DATA_TX_FLAG != 1) {
 8000ebe:	bf00      	nop
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <myprintf+0x88>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d1fb      	bne.n	8000ec0 <myprintf+0x64>

	}
	DEBUG_DATA_TX_FLAG = 0;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <myprintf+0x88>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
#endif
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ed8:	b004      	add	sp, #16
 8000eda:	4770      	bx	lr
 8000edc:	2000009c 	.word	0x2000009c
 8000ee0:	200003b4 	.word	0x200003b4
 8000ee4:	200003ae 	.word	0x200003ae
 8000ee8:	20000210 	.word	0x20000210

08000eec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef0:	f000 fa64 	bl	80013bc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef4:	f000 f80f 	bl	8000f16 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ef8:	f000 f8a8 	bl	800104c <MX_GPIO_Init>
	MX_SPI1_Init();
 8000efc:	f000 f846 	bl	8000f8c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000f00:	f000 f87a 	bl	8000ff8 <MX_USART1_UART_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {


		IMU_Setup();
 8000f04:	f7ff feaa 	bl	8000c5c <IMU_Setup>
		HAL_Delay(1000);
 8000f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0c:	f000 fab8 	bl	8001480 <HAL_Delay>
		IMU_Data();
 8000f10:	f7ff feec 	bl	8000cec <IMU_Data>
		IMU_Setup();
 8000f14:	e7f6      	b.n	8000f04 <main+0x18>

08000f16 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b090      	sub	sp, #64	; 0x40
 8000f1a:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	2228      	movs	r2, #40	; 0x28
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 f913 	bl	8003150 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f40:	2310      	movs	r3, #16
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fd3b 	bl	80019c8 <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x46>
		Error_Handler();
 8000f58:	f000 f8d8 	bl	800110c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 ffa7 	bl	8001ec8 <HAL_RCC_ClockConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x6e>
		Error_Handler();
 8000f80:	f000 f8c4 	bl	800110c <Error_Handler>
	}
}
 8000f84:	bf00      	nop
 8000f86:	3740      	adds	r7, #64	; 0x40
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_SPI1_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f9c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd8:	220a      	movs	r2, #10
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fde:	f001 f901 	bl	80021e4 <HAL_SPI_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_SPI1_Init+0x60>
		Error_Handler();
 8000fe8:	f000 f890 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000258 	.word	0x20000258
 8000ff4:	40013000 	.word	0x40013000

08000ff8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART1_UART_Init+0x4c>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_USART1_UART_Init+0x50>)
 8001000:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_USART1_UART_Init+0x4c>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART1_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART1_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART1_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART1_UART_Init+0x4c>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_USART1_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART1_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_USART1_UART_Init+0x4c>)
 8001030:	f001 fe60 	bl	8002cf4 <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800103a:	f000 f867 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000210 	.word	0x20000210
 8001048:	40013800 	.word	0x40013800

0800104c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <MX_GPIO_Init+0xb4>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a26      	ldr	r2, [pc, #152]	; (8001100 <MX_GPIO_Init+0xb4>)
 8001066:	f043 0320 	orr.w	r3, r3, #32
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_GPIO_Init+0xb4>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_GPIO_Init+0xb4>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a20      	ldr	r2, [pc, #128]	; (8001100 <MX_GPIO_Init+0xb4>)
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_GPIO_Init+0xb4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_GPIO_Init+0xb4>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <MX_GPIO_Init+0xb4>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_GPIO_Init+0xb4>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_MAG_GPIO_Port, CS_MAG_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2110      	movs	r1, #16
 80010ac:	4815      	ldr	r0, [pc, #84]	; (8001104 <MX_GPIO_Init+0xb8>)
 80010ae:	f000 fc73 	bl	8001998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b8:	4813      	ldr	r0, [pc, #76]	; (8001108 <MX_GPIO_Init+0xbc>)
 80010ba:	f000 fc6d 	bl	8001998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_MAG_Pin */
	GPIO_InitStruct.Pin = CS_MAG_Pin;
 80010be:	2310      	movs	r3, #16
 80010c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CS_MAG_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <MX_GPIO_Init+0xb8>)
 80010d6:	f000 fadb 	bl	8001690 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_MPU_Pin */
	GPIO_InitStruct.Pin = CS_MPU_Pin;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CS_MPU_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_GPIO_Init+0xbc>)
 80010f4:	f000 facc 	bl	8001690 <HAL_GPIO_Init>

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	40010800 	.word	0x40010800
 8001108:	40010c00 	.word	0x40010c00

0800110c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_MspInit+0x5c>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <HAL_MspInit+0x5c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_MspInit+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_MspInit+0x5c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_MspInit+0x60>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_MspInit+0x60>)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000

0800117c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_SPI_MspInit+0x88>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d12f      	bne.n	80011fc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SEN_SCK_Pin|SEN_MOSI_Pin;
 80011cc:	23a0      	movs	r3, #160	; 0xa0
 80011ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011e0:	f000 fa56 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEN_MISO_Pin;
 80011e4:	2340      	movs	r3, #64	; 0x40
 80011e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SEN_MISO_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011f8:	f000 fa4a 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40013000 	.word	0x40013000
 8001208:	40021000 	.word	0x40021000
 800120c:	40010800 	.word	0x40010800

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <HAL_UART_MspInit+0x8c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d131      	bne.n	8001294 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_UART_MspInit+0x90>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <HAL_UART_MspInit+0x90>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_UART_MspInit+0x90>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_MspInit+0x90>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <HAL_UART_MspInit+0x90>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_UART_MspInit+0x90>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001264:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4619      	mov	r1, r3
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HAL_UART_MspInit+0x94>)
 8001276:	f000 fa0b 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800127a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_UART_MspInit+0x94>)
 8001290:	f000 f9fe 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40013800 	.word	0x40013800
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010800 	.word	0x40010800

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ee:	f000 f8ab 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f001 fee8 	bl	80030fc <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20005000 	.word	0x20005000
 8001358:	00000400 	.word	0x00000400
 800135c:	20000100 	.word	0x20000100
 8001360:	200003c8 	.word	0x200003c8

08001364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001370:	f7ff fff8 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001376:	490c      	ldr	r1, [pc, #48]	; (80013a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800138c:	4c09      	ldr	r4, [pc, #36]	; (80013b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139a:	f001 feb5 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7ff fda5 	bl	8000eec <main>
  bx lr
 80013a2:	4770      	bx	lr
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013ac:	08003bc8 	.word	0x08003bc8
  ldr r2, =_sbss
 80013b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013b4:	200003c8 	.word	0x200003c8

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x28>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x28>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f92b 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fe9e 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f935 	bl	8001676 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f90b 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_IncTick+0x20>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000008 	.word	0x20000008
 8001468:	200003b4 	.word	0x200003b4

0800146c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_GetTick+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	200003b4 	.word	0x200003b4

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff fff0 	bl	800146c <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffe0 	bl	800146c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff90 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff49 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff5e 	bl	8001510 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff90 	bl	8001580 <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5f 	bl	800152c <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffb0 	bl	80015e4 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	e169      	b.n	8001978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016a4:	2201      	movs	r2, #1
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f040 8158 	bne.w	8001972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a9a      	ldr	r2, [pc, #616]	; (8001930 <HAL_GPIO_Init+0x2a0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d05e      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016cc:	4a98      	ldr	r2, [pc, #608]	; (8001930 <HAL_GPIO_Init+0x2a0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d875      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016d2:	4a98      	ldr	r2, [pc, #608]	; (8001934 <HAL_GPIO_Init+0x2a4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d058      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016d8:	4a96      	ldr	r2, [pc, #600]	; (8001934 <HAL_GPIO_Init+0x2a4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d86f      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016de:	4a96      	ldr	r2, [pc, #600]	; (8001938 <HAL_GPIO_Init+0x2a8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d052      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016e4:	4a94      	ldr	r2, [pc, #592]	; (8001938 <HAL_GPIO_Init+0x2a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d869      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016ea:	4a94      	ldr	r2, [pc, #592]	; (800193c <HAL_GPIO_Init+0x2ac>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d04c      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016f0:	4a92      	ldr	r2, [pc, #584]	; (800193c <HAL_GPIO_Init+0x2ac>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d863      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016f6:	4a92      	ldr	r2, [pc, #584]	; (8001940 <HAL_GPIO_Init+0x2b0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d046      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016fc:	4a90      	ldr	r2, [pc, #576]	; (8001940 <HAL_GPIO_Init+0x2b0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d85d      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 8001702:	2b12      	cmp	r3, #18
 8001704:	d82a      	bhi.n	800175c <HAL_GPIO_Init+0xcc>
 8001706:	2b12      	cmp	r3, #18
 8001708:	d859      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <HAL_GPIO_Init+0x80>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	0800178b 	.word	0x0800178b
 8001714:	08001765 	.word	0x08001765
 8001718:	08001777 	.word	0x08001777
 800171c:	080017b9 	.word	0x080017b9
 8001720:	080017bf 	.word	0x080017bf
 8001724:	080017bf 	.word	0x080017bf
 8001728:	080017bf 	.word	0x080017bf
 800172c:	080017bf 	.word	0x080017bf
 8001730:	080017bf 	.word	0x080017bf
 8001734:	080017bf 	.word	0x080017bf
 8001738:	080017bf 	.word	0x080017bf
 800173c:	080017bf 	.word	0x080017bf
 8001740:	080017bf 	.word	0x080017bf
 8001744:	080017bf 	.word	0x080017bf
 8001748:	080017bf 	.word	0x080017bf
 800174c:	080017bf 	.word	0x080017bf
 8001750:	080017bf 	.word	0x080017bf
 8001754:	0800176d 	.word	0x0800176d
 8001758:	08001781 	.word	0x08001781
 800175c:	4a79      	ldr	r2, [pc, #484]	; (8001944 <HAL_GPIO_Init+0x2b4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001762:	e02c      	b.n	80017be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e029      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	3304      	adds	r3, #4
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e024      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	3308      	adds	r3, #8
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e01f      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	330c      	adds	r3, #12
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e01a      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001792:	2304      	movs	r3, #4
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e013      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	611a      	str	r2, [r3, #16]
          break;
 80017aa:	e009      	b.n	80017c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	615a      	str	r2, [r3, #20]
          break;
 80017b6:	e003      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          break;
 80017be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2bff      	cmp	r3, #255	; 0xff
 80017c4:	d801      	bhi.n	80017ca <HAL_GPIO_Init+0x13a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	e001      	b.n	80017ce <HAL_GPIO_Init+0x13e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2bff      	cmp	r3, #255	; 0xff
 80017d4:	d802      	bhi.n	80017dc <HAL_GPIO_Init+0x14c>
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x152>
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	3b08      	subs	r3, #8
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	210f      	movs	r1, #15
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	6a39      	ldr	r1, [r7, #32]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	431a      	orrs	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80b1 	beq.w	8001972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001810:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001828:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_GPIO_Init+0x2bc>)
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a40      	ldr	r2, [pc, #256]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d013      	beq.n	800187c <HAL_GPIO_Init+0x1ec>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a3f      	ldr	r2, [pc, #252]	; (8001954 <HAL_GPIO_Init+0x2c4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00d      	beq.n	8001878 <HAL_GPIO_Init+0x1e8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a3e      	ldr	r2, [pc, #248]	; (8001958 <HAL_GPIO_Init+0x2c8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d007      	beq.n	8001874 <HAL_GPIO_Init+0x1e4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3d      	ldr	r2, [pc, #244]	; (800195c <HAL_GPIO_Init+0x2cc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_GPIO_Init+0x1e0>
 800186c:	2303      	movs	r3, #3
 800186e:	e006      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001870:	2304      	movs	r3, #4
 8001872:	e004      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001874:	2302      	movs	r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 800187c:	2300      	movs	r3, #0
 800187e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001880:	f002 0203 	and.w	r2, r2, #3
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	4093      	lsls	r3, r2
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800188e:	492f      	ldr	r1, [pc, #188]	; (800194c <HAL_GPIO_Init+0x2bc>)
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	492c      	ldr	r1, [pc, #176]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4928      	ldr	r1, [pc, #160]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	4922      	ldr	r1, [pc, #136]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	491e      	ldr	r1, [pc, #120]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4918      	ldr	r1, [pc, #96]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4914      	ldr	r1, [pc, #80]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d021      	beq.n	8001964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e021      	b.n	8001972 <HAL_GPIO_Init+0x2e2>
 800192e:	bf00      	nop
 8001930:	10320000 	.word	0x10320000
 8001934:	10310000 	.word	0x10310000
 8001938:	10220000 	.word	0x10220000
 800193c:	10210000 	.word	0x10210000
 8001940:	10120000 	.word	0x10120000
 8001944:	10110000 	.word	0x10110000
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00
 8001958:	40011000 	.word	0x40011000
 800195c:	40011400 	.word	0x40011400
 8001960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_GPIO_Init+0x304>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	43db      	mvns	r3, r3
 800196c:	4909      	ldr	r1, [pc, #36]	; (8001994 <HAL_GPIO_Init+0x304>)
 800196e:	4013      	ands	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	3301      	adds	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	f47f ae8e 	bne.w	80016a4 <HAL_GPIO_Init+0x14>
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	372c      	adds	r7, #44	; 0x2c
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019b4:	e003      	b.n	80019be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	611a      	str	r2, [r3, #16]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e26c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8087 	beq.w	8001af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e8:	4b92      	ldr	r3, [pc, #584]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d00c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f4:	4b8f      	ldr	r3, [pc, #572]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d112      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5e>
 8001a00:	4b8c      	ldr	r3, [pc, #560]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0c:	d10b      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0e:	4b89      	ldr	r3, [pc, #548]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d06c      	beq.n	8001af4 <HAL_RCC_OscConfig+0x12c>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d168      	bne.n	8001af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e246      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x76>
 8001a30:	4b80      	ldr	r3, [pc, #512]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a7f      	ldr	r2, [pc, #508]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e02e      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x98>
 8001a46:	4b7b      	ldr	r3, [pc, #492]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a7a      	ldr	r2, [pc, #488]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a77      	ldr	r2, [pc, #476]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01d      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0xbc>
 8001a6a:	4b72      	ldr	r3, [pc, #456]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a71      	ldr	r2, [pc, #452]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6e      	ldr	r2, [pc, #440]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a84:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a6a      	ldr	r2, [pc, #424]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a67      	ldr	r2, [pc, #412]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fce2 	bl	800146c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fcde 	bl	800146c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1fa      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b5d      	ldr	r3, [pc, #372]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0xe4>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fcce 	bl	800146c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fcca 	bl	800146c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1e6      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x10c>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b0e:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d11c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x18c>
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d116      	bne.n	8001b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x176>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e1ba      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4939      	ldr	r1, [pc, #228]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	e03a      	b.n	8001bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fc83 	bl	800146c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fc7f 	bl	800146c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e19b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4927      	ldr	r1, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fc62 	bl	800146c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff fc5e 	bl	800146c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e17a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d03a      	beq.n	8001c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d019      	beq.n	8001c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7ff fc42 	bl	800146c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fc3e 	bl	800146c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e15a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 facc 	bl	80021a8 <RCC_Delay>
 8001c10:	e01c      	b.n	8001c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7ff fc28 	bl	800146c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1e:	e00f      	b.n	8001c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff fc24 	bl	800146c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d908      	bls.n	8001c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e140      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	42420000 	.word	0x42420000
 8001c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c40:	4b9e      	ldr	r3, [pc, #632]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e9      	bne.n	8001c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a6 	beq.w	8001da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b97      	ldr	r3, [pc, #604]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b94      	ldr	r3, [pc, #592]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a93      	ldr	r2, [pc, #588]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	4b8e      	ldr	r3, [pc, #568]	; (8001ec0 <HAL_RCC_OscConfig+0x4f8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c92:	4b8b      	ldr	r3, [pc, #556]	; (8001ec0 <HAL_RCC_OscConfig+0x4f8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a8a      	ldr	r2, [pc, #552]	; (8001ec0 <HAL_RCC_OscConfig+0x4f8>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fbe5 	bl	800146c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7ff fbe1 	bl	800146c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	; 0x64
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0fd      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	4b81      	ldr	r3, [pc, #516]	; (8001ec0 <HAL_RCC_OscConfig+0x4f8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x312>
 8001ccc:	4b7b      	ldr	r3, [pc, #492]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a7a      	ldr	r2, [pc, #488]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	e02d      	b.n	8001d36 <HAL_RCC_OscConfig+0x36e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x334>
 8001ce2:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a75      	ldr	r2, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	4b73      	ldr	r3, [pc, #460]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a72      	ldr	r2, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	e01c      	b.n	8001d36 <HAL_RCC_OscConfig+0x36e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x356>
 8001d04:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a6c      	ldr	r2, [pc, #432]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a69      	ldr	r2, [pc, #420]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	e00b      	b.n	8001d36 <HAL_RCC_OscConfig+0x36e>
 8001d1e:	4b67      	ldr	r3, [pc, #412]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a66      	ldr	r2, [pc, #408]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	4b64      	ldr	r3, [pc, #400]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a63      	ldr	r2, [pc, #396]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d015      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fb95 	bl	800146c <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff fb91 	bl	800146c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0ab      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ee      	beq.n	8001d46 <HAL_RCC_OscConfig+0x37e>
 8001d68:	e014      	b.n	8001d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fb7f 	bl	800146c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7ff fb7b 	bl	800146c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e095      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ee      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d105      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a47      	ldr	r2, [pc, #284]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8081 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db0:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d061      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d146      	bne.n	8001e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_RCC_OscConfig+0x4fc>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff fb4f 	bl	800146c <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7ff fb4b 	bl	800146c <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e067      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de4:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d108      	bne.n	8001e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	492d      	ldr	r1, [pc, #180]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a19      	ldr	r1, [r3, #32]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	4927      	ldr	r1, [pc, #156]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_OscConfig+0x4fc>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fb1f 	bl	800146c <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7ff fb1b 	bl	800146c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e037      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x46a>
 8001e50:	e02f      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_RCC_OscConfig+0x4fc>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fb08 	bl	800146c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff fb04 	bl	800146c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e020      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x498>
 8001e7e:	e018      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e013      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	42420060 	.word	0x42420060

08001ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0d0      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d910      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 0207 	bic.w	r2, r3, #7
 8001ef2:	4965      	ldr	r1, [pc, #404]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0b8      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	494d      	ldr	r1, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d040      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d115      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e07f      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e073      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06b      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4936      	ldr	r1, [pc, #216]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7ff fa58 	bl	800146c <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7ff fa54 	bl	800146c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e053      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d210      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4922      	ldr	r1, [pc, #136]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e032      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4916      	ldr	r1, [pc, #88]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002056:	f000 f821 	bl	800209c <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1cc>)
 8002070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1d0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f9b6 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40022000 	.word	0x40022000
 800208c:	40021000 	.word	0x40021000
 8002090:	08003b60 	.word	0x08003b60
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_RCC_GetSysClockFreq+0x94>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d002      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x30>
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x36>
 80020ca:	e027      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ce:	613b      	str	r3, [r7, #16]
      break;
 80020d0:	e027      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0c9b      	lsrs	r3, r3, #18
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d010      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_RCC_GetSysClockFreq+0x94>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0c5b      	lsrs	r3, r3, #17
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	4a11      	ldr	r2, [pc, #68]	; (800213c <HAL_RCC_GetSysClockFreq+0xa0>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <HAL_RCC_GetSysClockFreq+0x98>)
 80020fe:	fb02 f203 	mul.w	r2, r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e004      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	613b      	str	r3, [r7, #16]
      break;
 800211a:	e002      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetSysClockFreq+0x98>)
 800211e:	613b      	str	r3, [r7, #16]
      break;
 8002120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002122:	693b      	ldr	r3, [r7, #16]
}
 8002124:	4618      	mov	r0, r3
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	007a1200 	.word	0x007a1200
 8002138:	08003b78 	.word	0x08003b78
 800213c:	08003b88 	.word	0x08003b88
 8002140:	003d0900 	.word	0x003d0900

08002144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002148:	4b02      	ldr	r3, [pc, #8]	; (8002154 <HAL_RCC_GetHCLKFreq+0x10>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	20000000 	.word	0x20000000

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800215c:	f7ff fff2 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4903      	ldr	r1, [pc, #12]	; (800217c <HAL_RCC_GetPCLK1Freq+0x24>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08003b70 	.word	0x08003b70

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002184:	f7ff ffde 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0adb      	lsrs	r3, r3, #11
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08003b70 	.word	0x08003b70

080021a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <RCC_Delay+0x34>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <RCC_Delay+0x38>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0a5b      	lsrs	r3, r3, #9
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c4:	bf00      	nop
  }
  while (Delay --);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	60fa      	str	r2, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f9      	bne.n	80021c4 <RCC_Delay+0x1c>
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	20000000 	.word	0x20000000
 80021e0:	10624dd3 	.word	0x10624dd3

080021e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e076      	b.n	80022e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d108      	bne.n	8002210 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002206:	d009      	beq.n	800221c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
 800220e:	e005      	b.n	800221c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe ffa0 	bl	800117c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002252:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	ea42 0103 	orr.w	r1, r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	0c1a      	lsrs	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f002 0204 	and.w	r2, r2, #4
 80022c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_SPI_Transmit+0x22>
 800230a:	2302      	movs	r3, #2
 800230c:	e12d      	b.n	800256a <HAL_SPI_Transmit+0x27e>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002316:	f7ff f8a9 	bl	800146c <HAL_GetTick>
 800231a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d002      	beq.n	8002332 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800232c:	2302      	movs	r3, #2
 800232e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002330:	e116      	b.n	8002560 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_SPI_Transmit+0x52>
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002342:	e10d      	b.n	8002560 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2203      	movs	r2, #3
 8002348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800238a:	d10f      	bne.n	80023ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800239a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d007      	beq.n	80023ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d2:	d14f      	bne.n	8002474 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_SPI_Transmit+0xf6>
 80023dc:	8afb      	ldrh	r3, [r7, #22]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d142      	bne.n	8002468 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	1c9a      	adds	r2, r3, #2
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002406:	e02f      	b.n	8002468 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d112      	bne.n	800243c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	881a      	ldrh	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	1c9a      	adds	r2, r3, #2
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	86da      	strh	r2, [r3, #54]	; 0x36
 800243a:	e015      	b.n	8002468 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800243c:	f7ff f816 	bl	800146c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d803      	bhi.n	8002454 <HAL_SPI_Transmit+0x168>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002452:	d102      	bne.n	800245a <HAL_SPI_Transmit+0x16e>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002466:	e07b      	b.n	8002560 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ca      	bne.n	8002408 <HAL_SPI_Transmit+0x11c>
 8002472:	e050      	b.n	8002516 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_SPI_Transmit+0x196>
 800247c:	8afb      	ldrh	r3, [r7, #22]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d144      	bne.n	800250c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024a8:	e030      	b.n	800250c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d113      	bne.n	80024e0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	330c      	adds	r3, #12
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80024de:	e015      	b.n	800250c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e0:	f7fe ffc4 	bl	800146c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d803      	bhi.n	80024f8 <HAL_SPI_Transmit+0x20c>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d102      	bne.n	80024fe <HAL_SPI_Transmit+0x212>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800250a:	e029      	b.n	8002560 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1c9      	bne.n	80024aa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fbcc 	bl	8002cb8 <SPI_EndRxTxTransaction>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	77fb      	strb	r3, [r7, #31]
 8002556:	e003      	b.n	8002560 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002568:	7ffb      	ldrb	r3, [r7, #31]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b088      	sub	sp, #32
 8002576:	af02      	add	r7, sp, #8
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4613      	mov	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d002      	beq.n	8002598 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002592:	2302      	movs	r3, #2
 8002594:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002596:	e0fb      	b.n	8002790 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a0:	d112      	bne.n	80025c8 <HAL_SPI_Receive+0x56>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10e      	bne.n	80025c8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2204      	movs	r2, #4
 80025ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f8ef 	bl	80027a2 <HAL_SPI_TransmitReceive>
 80025c4:	4603      	mov	r3, r0
 80025c6:	e0e8      	b.n	800279a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_SPI_Receive+0x64>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0e1      	b.n	800279a <HAL_SPI_Receive+0x228>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025de:	f7fe ff45 	bl	800146c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_SPI_Receive+0x7e>
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025f4:	e0cc      	b.n	8002790 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2204      	movs	r2, #4
 80025fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	88fa      	ldrh	r2, [r7, #6]
 8002614:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263c:	d10f      	bne.n	800265e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800264c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d007      	beq.n	800267c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800267a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d16a      	bne.n	800275a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002684:	e032      	b.n	80026ec <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d115      	bne.n	80026c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f103 020c 	add.w	r2, r3, #12
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026be:	e015      	b.n	80026ec <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026c0:	f7fe fed4 	bl	800146c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d803      	bhi.n	80026d8 <HAL_SPI_Receive+0x166>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d102      	bne.n	80026de <HAL_SPI_Receive+0x16c>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80026ea:	e051      	b.n	8002790 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1c7      	bne.n	8002686 <HAL_SPI_Receive+0x114>
 80026f6:	e035      	b.n	8002764 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d113      	bne.n	800272e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	b292      	uxth	r2, r2
 8002712:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	1c9a      	adds	r2, r3, #2
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800272c:	e015      	b.n	800275a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800272e:	f7fe fe9d 	bl	800146c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d803      	bhi.n	8002746 <HAL_SPI_Receive+0x1d4>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d102      	bne.n	800274c <HAL_SPI_Receive+0x1da>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002758:	e01a      	b.n	8002790 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1c9      	bne.n	80026f8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fa53 	bl	8002c14 <SPI_EndRxTransaction>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
 8002786:	e003      	b.n	8002790 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002798:	7dfb      	ldrb	r3, [r7, #23]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08c      	sub	sp, #48	; 0x30
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027b0:	2301      	movs	r3, #1
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_SPI_TransmitReceive+0x26>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e198      	b.n	8002afa <HAL_SPI_TransmitReceive+0x358>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027d0:	f7fe fe4c 	bl	800146c <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d00f      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x70>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f8:	d107      	bne.n	800280a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_SPI_TransmitReceive+0x68>
 8002802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002806:	2b04      	cmp	r3, #4
 8002808:	d003      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800280a:	2302      	movs	r3, #2
 800280c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002810:	e16d      	b.n	8002aee <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x82>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x82>
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800282a:	e160      	b.n	8002aee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b04      	cmp	r3, #4
 8002836:	d003      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2205      	movs	r2, #5
 800283c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	887a      	ldrh	r2, [r7, #2]
 8002856:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d007      	beq.n	8002894 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800289c:	d17c      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_SPI_TransmitReceive+0x10a>
 80028a6:	8b7b      	ldrh	r3, [r7, #26]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d16a      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	881a      	ldrh	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	1c9a      	adds	r2, r3, #2
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d0:	e057      	b.n	8002982 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x176>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_SPI_TransmitReceive+0x176>
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d113      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	881a      	ldrh	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	1c9a      	adds	r2, r3, #2
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d119      	bne.n	800295a <HAL_SPI_TransmitReceive+0x1b8>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d014      	beq.n	800295a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	b292      	uxth	r2, r2
 800293c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	1c9a      	adds	r2, r3, #2
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002956:	2301      	movs	r3, #1
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800295a:	f7fe fd87 	bl	800146c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002966:	429a      	cmp	r2, r3
 8002968:	d80b      	bhi.n	8002982 <HAL_SPI_TransmitReceive+0x1e0>
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d007      	beq.n	8002982 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002980:	e0b5      	b.n	8002aee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1a2      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x130>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d19d      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x130>
 8002996:	e080      	b.n	8002a9a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_SPI_TransmitReceive+0x204>
 80029a0:	8b7b      	ldrh	r3, [r7, #26]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d16f      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	330c      	adds	r3, #12
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029cc:	e05b      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d11c      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x274>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d017      	beq.n	8002a16 <HAL_SPI_TransmitReceive+0x274>
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d114      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	7812      	ldrb	r2, [r2, #0]
 80029f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d119      	bne.n	8002a58 <HAL_SPI_TransmitReceive+0x2b6>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d014      	beq.n	8002a58 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a54:	2301      	movs	r3, #1
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a58:	f7fe fd08 	bl	800146c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d803      	bhi.n	8002a70 <HAL_SPI_TransmitReceive+0x2ce>
 8002a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d102      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x2d4>
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a84:	e033      	b.n	8002aee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d19e      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x22c>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d199      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f90a 	bl	8002cb8 <SPI_EndRxTxTransaction>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ab6:	e01a      	b.n	8002aee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ae4:	e003      	b.n	8002aee <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002af6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3730      	adds	r7, #48	; 0x30
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b14:	f7fe fcaa 	bl	800146c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b24:	f7fe fca2 	bl	800146c <HAL_GetTick>
 8002b28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	015b      	lsls	r3, r3, #5
 8002b30:	0d1b      	lsrs	r3, r3, #20
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b3a:	e054      	b.n	8002be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d050      	beq.n	8002be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b44:	f7fe fc92 	bl	800146c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d902      	bls.n	8002b5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d13d      	bne.n	8002bd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b72:	d111      	bne.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7c:	d004      	beq.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b86:	d107      	bne.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba0:	d10f      	bne.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e017      	b.n	8002c06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d19b      	bne.n	8002b3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000000 	.word	0x20000000

08002c14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c28:	d111      	bne.n	8002c4e <SPI_EndRxTransaction+0x3a>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c32:	d004      	beq.n	8002c3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3c:	d107      	bne.n	8002c4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c56:	d117      	bne.n	8002c88 <SPI_EndRxTransaction+0x74>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c60:	d112      	bne.n	8002c88 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff ff49 	bl	8002b04 <SPI_WaitFlagStateUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01a      	beq.n	8002cae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e013      	b.n	8002cb0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff ff36 	bl	8002b04 <SPI_WaitFlagStateUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e000      	b.n	8002cb0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff ff18 	bl	8002b04 <SPI_WaitFlagStateUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e000      	b.n	8002cec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e042      	b.n	8002d8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fa78 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f951 	bl	8002fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d16d      	bne.n	8002e90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_UART_Transmit+0x2c>
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e066      	b.n	8002e92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe fb4b 	bl	800146c <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	88fa      	ldrh	r2, [r7, #6]
 8002de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dec:	d108      	bne.n	8002e00 <HAL_UART_Transmit+0x6c>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e003      	b.n	8002e08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e08:	e02a      	b.n	8002e60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f875 	bl	8002f04 <UART_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e036      	b.n	8002e92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	e007      	b.n	8002e52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1cf      	bne.n	8002e0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2140      	movs	r1, #64	; 0x40
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f845 	bl	8002f04 <UART_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e006      	b.n	8002e92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d121      	bne.n	8002ef8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_UART_Transmit_IT+0x26>
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e01a      	b.n	8002efa <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2221      	movs	r2, #33	; 0x21
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ef2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b090      	sub	sp, #64	; 0x40
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f14:	e050      	b.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d04c      	beq.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f24:	f7fe faa2 	bl	800146c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d241      	bcs.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	e853 3f00 	ldrex	r3, [r3]
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f54:	637a      	str	r2, [r7, #52]	; 0x34
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e5      	bne.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3314      	adds	r3, #20
 8002f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	613b      	str	r3, [r7, #16]
   return(result);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3314      	adds	r3, #20
 8002f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f88:	623a      	str	r2, [r7, #32]
 8002f8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	69f9      	ldr	r1, [r7, #28]
 8002f8e:	6a3a      	ldr	r2, [r7, #32]
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e5      	bne.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e00f      	b.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d09f      	beq.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3740      	adds	r7, #64	; 0x40
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800301a:	f023 030c 	bic.w	r3, r3, #12
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	430b      	orrs	r3, r1
 8003026:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2c      	ldr	r2, [pc, #176]	; (80030f4 <UART_SetConfig+0x114>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d103      	bne.n	8003050 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7ff f89a 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	e002      	b.n	8003056 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7ff f882 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8003054:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009a      	lsls	r2, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <UART_SetConfig+0x118>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	0119      	lsls	r1, r3, #4
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009a      	lsls	r2, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	fbb2 f2f3 	udiv	r2, r2, r3
 800308c:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <UART_SetConfig+0x118>)
 800308e:	fba3 0302 	umull	r0, r3, r3, r2
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2064      	movs	r0, #100	; 0x64
 8003096:	fb00 f303 	mul.w	r3, r0, r3
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	3332      	adds	r3, #50	; 0x32
 80030a0:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <UART_SetConfig+0x118>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ac:	4419      	add	r1, r3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <UART_SetConfig+0x118>)
 80030c6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2064      	movs	r0, #100	; 0x64
 80030ce:	fb00 f303 	mul.w	r3, r0, r3
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	3332      	adds	r3, #50	; 0x32
 80030d8:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <UART_SetConfig+0x118>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	f003 020f 	and.w	r2, r3, #15
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	440a      	add	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40013800 	.word	0x40013800
 80030f8:	51eb851f 	.word	0x51eb851f

080030fc <__errno>:
 80030fc:	4b01      	ldr	r3, [pc, #4]	; (8003104 <__errno+0x8>)
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	2000000c 	.word	0x2000000c

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	2600      	movs	r6, #0
 800310c:	4d0c      	ldr	r5, [pc, #48]	; (8003140 <__libc_init_array+0x38>)
 800310e:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 8003110:	1b64      	subs	r4, r4, r5
 8003112:	10a4      	asrs	r4, r4, #2
 8003114:	42a6      	cmp	r6, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	f000 fc96 	bl	8003a48 <_init>
 800311c:	2600      	movs	r6, #0
 800311e:	4d0a      	ldr	r5, [pc, #40]	; (8003148 <__libc_init_array+0x40>)
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <__libc_init_array+0x44>)
 8003122:	1b64      	subs	r4, r4, r5
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	42a6      	cmp	r6, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003130:	4798      	blx	r3
 8003132:	3601      	adds	r6, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f855 3b04 	ldr.w	r3, [r5], #4
 800313a:	4798      	blx	r3
 800313c:	3601      	adds	r6, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	08003bc0 	.word	0x08003bc0
 8003144:	08003bc0 	.word	0x08003bc0
 8003148:	08003bc0 	.word	0x08003bc0
 800314c:	08003bc4 	.word	0x08003bc4

08003150 <memset>:
 8003150:	4603      	mov	r3, r0
 8003152:	4402      	add	r2, r0
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	f803 1b01 	strb.w	r1, [r3], #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <siprintf>:
 8003160:	b40e      	push	{r1, r2, r3}
 8003162:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003166:	b500      	push	{lr}
 8003168:	b09c      	sub	sp, #112	; 0x70
 800316a:	ab1d      	add	r3, sp, #116	; 0x74
 800316c:	9002      	str	r0, [sp, #8]
 800316e:	9006      	str	r0, [sp, #24]
 8003170:	9107      	str	r1, [sp, #28]
 8003172:	9104      	str	r1, [sp, #16]
 8003174:	4808      	ldr	r0, [pc, #32]	; (8003198 <siprintf+0x38>)
 8003176:	4909      	ldr	r1, [pc, #36]	; (800319c <siprintf+0x3c>)
 8003178:	f853 2b04 	ldr.w	r2, [r3], #4
 800317c:	9105      	str	r1, [sp, #20]
 800317e:	6800      	ldr	r0, [r0, #0]
 8003180:	a902      	add	r1, sp, #8
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	f000 f8a2 	bl	80032cc <_svfiprintf_r>
 8003188:	2200      	movs	r2, #0
 800318a:	9b02      	ldr	r3, [sp, #8]
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	b01c      	add	sp, #112	; 0x70
 8003190:	f85d eb04 	ldr.w	lr, [sp], #4
 8003194:	b003      	add	sp, #12
 8003196:	4770      	bx	lr
 8003198:	2000000c 	.word	0x2000000c
 800319c:	ffff0208 	.word	0xffff0208

080031a0 <_vsniprintf_r>:
 80031a0:	b530      	push	{r4, r5, lr}
 80031a2:	1e14      	subs	r4, r2, #0
 80031a4:	4605      	mov	r5, r0
 80031a6:	b09b      	sub	sp, #108	; 0x6c
 80031a8:	4618      	mov	r0, r3
 80031aa:	da05      	bge.n	80031b8 <_vsniprintf_r+0x18>
 80031ac:	238b      	movs	r3, #139	; 0x8b
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	602b      	str	r3, [r5, #0]
 80031b4:	b01b      	add	sp, #108	; 0x6c
 80031b6:	bd30      	pop	{r4, r5, pc}
 80031b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80031bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80031c0:	bf0c      	ite	eq
 80031c2:	4623      	moveq	r3, r4
 80031c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80031c8:	9302      	str	r3, [sp, #8]
 80031ca:	9305      	str	r3, [sp, #20]
 80031cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031d0:	4602      	mov	r2, r0
 80031d2:	9100      	str	r1, [sp, #0]
 80031d4:	9104      	str	r1, [sp, #16]
 80031d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80031da:	4669      	mov	r1, sp
 80031dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80031de:	4628      	mov	r0, r5
 80031e0:	f000 f874 	bl	80032cc <_svfiprintf_r>
 80031e4:	1c43      	adds	r3, r0, #1
 80031e6:	bfbc      	itt	lt
 80031e8:	238b      	movlt	r3, #139	; 0x8b
 80031ea:	602b      	strlt	r3, [r5, #0]
 80031ec:	2c00      	cmp	r4, #0
 80031ee:	d0e1      	beq.n	80031b4 <_vsniprintf_r+0x14>
 80031f0:	2200      	movs	r2, #0
 80031f2:	9b00      	ldr	r3, [sp, #0]
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e7dd      	b.n	80031b4 <_vsniprintf_r+0x14>

080031f8 <vsniprintf>:
 80031f8:	b507      	push	{r0, r1, r2, lr}
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	460a      	mov	r2, r1
 8003200:	4601      	mov	r1, r0
 8003202:	4803      	ldr	r0, [pc, #12]	; (8003210 <vsniprintf+0x18>)
 8003204:	6800      	ldr	r0, [r0, #0]
 8003206:	f7ff ffcb 	bl	80031a0 <_vsniprintf_r>
 800320a:	b003      	add	sp, #12
 800320c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003210:	2000000c 	.word	0x2000000c

08003214 <__ssputs_r>:
 8003214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003218:	688e      	ldr	r6, [r1, #8]
 800321a:	4682      	mov	sl, r0
 800321c:	429e      	cmp	r6, r3
 800321e:	460c      	mov	r4, r1
 8003220:	4690      	mov	r8, r2
 8003222:	461f      	mov	r7, r3
 8003224:	d838      	bhi.n	8003298 <__ssputs_r+0x84>
 8003226:	898a      	ldrh	r2, [r1, #12]
 8003228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800322c:	d032      	beq.n	8003294 <__ssputs_r+0x80>
 800322e:	6825      	ldr	r5, [r4, #0]
 8003230:	6909      	ldr	r1, [r1, #16]
 8003232:	3301      	adds	r3, #1
 8003234:	eba5 0901 	sub.w	r9, r5, r1
 8003238:	6965      	ldr	r5, [r4, #20]
 800323a:	444b      	add	r3, r9
 800323c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003244:	106d      	asrs	r5, r5, #1
 8003246:	429d      	cmp	r5, r3
 8003248:	bf38      	it	cc
 800324a:	461d      	movcc	r5, r3
 800324c:	0553      	lsls	r3, r2, #21
 800324e:	d531      	bpl.n	80032b4 <__ssputs_r+0xa0>
 8003250:	4629      	mov	r1, r5
 8003252:	f000 fb53 	bl	80038fc <_malloc_r>
 8003256:	4606      	mov	r6, r0
 8003258:	b950      	cbnz	r0, 8003270 <__ssputs_r+0x5c>
 800325a:	230c      	movs	r3, #12
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	f8ca 3000 	str.w	r3, [sl]
 8003264:	89a3      	ldrh	r3, [r4, #12]
 8003266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800326a:	81a3      	strh	r3, [r4, #12]
 800326c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003270:	464a      	mov	r2, r9
 8003272:	6921      	ldr	r1, [r4, #16]
 8003274:	f000 face 	bl	8003814 <memcpy>
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	6126      	str	r6, [r4, #16]
 8003286:	444e      	add	r6, r9
 8003288:	6026      	str	r6, [r4, #0]
 800328a:	463e      	mov	r6, r7
 800328c:	6165      	str	r5, [r4, #20]
 800328e:	eba5 0509 	sub.w	r5, r5, r9
 8003292:	60a5      	str	r5, [r4, #8]
 8003294:	42be      	cmp	r6, r7
 8003296:	d900      	bls.n	800329a <__ssputs_r+0x86>
 8003298:	463e      	mov	r6, r7
 800329a:	4632      	mov	r2, r6
 800329c:	4641      	mov	r1, r8
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	f000 fac6 	bl	8003830 <memmove>
 80032a4:	68a3      	ldr	r3, [r4, #8]
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	1b9b      	subs	r3, r3, r6
 80032aa:	4432      	add	r2, r6
 80032ac:	2000      	movs	r0, #0
 80032ae:	60a3      	str	r3, [r4, #8]
 80032b0:	6022      	str	r2, [r4, #0]
 80032b2:	e7db      	b.n	800326c <__ssputs_r+0x58>
 80032b4:	462a      	mov	r2, r5
 80032b6:	f000 fb7b 	bl	80039b0 <_realloc_r>
 80032ba:	4606      	mov	r6, r0
 80032bc:	2800      	cmp	r0, #0
 80032be:	d1e1      	bne.n	8003284 <__ssputs_r+0x70>
 80032c0:	4650      	mov	r0, sl
 80032c2:	6921      	ldr	r1, [r4, #16]
 80032c4:	f000 face 	bl	8003864 <_free_r>
 80032c8:	e7c7      	b.n	800325a <__ssputs_r+0x46>
	...

080032cc <_svfiprintf_r>:
 80032cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d0:	4698      	mov	r8, r3
 80032d2:	898b      	ldrh	r3, [r1, #12]
 80032d4:	4607      	mov	r7, r0
 80032d6:	061b      	lsls	r3, r3, #24
 80032d8:	460d      	mov	r5, r1
 80032da:	4614      	mov	r4, r2
 80032dc:	b09d      	sub	sp, #116	; 0x74
 80032de:	d50e      	bpl.n	80032fe <_svfiprintf_r+0x32>
 80032e0:	690b      	ldr	r3, [r1, #16]
 80032e2:	b963      	cbnz	r3, 80032fe <_svfiprintf_r+0x32>
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	f000 fb09 	bl	80038fc <_malloc_r>
 80032ea:	6028      	str	r0, [r5, #0]
 80032ec:	6128      	str	r0, [r5, #16]
 80032ee:	b920      	cbnz	r0, 80032fa <_svfiprintf_r+0x2e>
 80032f0:	230c      	movs	r3, #12
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	e0d1      	b.n	800349e <_svfiprintf_r+0x1d2>
 80032fa:	2340      	movs	r3, #64	; 0x40
 80032fc:	616b      	str	r3, [r5, #20]
 80032fe:	2300      	movs	r3, #0
 8003300:	9309      	str	r3, [sp, #36]	; 0x24
 8003302:	2320      	movs	r3, #32
 8003304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003308:	2330      	movs	r3, #48	; 0x30
 800330a:	f04f 0901 	mov.w	r9, #1
 800330e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003312:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80034b8 <_svfiprintf_r+0x1ec>
 8003316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800331a:	4623      	mov	r3, r4
 800331c:	469a      	mov	sl, r3
 800331e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003322:	b10a      	cbz	r2, 8003328 <_svfiprintf_r+0x5c>
 8003324:	2a25      	cmp	r2, #37	; 0x25
 8003326:	d1f9      	bne.n	800331c <_svfiprintf_r+0x50>
 8003328:	ebba 0b04 	subs.w	fp, sl, r4
 800332c:	d00b      	beq.n	8003346 <_svfiprintf_r+0x7a>
 800332e:	465b      	mov	r3, fp
 8003330:	4622      	mov	r2, r4
 8003332:	4629      	mov	r1, r5
 8003334:	4638      	mov	r0, r7
 8003336:	f7ff ff6d 	bl	8003214 <__ssputs_r>
 800333a:	3001      	adds	r0, #1
 800333c:	f000 80aa 	beq.w	8003494 <_svfiprintf_r+0x1c8>
 8003340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003342:	445a      	add	r2, fp
 8003344:	9209      	str	r2, [sp, #36]	; 0x24
 8003346:	f89a 3000 	ldrb.w	r3, [sl]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80a2 	beq.w	8003494 <_svfiprintf_r+0x1c8>
 8003350:	2300      	movs	r3, #0
 8003352:	f04f 32ff 	mov.w	r2, #4294967295
 8003356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800335a:	f10a 0a01 	add.w	sl, sl, #1
 800335e:	9304      	str	r3, [sp, #16]
 8003360:	9307      	str	r3, [sp, #28]
 8003362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003366:	931a      	str	r3, [sp, #104]	; 0x68
 8003368:	4654      	mov	r4, sl
 800336a:	2205      	movs	r2, #5
 800336c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003370:	4851      	ldr	r0, [pc, #324]	; (80034b8 <_svfiprintf_r+0x1ec>)
 8003372:	f000 fa41 	bl	80037f8 <memchr>
 8003376:	9a04      	ldr	r2, [sp, #16]
 8003378:	b9d8      	cbnz	r0, 80033b2 <_svfiprintf_r+0xe6>
 800337a:	06d0      	lsls	r0, r2, #27
 800337c:	bf44      	itt	mi
 800337e:	2320      	movmi	r3, #32
 8003380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003384:	0711      	lsls	r1, r2, #28
 8003386:	bf44      	itt	mi
 8003388:	232b      	movmi	r3, #43	; 0x2b
 800338a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800338e:	f89a 3000 	ldrb.w	r3, [sl]
 8003392:	2b2a      	cmp	r3, #42	; 0x2a
 8003394:	d015      	beq.n	80033c2 <_svfiprintf_r+0xf6>
 8003396:	4654      	mov	r4, sl
 8003398:	2000      	movs	r0, #0
 800339a:	f04f 0c0a 	mov.w	ip, #10
 800339e:	9a07      	ldr	r2, [sp, #28]
 80033a0:	4621      	mov	r1, r4
 80033a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033a6:	3b30      	subs	r3, #48	; 0x30
 80033a8:	2b09      	cmp	r3, #9
 80033aa:	d94e      	bls.n	800344a <_svfiprintf_r+0x17e>
 80033ac:	b1b0      	cbz	r0, 80033dc <_svfiprintf_r+0x110>
 80033ae:	9207      	str	r2, [sp, #28]
 80033b0:	e014      	b.n	80033dc <_svfiprintf_r+0x110>
 80033b2:	eba0 0308 	sub.w	r3, r0, r8
 80033b6:	fa09 f303 	lsl.w	r3, r9, r3
 80033ba:	4313      	orrs	r3, r2
 80033bc:	46a2      	mov	sl, r4
 80033be:	9304      	str	r3, [sp, #16]
 80033c0:	e7d2      	b.n	8003368 <_svfiprintf_r+0x9c>
 80033c2:	9b03      	ldr	r3, [sp, #12]
 80033c4:	1d19      	adds	r1, r3, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	9103      	str	r1, [sp, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bfbb      	ittet	lt
 80033ce:	425b      	neglt	r3, r3
 80033d0:	f042 0202 	orrlt.w	r2, r2, #2
 80033d4:	9307      	strge	r3, [sp, #28]
 80033d6:	9307      	strlt	r3, [sp, #28]
 80033d8:	bfb8      	it	lt
 80033da:	9204      	strlt	r2, [sp, #16]
 80033dc:	7823      	ldrb	r3, [r4, #0]
 80033de:	2b2e      	cmp	r3, #46	; 0x2e
 80033e0:	d10c      	bne.n	80033fc <_svfiprintf_r+0x130>
 80033e2:	7863      	ldrb	r3, [r4, #1]
 80033e4:	2b2a      	cmp	r3, #42	; 0x2a
 80033e6:	d135      	bne.n	8003454 <_svfiprintf_r+0x188>
 80033e8:	9b03      	ldr	r3, [sp, #12]
 80033ea:	3402      	adds	r4, #2
 80033ec:	1d1a      	adds	r2, r3, #4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	9203      	str	r2, [sp, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bfb8      	it	lt
 80033f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80033fa:	9305      	str	r3, [sp, #20]
 80033fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80034c8 <_svfiprintf_r+0x1fc>
 8003400:	2203      	movs	r2, #3
 8003402:	4650      	mov	r0, sl
 8003404:	7821      	ldrb	r1, [r4, #0]
 8003406:	f000 f9f7 	bl	80037f8 <memchr>
 800340a:	b140      	cbz	r0, 800341e <_svfiprintf_r+0x152>
 800340c:	2340      	movs	r3, #64	; 0x40
 800340e:	eba0 000a 	sub.w	r0, r0, sl
 8003412:	fa03 f000 	lsl.w	r0, r3, r0
 8003416:	9b04      	ldr	r3, [sp, #16]
 8003418:	3401      	adds	r4, #1
 800341a:	4303      	orrs	r3, r0
 800341c:	9304      	str	r3, [sp, #16]
 800341e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003422:	2206      	movs	r2, #6
 8003424:	4825      	ldr	r0, [pc, #148]	; (80034bc <_svfiprintf_r+0x1f0>)
 8003426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800342a:	f000 f9e5 	bl	80037f8 <memchr>
 800342e:	2800      	cmp	r0, #0
 8003430:	d038      	beq.n	80034a4 <_svfiprintf_r+0x1d8>
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <_svfiprintf_r+0x1f4>)
 8003434:	bb1b      	cbnz	r3, 800347e <_svfiprintf_r+0x1b2>
 8003436:	9b03      	ldr	r3, [sp, #12]
 8003438:	3307      	adds	r3, #7
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	3308      	adds	r3, #8
 8003440:	9303      	str	r3, [sp, #12]
 8003442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003444:	4433      	add	r3, r6
 8003446:	9309      	str	r3, [sp, #36]	; 0x24
 8003448:	e767      	b.n	800331a <_svfiprintf_r+0x4e>
 800344a:	460c      	mov	r4, r1
 800344c:	2001      	movs	r0, #1
 800344e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003452:	e7a5      	b.n	80033a0 <_svfiprintf_r+0xd4>
 8003454:	2300      	movs	r3, #0
 8003456:	f04f 0c0a 	mov.w	ip, #10
 800345a:	4619      	mov	r1, r3
 800345c:	3401      	adds	r4, #1
 800345e:	9305      	str	r3, [sp, #20]
 8003460:	4620      	mov	r0, r4
 8003462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003466:	3a30      	subs	r2, #48	; 0x30
 8003468:	2a09      	cmp	r2, #9
 800346a:	d903      	bls.n	8003474 <_svfiprintf_r+0x1a8>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0c5      	beq.n	80033fc <_svfiprintf_r+0x130>
 8003470:	9105      	str	r1, [sp, #20]
 8003472:	e7c3      	b.n	80033fc <_svfiprintf_r+0x130>
 8003474:	4604      	mov	r4, r0
 8003476:	2301      	movs	r3, #1
 8003478:	fb0c 2101 	mla	r1, ip, r1, r2
 800347c:	e7f0      	b.n	8003460 <_svfiprintf_r+0x194>
 800347e:	ab03      	add	r3, sp, #12
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	462a      	mov	r2, r5
 8003484:	4638      	mov	r0, r7
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <_svfiprintf_r+0x1f8>)
 8003488:	a904      	add	r1, sp, #16
 800348a:	f3af 8000 	nop.w
 800348e:	1c42      	adds	r2, r0, #1
 8003490:	4606      	mov	r6, r0
 8003492:	d1d6      	bne.n	8003442 <_svfiprintf_r+0x176>
 8003494:	89ab      	ldrh	r3, [r5, #12]
 8003496:	065b      	lsls	r3, r3, #25
 8003498:	f53f af2c 	bmi.w	80032f4 <_svfiprintf_r+0x28>
 800349c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800349e:	b01d      	add	sp, #116	; 0x74
 80034a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a4:	ab03      	add	r3, sp, #12
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	462a      	mov	r2, r5
 80034aa:	4638      	mov	r0, r7
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <_svfiprintf_r+0x1f8>)
 80034ae:	a904      	add	r1, sp, #16
 80034b0:	f000 f87c 	bl	80035ac <_printf_i>
 80034b4:	e7eb      	b.n	800348e <_svfiprintf_r+0x1c2>
 80034b6:	bf00      	nop
 80034b8:	08003b8a 	.word	0x08003b8a
 80034bc:	08003b94 	.word	0x08003b94
 80034c0:	00000000 	.word	0x00000000
 80034c4:	08003215 	.word	0x08003215
 80034c8:	08003b90 	.word	0x08003b90

080034cc <_printf_common>:
 80034cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	4616      	mov	r6, r2
 80034d2:	4699      	mov	r9, r3
 80034d4:	688a      	ldr	r2, [r1, #8]
 80034d6:	690b      	ldr	r3, [r1, #16]
 80034d8:	4607      	mov	r7, r0
 80034da:	4293      	cmp	r3, r2
 80034dc:	bfb8      	it	lt
 80034de:	4613      	movlt	r3, r2
 80034e0:	6033      	str	r3, [r6, #0]
 80034e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034e6:	460c      	mov	r4, r1
 80034e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034ec:	b10a      	cbz	r2, 80034f2 <_printf_common+0x26>
 80034ee:	3301      	adds	r3, #1
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	0699      	lsls	r1, r3, #26
 80034f6:	bf42      	ittt	mi
 80034f8:	6833      	ldrmi	r3, [r6, #0]
 80034fa:	3302      	addmi	r3, #2
 80034fc:	6033      	strmi	r3, [r6, #0]
 80034fe:	6825      	ldr	r5, [r4, #0]
 8003500:	f015 0506 	ands.w	r5, r5, #6
 8003504:	d106      	bne.n	8003514 <_printf_common+0x48>
 8003506:	f104 0a19 	add.w	sl, r4, #25
 800350a:	68e3      	ldr	r3, [r4, #12]
 800350c:	6832      	ldr	r2, [r6, #0]
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	42ab      	cmp	r3, r5
 8003512:	dc28      	bgt.n	8003566 <_printf_common+0x9a>
 8003514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003518:	1e13      	subs	r3, r2, #0
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	bf18      	it	ne
 800351e:	2301      	movne	r3, #1
 8003520:	0692      	lsls	r2, r2, #26
 8003522:	d42d      	bmi.n	8003580 <_printf_common+0xb4>
 8003524:	4649      	mov	r1, r9
 8003526:	4638      	mov	r0, r7
 8003528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800352c:	47c0      	blx	r8
 800352e:	3001      	adds	r0, #1
 8003530:	d020      	beq.n	8003574 <_printf_common+0xa8>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	68e5      	ldr	r5, [r4, #12]
 8003536:	f003 0306 	and.w	r3, r3, #6
 800353a:	2b04      	cmp	r3, #4
 800353c:	bf18      	it	ne
 800353e:	2500      	movne	r5, #0
 8003540:	6832      	ldr	r2, [r6, #0]
 8003542:	f04f 0600 	mov.w	r6, #0
 8003546:	68a3      	ldr	r3, [r4, #8]
 8003548:	bf08      	it	eq
 800354a:	1aad      	subeq	r5, r5, r2
 800354c:	6922      	ldr	r2, [r4, #16]
 800354e:	bf08      	it	eq
 8003550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003554:	4293      	cmp	r3, r2
 8003556:	bfc4      	itt	gt
 8003558:	1a9b      	subgt	r3, r3, r2
 800355a:	18ed      	addgt	r5, r5, r3
 800355c:	341a      	adds	r4, #26
 800355e:	42b5      	cmp	r5, r6
 8003560:	d11a      	bne.n	8003598 <_printf_common+0xcc>
 8003562:	2000      	movs	r0, #0
 8003564:	e008      	b.n	8003578 <_printf_common+0xac>
 8003566:	2301      	movs	r3, #1
 8003568:	4652      	mov	r2, sl
 800356a:	4649      	mov	r1, r9
 800356c:	4638      	mov	r0, r7
 800356e:	47c0      	blx	r8
 8003570:	3001      	adds	r0, #1
 8003572:	d103      	bne.n	800357c <_printf_common+0xb0>
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357c:	3501      	adds	r5, #1
 800357e:	e7c4      	b.n	800350a <_printf_common+0x3e>
 8003580:	2030      	movs	r0, #48	; 0x30
 8003582:	18e1      	adds	r1, r4, r3
 8003584:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800358e:	4422      	add	r2, r4
 8003590:	3302      	adds	r3, #2
 8003592:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003596:	e7c5      	b.n	8003524 <_printf_common+0x58>
 8003598:	2301      	movs	r3, #1
 800359a:	4622      	mov	r2, r4
 800359c:	4649      	mov	r1, r9
 800359e:	4638      	mov	r0, r7
 80035a0:	47c0      	blx	r8
 80035a2:	3001      	adds	r0, #1
 80035a4:	d0e6      	beq.n	8003574 <_printf_common+0xa8>
 80035a6:	3601      	adds	r6, #1
 80035a8:	e7d9      	b.n	800355e <_printf_common+0x92>
	...

080035ac <_printf_i>:
 80035ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035b0:	460c      	mov	r4, r1
 80035b2:	7e27      	ldrb	r7, [r4, #24]
 80035b4:	4691      	mov	r9, r2
 80035b6:	2f78      	cmp	r7, #120	; 0x78
 80035b8:	4680      	mov	r8, r0
 80035ba:	469a      	mov	sl, r3
 80035bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80035be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c2:	d807      	bhi.n	80035d4 <_printf_i+0x28>
 80035c4:	2f62      	cmp	r7, #98	; 0x62
 80035c6:	d80a      	bhi.n	80035de <_printf_i+0x32>
 80035c8:	2f00      	cmp	r7, #0
 80035ca:	f000 80d9 	beq.w	8003780 <_printf_i+0x1d4>
 80035ce:	2f58      	cmp	r7, #88	; 0x58
 80035d0:	f000 80a4 	beq.w	800371c <_printf_i+0x170>
 80035d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035dc:	e03a      	b.n	8003654 <_printf_i+0xa8>
 80035de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035e2:	2b15      	cmp	r3, #21
 80035e4:	d8f6      	bhi.n	80035d4 <_printf_i+0x28>
 80035e6:	a001      	add	r0, pc, #4	; (adr r0, 80035ec <_printf_i+0x40>)
 80035e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80035ec:	08003645 	.word	0x08003645
 80035f0:	08003659 	.word	0x08003659
 80035f4:	080035d5 	.word	0x080035d5
 80035f8:	080035d5 	.word	0x080035d5
 80035fc:	080035d5 	.word	0x080035d5
 8003600:	080035d5 	.word	0x080035d5
 8003604:	08003659 	.word	0x08003659
 8003608:	080035d5 	.word	0x080035d5
 800360c:	080035d5 	.word	0x080035d5
 8003610:	080035d5 	.word	0x080035d5
 8003614:	080035d5 	.word	0x080035d5
 8003618:	08003767 	.word	0x08003767
 800361c:	08003689 	.word	0x08003689
 8003620:	08003749 	.word	0x08003749
 8003624:	080035d5 	.word	0x080035d5
 8003628:	080035d5 	.word	0x080035d5
 800362c:	08003789 	.word	0x08003789
 8003630:	080035d5 	.word	0x080035d5
 8003634:	08003689 	.word	0x08003689
 8003638:	080035d5 	.word	0x080035d5
 800363c:	080035d5 	.word	0x080035d5
 8003640:	08003751 	.word	0x08003751
 8003644:	680b      	ldr	r3, [r1, #0]
 8003646:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800364a:	1d1a      	adds	r2, r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	600a      	str	r2, [r1, #0]
 8003650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003654:	2301      	movs	r3, #1
 8003656:	e0a4      	b.n	80037a2 <_printf_i+0x1f6>
 8003658:	6825      	ldr	r5, [r4, #0]
 800365a:	6808      	ldr	r0, [r1, #0]
 800365c:	062e      	lsls	r6, r5, #24
 800365e:	f100 0304 	add.w	r3, r0, #4
 8003662:	d50a      	bpl.n	800367a <_printf_i+0xce>
 8003664:	6805      	ldr	r5, [r0, #0]
 8003666:	600b      	str	r3, [r1, #0]
 8003668:	2d00      	cmp	r5, #0
 800366a:	da03      	bge.n	8003674 <_printf_i+0xc8>
 800366c:	232d      	movs	r3, #45	; 0x2d
 800366e:	426d      	negs	r5, r5
 8003670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003674:	230a      	movs	r3, #10
 8003676:	485e      	ldr	r0, [pc, #376]	; (80037f0 <_printf_i+0x244>)
 8003678:	e019      	b.n	80036ae <_printf_i+0x102>
 800367a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800367e:	6805      	ldr	r5, [r0, #0]
 8003680:	600b      	str	r3, [r1, #0]
 8003682:	bf18      	it	ne
 8003684:	b22d      	sxthne	r5, r5
 8003686:	e7ef      	b.n	8003668 <_printf_i+0xbc>
 8003688:	680b      	ldr	r3, [r1, #0]
 800368a:	6825      	ldr	r5, [r4, #0]
 800368c:	1d18      	adds	r0, r3, #4
 800368e:	6008      	str	r0, [r1, #0]
 8003690:	0628      	lsls	r0, r5, #24
 8003692:	d501      	bpl.n	8003698 <_printf_i+0xec>
 8003694:	681d      	ldr	r5, [r3, #0]
 8003696:	e002      	b.n	800369e <_printf_i+0xf2>
 8003698:	0669      	lsls	r1, r5, #25
 800369a:	d5fb      	bpl.n	8003694 <_printf_i+0xe8>
 800369c:	881d      	ldrh	r5, [r3, #0]
 800369e:	2f6f      	cmp	r7, #111	; 0x6f
 80036a0:	bf0c      	ite	eq
 80036a2:	2308      	moveq	r3, #8
 80036a4:	230a      	movne	r3, #10
 80036a6:	4852      	ldr	r0, [pc, #328]	; (80037f0 <_printf_i+0x244>)
 80036a8:	2100      	movs	r1, #0
 80036aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036ae:	6866      	ldr	r6, [r4, #4]
 80036b0:	2e00      	cmp	r6, #0
 80036b2:	bfa8      	it	ge
 80036b4:	6821      	ldrge	r1, [r4, #0]
 80036b6:	60a6      	str	r6, [r4, #8]
 80036b8:	bfa4      	itt	ge
 80036ba:	f021 0104 	bicge.w	r1, r1, #4
 80036be:	6021      	strge	r1, [r4, #0]
 80036c0:	b90d      	cbnz	r5, 80036c6 <_printf_i+0x11a>
 80036c2:	2e00      	cmp	r6, #0
 80036c4:	d04d      	beq.n	8003762 <_printf_i+0x1b6>
 80036c6:	4616      	mov	r6, r2
 80036c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80036cc:	fb03 5711 	mls	r7, r3, r1, r5
 80036d0:	5dc7      	ldrb	r7, [r0, r7]
 80036d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036d6:	462f      	mov	r7, r5
 80036d8:	42bb      	cmp	r3, r7
 80036da:	460d      	mov	r5, r1
 80036dc:	d9f4      	bls.n	80036c8 <_printf_i+0x11c>
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d10b      	bne.n	80036fa <_printf_i+0x14e>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	07df      	lsls	r7, r3, #31
 80036e6:	d508      	bpl.n	80036fa <_printf_i+0x14e>
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	6861      	ldr	r1, [r4, #4]
 80036ec:	4299      	cmp	r1, r3
 80036ee:	bfde      	ittt	le
 80036f0:	2330      	movle	r3, #48	; 0x30
 80036f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036fa:	1b92      	subs	r2, r2, r6
 80036fc:	6122      	str	r2, [r4, #16]
 80036fe:	464b      	mov	r3, r9
 8003700:	4621      	mov	r1, r4
 8003702:	4640      	mov	r0, r8
 8003704:	f8cd a000 	str.w	sl, [sp]
 8003708:	aa03      	add	r2, sp, #12
 800370a:	f7ff fedf 	bl	80034cc <_printf_common>
 800370e:	3001      	adds	r0, #1
 8003710:	d14c      	bne.n	80037ac <_printf_i+0x200>
 8003712:	f04f 30ff 	mov.w	r0, #4294967295
 8003716:	b004      	add	sp, #16
 8003718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371c:	4834      	ldr	r0, [pc, #208]	; (80037f0 <_printf_i+0x244>)
 800371e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003722:	680e      	ldr	r6, [r1, #0]
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	f856 5b04 	ldr.w	r5, [r6], #4
 800372a:	061f      	lsls	r7, r3, #24
 800372c:	600e      	str	r6, [r1, #0]
 800372e:	d514      	bpl.n	800375a <_printf_i+0x1ae>
 8003730:	07d9      	lsls	r1, r3, #31
 8003732:	bf44      	itt	mi
 8003734:	f043 0320 	orrmi.w	r3, r3, #32
 8003738:	6023      	strmi	r3, [r4, #0]
 800373a:	b91d      	cbnz	r5, 8003744 <_printf_i+0x198>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	f023 0320 	bic.w	r3, r3, #32
 8003742:	6023      	str	r3, [r4, #0]
 8003744:	2310      	movs	r3, #16
 8003746:	e7af      	b.n	80036a8 <_printf_i+0xfc>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	f043 0320 	orr.w	r3, r3, #32
 800374e:	6023      	str	r3, [r4, #0]
 8003750:	2378      	movs	r3, #120	; 0x78
 8003752:	4828      	ldr	r0, [pc, #160]	; (80037f4 <_printf_i+0x248>)
 8003754:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003758:	e7e3      	b.n	8003722 <_printf_i+0x176>
 800375a:	065e      	lsls	r6, r3, #25
 800375c:	bf48      	it	mi
 800375e:	b2ad      	uxthmi	r5, r5
 8003760:	e7e6      	b.n	8003730 <_printf_i+0x184>
 8003762:	4616      	mov	r6, r2
 8003764:	e7bb      	b.n	80036de <_printf_i+0x132>
 8003766:	680b      	ldr	r3, [r1, #0]
 8003768:	6826      	ldr	r6, [r4, #0]
 800376a:	1d1d      	adds	r5, r3, #4
 800376c:	6960      	ldr	r0, [r4, #20]
 800376e:	600d      	str	r5, [r1, #0]
 8003770:	0635      	lsls	r5, r6, #24
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	d501      	bpl.n	800377a <_printf_i+0x1ce>
 8003776:	6018      	str	r0, [r3, #0]
 8003778:	e002      	b.n	8003780 <_printf_i+0x1d4>
 800377a:	0671      	lsls	r1, r6, #25
 800377c:	d5fb      	bpl.n	8003776 <_printf_i+0x1ca>
 800377e:	8018      	strh	r0, [r3, #0]
 8003780:	2300      	movs	r3, #0
 8003782:	4616      	mov	r6, r2
 8003784:	6123      	str	r3, [r4, #16]
 8003786:	e7ba      	b.n	80036fe <_printf_i+0x152>
 8003788:	680b      	ldr	r3, [r1, #0]
 800378a:	1d1a      	adds	r2, r3, #4
 800378c:	600a      	str	r2, [r1, #0]
 800378e:	681e      	ldr	r6, [r3, #0]
 8003790:	2100      	movs	r1, #0
 8003792:	4630      	mov	r0, r6
 8003794:	6862      	ldr	r2, [r4, #4]
 8003796:	f000 f82f 	bl	80037f8 <memchr>
 800379a:	b108      	cbz	r0, 80037a0 <_printf_i+0x1f4>
 800379c:	1b80      	subs	r0, r0, r6
 800379e:	6060      	str	r0, [r4, #4]
 80037a0:	6863      	ldr	r3, [r4, #4]
 80037a2:	6123      	str	r3, [r4, #16]
 80037a4:	2300      	movs	r3, #0
 80037a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037aa:	e7a8      	b.n	80036fe <_printf_i+0x152>
 80037ac:	4632      	mov	r2, r6
 80037ae:	4649      	mov	r1, r9
 80037b0:	4640      	mov	r0, r8
 80037b2:	6923      	ldr	r3, [r4, #16]
 80037b4:	47d0      	blx	sl
 80037b6:	3001      	adds	r0, #1
 80037b8:	d0ab      	beq.n	8003712 <_printf_i+0x166>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	079b      	lsls	r3, r3, #30
 80037be:	d413      	bmi.n	80037e8 <_printf_i+0x23c>
 80037c0:	68e0      	ldr	r0, [r4, #12]
 80037c2:	9b03      	ldr	r3, [sp, #12]
 80037c4:	4298      	cmp	r0, r3
 80037c6:	bfb8      	it	lt
 80037c8:	4618      	movlt	r0, r3
 80037ca:	e7a4      	b.n	8003716 <_printf_i+0x16a>
 80037cc:	2301      	movs	r3, #1
 80037ce:	4632      	mov	r2, r6
 80037d0:	4649      	mov	r1, r9
 80037d2:	4640      	mov	r0, r8
 80037d4:	47d0      	blx	sl
 80037d6:	3001      	adds	r0, #1
 80037d8:	d09b      	beq.n	8003712 <_printf_i+0x166>
 80037da:	3501      	adds	r5, #1
 80037dc:	68e3      	ldr	r3, [r4, #12]
 80037de:	9903      	ldr	r1, [sp, #12]
 80037e0:	1a5b      	subs	r3, r3, r1
 80037e2:	42ab      	cmp	r3, r5
 80037e4:	dcf2      	bgt.n	80037cc <_printf_i+0x220>
 80037e6:	e7eb      	b.n	80037c0 <_printf_i+0x214>
 80037e8:	2500      	movs	r5, #0
 80037ea:	f104 0619 	add.w	r6, r4, #25
 80037ee:	e7f5      	b.n	80037dc <_printf_i+0x230>
 80037f0:	08003b9b 	.word	0x08003b9b
 80037f4:	08003bac 	.word	0x08003bac

080037f8 <memchr>:
 80037f8:	4603      	mov	r3, r0
 80037fa:	b510      	push	{r4, lr}
 80037fc:	b2c9      	uxtb	r1, r1
 80037fe:	4402      	add	r2, r0
 8003800:	4293      	cmp	r3, r2
 8003802:	4618      	mov	r0, r3
 8003804:	d101      	bne.n	800380a <memchr+0x12>
 8003806:	2000      	movs	r0, #0
 8003808:	e003      	b.n	8003812 <memchr+0x1a>
 800380a:	7804      	ldrb	r4, [r0, #0]
 800380c:	3301      	adds	r3, #1
 800380e:	428c      	cmp	r4, r1
 8003810:	d1f6      	bne.n	8003800 <memchr+0x8>
 8003812:	bd10      	pop	{r4, pc}

08003814 <memcpy>:
 8003814:	440a      	add	r2, r1
 8003816:	4291      	cmp	r1, r2
 8003818:	f100 33ff 	add.w	r3, r0, #4294967295
 800381c:	d100      	bne.n	8003820 <memcpy+0xc>
 800381e:	4770      	bx	lr
 8003820:	b510      	push	{r4, lr}
 8003822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003826:	4291      	cmp	r1, r2
 8003828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800382c:	d1f9      	bne.n	8003822 <memcpy+0xe>
 800382e:	bd10      	pop	{r4, pc}

08003830 <memmove>:
 8003830:	4288      	cmp	r0, r1
 8003832:	b510      	push	{r4, lr}
 8003834:	eb01 0402 	add.w	r4, r1, r2
 8003838:	d902      	bls.n	8003840 <memmove+0x10>
 800383a:	4284      	cmp	r4, r0
 800383c:	4623      	mov	r3, r4
 800383e:	d807      	bhi.n	8003850 <memmove+0x20>
 8003840:	1e43      	subs	r3, r0, #1
 8003842:	42a1      	cmp	r1, r4
 8003844:	d008      	beq.n	8003858 <memmove+0x28>
 8003846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800384a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800384e:	e7f8      	b.n	8003842 <memmove+0x12>
 8003850:	4601      	mov	r1, r0
 8003852:	4402      	add	r2, r0
 8003854:	428a      	cmp	r2, r1
 8003856:	d100      	bne.n	800385a <memmove+0x2a>
 8003858:	bd10      	pop	{r4, pc}
 800385a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800385e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003862:	e7f7      	b.n	8003854 <memmove+0x24>

08003864 <_free_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4605      	mov	r5, r0
 8003868:	2900      	cmp	r1, #0
 800386a:	d043      	beq.n	80038f4 <_free_r+0x90>
 800386c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003870:	1f0c      	subs	r4, r1, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	bfb8      	it	lt
 8003876:	18e4      	addlt	r4, r4, r3
 8003878:	f000 f8d0 	bl	8003a1c <__malloc_lock>
 800387c:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <_free_r+0x94>)
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	4610      	mov	r0, r2
 8003882:	b933      	cbnz	r3, 8003892 <_free_r+0x2e>
 8003884:	6063      	str	r3, [r4, #4]
 8003886:	6014      	str	r4, [r2, #0]
 8003888:	4628      	mov	r0, r5
 800388a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800388e:	f000 b8cb 	b.w	8003a28 <__malloc_unlock>
 8003892:	42a3      	cmp	r3, r4
 8003894:	d90a      	bls.n	80038ac <_free_r+0x48>
 8003896:	6821      	ldr	r1, [r4, #0]
 8003898:	1862      	adds	r2, r4, r1
 800389a:	4293      	cmp	r3, r2
 800389c:	bf01      	itttt	eq
 800389e:	681a      	ldreq	r2, [r3, #0]
 80038a0:	685b      	ldreq	r3, [r3, #4]
 80038a2:	1852      	addeq	r2, r2, r1
 80038a4:	6022      	streq	r2, [r4, #0]
 80038a6:	6063      	str	r3, [r4, #4]
 80038a8:	6004      	str	r4, [r0, #0]
 80038aa:	e7ed      	b.n	8003888 <_free_r+0x24>
 80038ac:	461a      	mov	r2, r3
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	b10b      	cbz	r3, 80038b6 <_free_r+0x52>
 80038b2:	42a3      	cmp	r3, r4
 80038b4:	d9fa      	bls.n	80038ac <_free_r+0x48>
 80038b6:	6811      	ldr	r1, [r2, #0]
 80038b8:	1850      	adds	r0, r2, r1
 80038ba:	42a0      	cmp	r0, r4
 80038bc:	d10b      	bne.n	80038d6 <_free_r+0x72>
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	4401      	add	r1, r0
 80038c2:	1850      	adds	r0, r2, r1
 80038c4:	4283      	cmp	r3, r0
 80038c6:	6011      	str	r1, [r2, #0]
 80038c8:	d1de      	bne.n	8003888 <_free_r+0x24>
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4401      	add	r1, r0
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	6053      	str	r3, [r2, #4]
 80038d4:	e7d8      	b.n	8003888 <_free_r+0x24>
 80038d6:	d902      	bls.n	80038de <_free_r+0x7a>
 80038d8:	230c      	movs	r3, #12
 80038da:	602b      	str	r3, [r5, #0]
 80038dc:	e7d4      	b.n	8003888 <_free_r+0x24>
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	1821      	adds	r1, r4, r0
 80038e2:	428b      	cmp	r3, r1
 80038e4:	bf01      	itttt	eq
 80038e6:	6819      	ldreq	r1, [r3, #0]
 80038e8:	685b      	ldreq	r3, [r3, #4]
 80038ea:	1809      	addeq	r1, r1, r0
 80038ec:	6021      	streq	r1, [r4, #0]
 80038ee:	6063      	str	r3, [r4, #4]
 80038f0:	6054      	str	r4, [r2, #4]
 80038f2:	e7c9      	b.n	8003888 <_free_r+0x24>
 80038f4:	bd38      	pop	{r3, r4, r5, pc}
 80038f6:	bf00      	nop
 80038f8:	20000104 	.word	0x20000104

080038fc <_malloc_r>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	1ccd      	adds	r5, r1, #3
 8003900:	f025 0503 	bic.w	r5, r5, #3
 8003904:	3508      	adds	r5, #8
 8003906:	2d0c      	cmp	r5, #12
 8003908:	bf38      	it	cc
 800390a:	250c      	movcc	r5, #12
 800390c:	2d00      	cmp	r5, #0
 800390e:	4606      	mov	r6, r0
 8003910:	db01      	blt.n	8003916 <_malloc_r+0x1a>
 8003912:	42a9      	cmp	r1, r5
 8003914:	d903      	bls.n	800391e <_malloc_r+0x22>
 8003916:	230c      	movs	r3, #12
 8003918:	6033      	str	r3, [r6, #0]
 800391a:	2000      	movs	r0, #0
 800391c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800391e:	f000 f87d 	bl	8003a1c <__malloc_lock>
 8003922:	4921      	ldr	r1, [pc, #132]	; (80039a8 <_malloc_r+0xac>)
 8003924:	680a      	ldr	r2, [r1, #0]
 8003926:	4614      	mov	r4, r2
 8003928:	b99c      	cbnz	r4, 8003952 <_malloc_r+0x56>
 800392a:	4f20      	ldr	r7, [pc, #128]	; (80039ac <_malloc_r+0xb0>)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b923      	cbnz	r3, 800393a <_malloc_r+0x3e>
 8003930:	4621      	mov	r1, r4
 8003932:	4630      	mov	r0, r6
 8003934:	f000 f862 	bl	80039fc <_sbrk_r>
 8003938:	6038      	str	r0, [r7, #0]
 800393a:	4629      	mov	r1, r5
 800393c:	4630      	mov	r0, r6
 800393e:	f000 f85d 	bl	80039fc <_sbrk_r>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	d123      	bne.n	800398e <_malloc_r+0x92>
 8003946:	230c      	movs	r3, #12
 8003948:	4630      	mov	r0, r6
 800394a:	6033      	str	r3, [r6, #0]
 800394c:	f000 f86c 	bl	8003a28 <__malloc_unlock>
 8003950:	e7e3      	b.n	800391a <_malloc_r+0x1e>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	1b5b      	subs	r3, r3, r5
 8003956:	d417      	bmi.n	8003988 <_malloc_r+0x8c>
 8003958:	2b0b      	cmp	r3, #11
 800395a:	d903      	bls.n	8003964 <_malloc_r+0x68>
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	441c      	add	r4, r3
 8003960:	6025      	str	r5, [r4, #0]
 8003962:	e004      	b.n	800396e <_malloc_r+0x72>
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	42a2      	cmp	r2, r4
 8003968:	bf0c      	ite	eq
 800396a:	600b      	streq	r3, [r1, #0]
 800396c:	6053      	strne	r3, [r2, #4]
 800396e:	4630      	mov	r0, r6
 8003970:	f000 f85a 	bl	8003a28 <__malloc_unlock>
 8003974:	f104 000b 	add.w	r0, r4, #11
 8003978:	1d23      	adds	r3, r4, #4
 800397a:	f020 0007 	bic.w	r0, r0, #7
 800397e:	1ac2      	subs	r2, r0, r3
 8003980:	d0cc      	beq.n	800391c <_malloc_r+0x20>
 8003982:	1a1b      	subs	r3, r3, r0
 8003984:	50a3      	str	r3, [r4, r2]
 8003986:	e7c9      	b.n	800391c <_malloc_r+0x20>
 8003988:	4622      	mov	r2, r4
 800398a:	6864      	ldr	r4, [r4, #4]
 800398c:	e7cc      	b.n	8003928 <_malloc_r+0x2c>
 800398e:	1cc4      	adds	r4, r0, #3
 8003990:	f024 0403 	bic.w	r4, r4, #3
 8003994:	42a0      	cmp	r0, r4
 8003996:	d0e3      	beq.n	8003960 <_malloc_r+0x64>
 8003998:	1a21      	subs	r1, r4, r0
 800399a:	4630      	mov	r0, r6
 800399c:	f000 f82e 	bl	80039fc <_sbrk_r>
 80039a0:	3001      	adds	r0, #1
 80039a2:	d1dd      	bne.n	8003960 <_malloc_r+0x64>
 80039a4:	e7cf      	b.n	8003946 <_malloc_r+0x4a>
 80039a6:	bf00      	nop
 80039a8:	20000104 	.word	0x20000104
 80039ac:	20000108 	.word	0x20000108

080039b0 <_realloc_r>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	4607      	mov	r7, r0
 80039b4:	4614      	mov	r4, r2
 80039b6:	460e      	mov	r6, r1
 80039b8:	b921      	cbnz	r1, 80039c4 <_realloc_r+0x14>
 80039ba:	4611      	mov	r1, r2
 80039bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039c0:	f7ff bf9c 	b.w	80038fc <_malloc_r>
 80039c4:	b922      	cbnz	r2, 80039d0 <_realloc_r+0x20>
 80039c6:	f7ff ff4d 	bl	8003864 <_free_r>
 80039ca:	4625      	mov	r5, r4
 80039cc:	4628      	mov	r0, r5
 80039ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d0:	f000 f830 	bl	8003a34 <_malloc_usable_size_r>
 80039d4:	42a0      	cmp	r0, r4
 80039d6:	d20f      	bcs.n	80039f8 <_realloc_r+0x48>
 80039d8:	4621      	mov	r1, r4
 80039da:	4638      	mov	r0, r7
 80039dc:	f7ff ff8e 	bl	80038fc <_malloc_r>
 80039e0:	4605      	mov	r5, r0
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d0f2      	beq.n	80039cc <_realloc_r+0x1c>
 80039e6:	4631      	mov	r1, r6
 80039e8:	4622      	mov	r2, r4
 80039ea:	f7ff ff13 	bl	8003814 <memcpy>
 80039ee:	4631      	mov	r1, r6
 80039f0:	4638      	mov	r0, r7
 80039f2:	f7ff ff37 	bl	8003864 <_free_r>
 80039f6:	e7e9      	b.n	80039cc <_realloc_r+0x1c>
 80039f8:	4635      	mov	r5, r6
 80039fa:	e7e7      	b.n	80039cc <_realloc_r+0x1c>

080039fc <_sbrk_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	2300      	movs	r3, #0
 8003a00:	4d05      	ldr	r5, [pc, #20]	; (8003a18 <_sbrk_r+0x1c>)
 8003a02:	4604      	mov	r4, r0
 8003a04:	4608      	mov	r0, r1
 8003a06:	602b      	str	r3, [r5, #0]
 8003a08:	f7fd fc76 	bl	80012f8 <_sbrk>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d102      	bne.n	8003a16 <_sbrk_r+0x1a>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	b103      	cbz	r3, 8003a16 <_sbrk_r+0x1a>
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	200003b8 	.word	0x200003b8

08003a1c <__malloc_lock>:
 8003a1c:	4801      	ldr	r0, [pc, #4]	; (8003a24 <__malloc_lock+0x8>)
 8003a1e:	f000 b811 	b.w	8003a44 <__retarget_lock_acquire_recursive>
 8003a22:	bf00      	nop
 8003a24:	200003c0 	.word	0x200003c0

08003a28 <__malloc_unlock>:
 8003a28:	4801      	ldr	r0, [pc, #4]	; (8003a30 <__malloc_unlock+0x8>)
 8003a2a:	f000 b80c 	b.w	8003a46 <__retarget_lock_release_recursive>
 8003a2e:	bf00      	nop
 8003a30:	200003c0 	.word	0x200003c0

08003a34 <_malloc_usable_size_r>:
 8003a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a38:	1f18      	subs	r0, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfbc      	itt	lt
 8003a3e:	580b      	ldrlt	r3, [r1, r0]
 8003a40:	18c0      	addlt	r0, r0, r3
 8003a42:	4770      	bx	lr

08003a44 <__retarget_lock_acquire_recursive>:
 8003a44:	4770      	bx	lr

08003a46 <__retarget_lock_release_recursive>:
 8003a46:	4770      	bx	lr

08003a48 <_init>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr

08003a54 <_fini>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr
