
ADCS_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b148  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  0800b258  0800b258  0001b258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be90  0800be90  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800be90  0800be90  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be90  0800be90  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be90  0800be90  0001be90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be94  0800be94  0001be94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800be98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000208  0800c09c  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800c09c  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011486  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002844  00000000  00000000  000316b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00033ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  00034980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019306  00000000  00000000  00035308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d72b  00000000  00000000  0004e60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c3a  00000000  00000000  0005bd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2973  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004258  00000000  00000000  000e29c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b240 	.word	0x0800b240

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800b240 	.word	0x0800b240

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <EKF_Init>:

#include "EKF.h"



void EKF_Init(EKF *ekf, float P[2], float Q[2], float R[3]) {
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]

	/* Reset state estimates */
	ekf->phi_r = 0.0f;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
	ekf->theta_r = 0.0f;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	605a      	str	r2, [r3, #4]

	/* Initialise state covariance matrix */
	ekf->P[0][0] = P[0];
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	609a      	str	r2, [r3, #8]
	ekf->P[0][1] = 0.0f;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
	ekf->P[1][0] = 0.0f;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
	ekf->P[1][1] = P[1];
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	615a      	str	r2, [r3, #20]

	/* Set process and measurement noise */
	ekf->Q[0] = Q[0];
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	619a      	str	r2, [r3, #24]
	ekf->Q[1] = Q[1];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	61da      	str	r2, [r3, #28]

	ekf->R[0] = R[0];
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	621a      	str	r2, [r3, #32]
	ekf->R[1] = R[1];
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
	ekf->R[2] = R[2];
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28

}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <EKF_Predict>:

void EKF_Predict(EKF *ekf, float p_rps, float q_rps, float r_rps,
		float sampleTime_s) {
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b093      	sub	sp, #76	; 0x4c
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]

	/* Pre-compute trigonometric quantities */
	float sp = sinf(ekf->phi_r);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 fd1e 	bl	8008c0c <sinf>
 80011d0:	6478      	str	r0, [r7, #68]	; 0x44
	float cp = cosf(ekf->phi_r);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 fce0 	bl	8008b9c <cosf>
 80011dc:	6438      	str	r0, [r7, #64]	; 0x40
	float tt = tanf(ekf->theta_r);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f007 fd48 	bl	8008c78 <tanf>
 80011e8:	63f8      	str	r0, [r7, #60]	; 0x3c

	/* Compute state transition function dx/dt = f(x,u) */
	float dphidt = p_rps + tt * (q_rps * sp + r_rps * cp);
 80011ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fda9 	bl	8000d44 <__aeabi_fmul>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461c      	mov	r4, r3
 80011f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f7ff fda3 	bl	8000d44 <__aeabi_fmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	4619      	mov	r1, r3
 8001202:	4620      	mov	r0, r4
 8001204:	f7ff fc96 	bl	8000b34 <__addsf3>
 8001208:	4603      	mov	r3, r0
 800120a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fd99 	bl	8000d44 <__aeabi_fmul>
 8001212:	4603      	mov	r3, r0
 8001214:	4619      	mov	r1, r3
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff fc8c 	bl	8000b34 <__addsf3>
 800121c:	4603      	mov	r3, r0
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
	float dthetadt = q_rps * cp - r_rps * sp;
 8001220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fd8e 	bl	8000d44 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	461c      	mov	r4, r3
 800122c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f7ff fd88 	bl	8000d44 <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	4619      	mov	r1, r3
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fc79 	bl	8000b30 <__aeabi_fsub>
 800123e:	4603      	mov	r3, r0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34

	/* Update state estimates (x(n+1) = x(n) + T * dx/dt) */
	ekf->phi_r += sampleTime_s * dphidt;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681c      	ldr	r4, [r3, #0]
 8001246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001248:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800124a:	f7ff fd7b 	bl	8000d44 <__aeabi_fmul>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff fc6e 	bl	8000b34 <__addsf3>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	601a      	str	r2, [r3, #0]
	ekf->theta_r += sampleTime_s * dthetadt;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	685c      	ldr	r4, [r3, #4]
 8001264:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001266:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001268:	f7ff fd6c 	bl	8000d44 <__aeabi_fmul>
 800126c:	4603      	mov	r3, r0
 800126e:	4619      	mov	r1, r3
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fc5f 	bl	8000b34 <__addsf3>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	605a      	str	r2, [r3, #4]

	/* Re-compute trigonometric quantities */
	sp = sinf(ekf->phi_r);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f007 fcc2 	bl	8008c0c <sinf>
 8001288:	6478      	str	r0, [r7, #68]	; 0x44
	cp = cosf(ekf->phi_r);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f007 fc84 	bl	8008b9c <cosf>
 8001294:	6438      	str	r0, [r7, #64]	; 0x40
	tt = tanf(ekf->theta_r);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	f007 fcec 	bl	8008c78 <tanf>
 80012a0:	63f8      	str	r0, [r7, #60]	; 0x3c
	float ctInv = 1.0f / cosf(ekf->theta_r);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 fc78 	bl	8008b9c <cosf>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80012b4:	f7ff fdfa 	bl	8000eac <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30

	/* Compute Jacobian of state transition function A(x,u) = df(x,u)/dx */
	float A[2][2] = { { tt * (q_rps * cp - r_rps * sp),
 80012bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fd40 	bl	8000d44 <__aeabi_fmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461c      	mov	r4, r3
 80012c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f7ff fd3a 	bl	8000d44 <__aeabi_fmul>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff fc2b 	bl	8000b30 <__aeabi_fsub>
 80012da:	4603      	mov	r3, r0
 80012dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fd30 	bl	8000d44 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	623b      	str	r3, [r7, #32]
			(q_rps * sp + r_rps * cp) * ctInv * ctInv }, { -(q_rps * sp
 80012e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fd2a 	bl	8000d44 <__aeabi_fmul>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461c      	mov	r4, r3
 80012f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f7ff fd24 	bl	8000d44 <__aeabi_fmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4619      	mov	r1, r3
 8001300:	4620      	mov	r0, r4
 8001302:	f7ff fc17 	bl	8000b34 <__addsf3>
 8001306:	4603      	mov	r3, r0
 8001308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fd1a 	bl	8000d44 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd15 	bl	8000d44 <__aeabi_fmul>
 800131a:	4603      	mov	r3, r0
	float A[2][2] = { { tt * (q_rps * cp - r_rps * sp),
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
			(q_rps * sp + r_rps * cp) * ctInv * ctInv }, { -(q_rps * sp
 800131e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fd0f 	bl	8000d44 <__aeabi_fmul>
 8001326:	4603      	mov	r3, r0
 8001328:	461c      	mov	r4, r3
			+ r_rps * cp), 0.0f } };
 800132a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff fd09 	bl	8000d44 <__aeabi_fmul>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff fbfc 	bl	8000b34 <__addsf3>
 800133c:	4603      	mov	r3, r0
			(q_rps * sp + r_rps * cp) * ctInv * ctInv }, { -(q_rps * sp
 800133e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float A[2][2] = { { tt * (q_rps * cp - r_rps * sp),
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Update state covariance matrix P(n+1) = P(n) + T * (A * P(n) + P(n) * A' + Q) (note that A[1][1] = 0!) */
	float Pnew[2][2] = { { A[0][0] * ekf->P[0][0] + A[0][1] * ekf->P[1][0]
 800134a:	6a3a      	ldr	r2, [r7, #32]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f7ff fcf6 	bl	8000d44 <__aeabi_fmul>
 8001358:	4603      	mov	r3, r0
 800135a:	461c      	mov	r4, r3
 800135c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4619      	mov	r1, r3
 8001364:	4610      	mov	r0, r2
 8001366:	f7ff fced 	bl	8000d44 <__aeabi_fmul>
 800136a:	4603      	mov	r3, r0
 800136c:	4619      	mov	r1, r3
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff fbe0 	bl	8000b34 <__addsf3>
 8001374:	4603      	mov	r3, r0
 8001376:	461c      	mov	r4, r3
			+ ekf->P[0][0] * A[0][0] + ekf->P[0][1] * A[1][0] + ekf->Q[0],
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	6a3a      	ldr	r2, [r7, #32]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fcdf 	bl	8000d44 <__aeabi_fmul>
 8001386:	4603      	mov	r3, r0
 8001388:	4619      	mov	r1, r3
 800138a:	4620      	mov	r0, r4
 800138c:	f7ff fbd2 	bl	8000b34 <__addsf3>
 8001390:	4603      	mov	r3, r0
 8001392:	461c      	mov	r4, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fcd1 	bl	8000d44 <__aeabi_fmul>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4619      	mov	r1, r3
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7ff fbc4 	bl	8000b34 <__addsf3>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4610      	mov	r0, r2
 80013b8:	f7ff fbbc 	bl	8000b34 <__addsf3>
 80013bc:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf->P[0][0] + A[0][1] * ekf->P[1][0]
 80013be:	613b      	str	r3, [r7, #16]
			A[0][0] * ekf->P[0][1] + A[0][1] * ekf->P[1][1]
 80013c0:	6a3a      	ldr	r2, [r7, #32]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f7ff fcbb 	bl	8000d44 <__aeabi_fmul>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461c      	mov	r4, r3
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f7ff fcb2 	bl	8000d44 <__aeabi_fmul>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff fba5 	bl	8000b34 <__addsf3>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461c      	mov	r4, r3
					+ ekf->P[0][0] * A[0][1] }, { A[1][0] * ekf->P[0][0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fca4 	bl	8000d44 <__aeabi_fmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4619      	mov	r1, r3
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fb97 	bl	8000b34 <__addsf3>
 8001406:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf->P[0][0] + A[0][1] * ekf->P[1][0]
 8001408:	617b      	str	r3, [r7, #20]
					+ ekf->P[0][0] * A[0][1] }, { A[1][0] * ekf->P[0][0]
 800140a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4619      	mov	r1, r3
 8001412:	4610      	mov	r0, r2
 8001414:	f7ff fc96 	bl	8000d44 <__aeabi_fmul>
 8001418:	4603      	mov	r3, r0
 800141a:	461c      	mov	r4, r3
			+ ekf->P[1][0] * A[0][0] + ekf->P[1][1] * A[1][0], A[1][0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	6a3a      	ldr	r2, [r7, #32]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fc8d 	bl	8000d44 <__aeabi_fmul>
 800142a:	4603      	mov	r3, r0
 800142c:	4619      	mov	r1, r3
 800142e:	4620      	mov	r0, r4
 8001430:	f7ff fb80 	bl	8000b34 <__addsf3>
 8001434:	4603      	mov	r3, r0
 8001436:	461c      	mov	r4, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fc7f 	bl	8000d44 <__aeabi_fmul>
 8001446:	4603      	mov	r3, r0
 8001448:	4619      	mov	r1, r3
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff fb72 	bl	8000b34 <__addsf3>
 8001450:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf->P[0][0] + A[0][1] * ekf->P[1][0]
 8001452:	61bb      	str	r3, [r7, #24]
			+ ekf->P[1][0] * A[0][0] + ekf->P[1][1] * A[1][0], A[1][0]
 8001454:	6aba      	ldr	r2, [r7, #40]	; 0x28
			* ekf->P[0][1] + ekf->P[1][0] * A[0][1] + ekf->Q[1] } };
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f7ff fc71 	bl	8000d44 <__aeabi_fmul>
 8001462:	4603      	mov	r3, r0
 8001464:	461c      	mov	r4, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc68 	bl	8000d44 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff fb5b 	bl	8000b34 <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f7ff fb53 	bl	8000b34 <__addsf3>
 800148e:	4603      	mov	r3, r0
	float Pnew[2][2] = { { A[0][0] * ekf->P[0][0] + A[0][1] * ekf->P[1][0]
 8001490:	61fb      	str	r3, [r7, #28]

	ekf->P[0][0] += sampleTime_s * Pnew[0][0];
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	689c      	ldr	r4, [r3, #8]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fc52 	bl	8000d44 <__aeabi_fmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7ff fb45 	bl	8000b34 <__addsf3>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	609a      	str	r2, [r3, #8]
	ekf->P[0][1] += sampleTime_s * Pnew[0][1];
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	68dc      	ldr	r4, [r3, #12]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fc42 	bl	8000d44 <__aeabi_fmul>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4619      	mov	r1, r3
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff fb35 	bl	8000b34 <__addsf3>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	60da      	str	r2, [r3, #12]
	ekf->P[1][0] += sampleTime_s * Pnew[1][0];
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	691c      	ldr	r4, [r3, #16]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc32 	bl	8000d44 <__aeabi_fmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4619      	mov	r1, r3
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff fb25 	bl	8000b34 <__addsf3>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	611a      	str	r2, [r3, #16]
	ekf->P[1][1] += sampleTime_s * Pnew[1][1];
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	695c      	ldr	r4, [r3, #20]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fc22 	bl	8000d44 <__aeabi_fmul>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fb15 	bl	8000b34 <__addsf3>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	615a      	str	r2, [r3, #20]

}
 8001512:	bf00      	nop
 8001514:	374c      	adds	r7, #76	; 0x4c
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <EKF_Update>:

void EKF_Update(EKF *ekf, float ax_mps2, float ay_mps2, float az_mps2) {
 800151a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151c:	b0c5      	sub	sp, #276	; 0x114
 800151e:	af00      	add	r7, sp, #0
 8001520:	f107 040c 	add.w	r4, r7, #12
 8001524:	6020      	str	r0, [r4, #0]
 8001526:	f107 0008 	add.w	r0, r7, #8
 800152a:	6001      	str	r1, [r0, #0]
 800152c:	1d39      	adds	r1, r7, #4
 800152e:	600a      	str	r2, [r1, #0]
 8001530:	463a      	mov	r2, r7
 8001532:	6013      	str	r3, [r2, #0]

	/* Normalise accelerometer readings */
	float accNormFactor = 1.0f
			/ sqrtf(ax_mps2 * ax_mps2 + ay_mps2 * ay_mps2 + az_mps2 * az_mps2);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	f7ff fc02 	bl	8000d44 <__aeabi_fmul>
 8001540:	4603      	mov	r3, r0
 8001542:	461c      	mov	r4, r3
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f7ff fbfb 	bl	8000d44 <__aeabi_fmul>
 800154e:	4603      	mov	r3, r0
 8001550:	4619      	mov	r1, r3
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff faee 	bl	8000b34 <__addsf3>
 8001558:	4603      	mov	r3, r0
 800155a:	461c      	mov	r4, r3
 800155c:	463b      	mov	r3, r7
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	f7ff fbef 	bl	8000d44 <__aeabi_fmul>
 8001566:	4603      	mov	r3, r0
 8001568:	4619      	mov	r1, r3
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff fae2 	bl	8000b34 <__addsf3>
 8001570:	4603      	mov	r3, r0
 8001572:	4618      	mov	r0, r3
 8001574:	f007 fbca 	bl	8008d0c <sqrtf>
 8001578:	4603      	mov	r3, r0
	float accNormFactor = 1.0f
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001580:	f7ff fc94 	bl	8000eac <__aeabi_fdiv>
 8001584:	4603      	mov	r3, r0
 8001586:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	float ax_norm = ax_mps2 * accNormFactor;
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	f7ff fbd6 	bl	8000d44 <__aeabi_fmul>
 8001598:	4603      	mov	r3, r0
 800159a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	float ay_norm = ay_mps2 * accNormFactor;
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	f7ff fbcd 	bl	8000d44 <__aeabi_fmul>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float az_norm = az_mps2 * accNormFactor;
 80015b0:	463b      	mov	r3, r7
 80015b2:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f7ff fbc4 	bl	8000d44 <__aeabi_fmul>
 80015bc:	4603      	mov	r3, r0
 80015be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	/* Compute Jacobian of output function C(x,u) = dh(x,u)/dx */
	float sp = sinf(ekf->phi_r);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 fb1e 	bl	8008c0c <sinf>
 80015d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	float cp = cosf(ekf->phi_r);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f007 fadd 	bl	8008b9c <cosf>
 80015e2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	float st = sinf(ekf->theta_r);
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f007 fb0c 	bl	8008c0c <sinf>
 80015f4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	float ct = cosf(ekf->theta_r);
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	f007 facb 	bl	8008b9c <cosf>
 8001606:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8

	float C[3][2] =
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001612:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001616:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 800161a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800161e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001622:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fb8c 	bl	8000d44 <__aeabi_fmul>
 800162c:	4603      	mov	r3, r0
	float C[3][2] =
 800162e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001632:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001636:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800163a:	f7ff fb83 	bl	8000d44 <__aeabi_fmul>
 800163e:	4603      	mov	r3, r0
	float C[3][2] =
 8001640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001644:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001648:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800164c:	f7ff fb7a 	bl	8000d44 <__aeabi_fmul>
 8001650:	4603      	mov	r3, r0
	float C[3][2] =
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			{ { 0.0f, ct }, { -cp * ct, sp * st }, { sp * ct, cp * st } };
 8001656:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800165a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800165e:	f7ff fb71 	bl	8000d44 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
	float C[3][2] =
 8001664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	/* Compute Kalman gain K = P * C' * (R + C * P * C ')^-1 in steps (note that C[0][0] = 0!) */

	/* P * C'*/
	float PCt[2][3] = { { ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0]
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fb64 	bl	8000d44 <__aeabi_fmul>
 800167c:	4603      	mov	r3, r0
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fb57 	bl	8000d44 <__aeabi_fmul>
 8001696:	4603      	mov	r3, r0
 8001698:	461c      	mov	r4, r3
			+ ekf->P[0][1] * C[1][1], ekf->P[0][0] * C[2][0]
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fb4b 	bl	8000d44 <__aeabi_fmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff fa3e 	bl	8000b34 <__addsf3>
 80016b8:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0]
 80016ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			+ ekf->P[0][1] * C[1][1], ekf->P[0][0] * C[2][0]
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb39 	bl	8000d44 <__aeabi_fmul>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461c      	mov	r4, r3
			+ ekf->P[0][1] * C[2][1] }, { ekf->P[1][1] * C[0][1], ekf->P[1][0]
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb2d 	bl	8000d44 <__aeabi_fmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff fa20 	bl	8000b34 <__addsf3>
 80016f4:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0]
 80016f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			+ ekf->P[0][1] * C[2][1] }, { ekf->P[1][1] * C[0][1], ekf->P[1][0]
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fb1b 	bl	8000d44 <__aeabi_fmul>
 800170e:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0]
 8001710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			+ ekf->P[0][1] * C[2][1] }, { ekf->P[1][1] * C[0][1], ekf->P[1][0]
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691b      	ldr	r3, [r3, #16]
			* C[1][0] + ekf->P[1][1] * C[1][1], ekf->P[1][0] * C[2][0]
 800171c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fb0e 	bl	8000d44 <__aeabi_fmul>
 8001728:	4603      	mov	r3, r0
 800172a:	461c      	mov	r4, r3
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fb02 	bl	8000d44 <__aeabi_fmul>
 8001740:	4603      	mov	r3, r0
 8001742:	4619      	mov	r1, r3
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff f9f5 	bl	8000b34 <__addsf3>
 800174a:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0]
 800174c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			* C[1][0] + ekf->P[1][1] * C[1][1], ekf->P[1][0] * C[2][0]
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff faf0 	bl	8000d44 <__aeabi_fmul>
 8001764:	4603      	mov	r3, r0
 8001766:	461c      	mov	r4, r3
			+ ekf->P[1][1] * C[2][1] } };
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fae4 	bl	8000d44 <__aeabi_fmul>
 800177c:	4603      	mov	r3, r0
 800177e:	4619      	mov	r1, r3
 8001780:	4620      	mov	r0, r4
 8001782:	f7ff f9d7 	bl	8000b34 <__addsf3>
 8001786:	4603      	mov	r3, r0
	float PCt[2][3] = { { ekf->P[0][1] * C[0][1], ekf->P[0][0] * C[1][0]
 8001788:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	/* R + C * P * C' */
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf->R[0], C[0][1]
 800178c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001790:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fad4 	bl	8000d44 <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f7ff f9c2 	bl	8000b34 <__addsf3>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			* PCt[1][1], C[0][1] * PCt[1][2] }, { C[1][0] * PCt[0][0]
 80017ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fabf 	bl	8000d44 <__aeabi_fmul>
 80017c6:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf->R[0], C[0][1]
 80017c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			* PCt[1][1], C[0][1] * PCt[1][2] }, { C[1][0] * PCt[0][0]
 80017cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017d0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fab4 	bl	8000d44 <__aeabi_fmul>
 80017dc:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf->R[0], C[0][1]
 80017de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			* PCt[1][1], C[0][1] * PCt[1][2] }, { C[1][0] * PCt[0][0]
 80017e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff faa9 	bl	8000d44 <__aeabi_fmul>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461c      	mov	r4, r3
			+ C[1][1] * PCt[1][0], C[1][0] * PCt[0][1] + C[1][1] * PCt[1][1]
 80017f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017fa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa9f 	bl	8000d44 <__aeabi_fmul>
 8001806:	4603      	mov	r3, r0
 8001808:	4619      	mov	r1, r3
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff f992 	bl	8000b34 <__addsf3>
 8001810:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf->R[0], C[0][1]
 8001812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			+ C[1][1] * PCt[1][0], C[1][0] * PCt[0][1] + C[1][1] * PCt[1][1]
 8001816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800181a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fa8f 	bl	8000d44 <__aeabi_fmul>
 8001826:	4603      	mov	r3, r0
 8001828:	461c      	mov	r4, r3
 800182a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800182e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fa85 	bl	8000d44 <__aeabi_fmul>
 800183a:	4603      	mov	r3, r0
 800183c:	4619      	mov	r1, r3
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff f978 	bl	8000b34 <__addsf3>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
			+ ekf->R[1], C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2] }, { C[2][0]
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f7ff f96e 	bl	8000b34 <__addsf3>
 8001858:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf->R[0], C[0][1]
 800185a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			+ ekf->R[1], C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2] }, { C[2][0]
 800185e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001862:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fa6b 	bl	8000d44 <__aeabi_fmul>
 800186e:	4603      	mov	r3, r0
 8001870:	461c      	mov	r4, r3
 8001872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fa61 	bl	8000d44 <__aeabi_fmul>
 8001882:	4603      	mov	r3, r0
 8001884:	4619      	mov	r1, r3
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff f954 	bl	8000b34 <__addsf3>
 800188c:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf->R[0], C[0][1]
 800188e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			+ ekf->R[1], C[1][0] * PCt[0][2] + C[1][1] * PCt[1][2] }, { C[2][0]
 8001892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
			* PCt[0][0] + C[2][1] * PCt[1][0], C[2][0] * PCt[0][1]
 8001896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fa51 	bl	8000d44 <__aeabi_fmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461c      	mov	r4, r3
 80018a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018aa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fa47 	bl	8000d44 <__aeabi_fmul>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4619      	mov	r1, r3
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff f93a 	bl	8000b34 <__addsf3>
 80018c0:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf->R[0], C[0][1]
 80018c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			* PCt[0][0] + C[2][1] * PCt[1][0], C[2][0] * PCt[0][1]
 80018c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fa37 	bl	8000d44 <__aeabi_fmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461c      	mov	r4, r3
			+ C[2][1] * PCt[1][1], C[2][0] * PCt[0][2] + C[2][1] * PCt[1][2]
 80018da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fa2d 	bl	8000d44 <__aeabi_fmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff f920 	bl	8000b34 <__addsf3>
 80018f4:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf->R[0], C[0][1]
 80018f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			+ C[2][1] * PCt[1][1], C[2][0] * PCt[0][2] + C[2][1] * PCt[1][2]
 80018fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa1d 	bl	8000d44 <__aeabi_fmul>
 800190a:	4603      	mov	r3, r0
 800190c:	461c      	mov	r4, r3
 800190e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fa13 	bl	8000d44 <__aeabi_fmul>
 800191e:	4603      	mov	r3, r0
 8001920:	4619      	mov	r1, r3
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff f906 	bl	8000b34 <__addsf3>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
			+ ekf->R[2] } };
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	4619      	mov	r1, r3
 8001936:	4610      	mov	r0, r2
 8001938:	f7ff f8fc 	bl	8000b34 <__addsf3>
 800193c:	4603      	mov	r3, r0
	float RCPCt[3][3] = { { C[0][1] * PCt[1][0] + ekf->R[0], C[0][1]
 800193e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* inv(R + C * P * C') */
	float detMatInv = 1.0f
			/ (RCPCt[0][0]
 8001942:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
					* (RCPCt[2][2] * RCPCt[1][1] - RCPCt[2][1] * RCPCt[1][2])
 8001946:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800194a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff f9f7 	bl	8000d44 <__aeabi_fmul>
 8001956:	4603      	mov	r3, r0
 8001958:	461d      	mov	r5, r3
 800195a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800195e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f9ed 	bl	8000d44 <__aeabi_fmul>
 800196a:	4603      	mov	r3, r0
 800196c:	4619      	mov	r1, r3
 800196e:	4628      	mov	r0, r5
 8001970:	f7ff f8de 	bl	8000b30 <__aeabi_fsub>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff f9e3 	bl	8000d44 <__aeabi_fmul>
 800197e:	4603      	mov	r3, r0
 8001980:	461d      	mov	r5, r3
					- RCPCt[1][0]
 8001982:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
							* (RCPCt[2][2] * RCPCt[0][1]
 8001986:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800198a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f9d7 	bl	8000d44 <__aeabi_fmul>
 8001996:	4603      	mov	r3, r0
 8001998:	461e      	mov	r6, r3
									- RCPCt[2][1] * RCPCt[0][2])
 800199a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800199e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f9cd 	bl	8000d44 <__aeabi_fmul>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4630      	mov	r0, r6
 80019b0:	f7ff f8be 	bl	8000b30 <__aeabi_fsub>
 80019b4:	4603      	mov	r3, r0
							* (RCPCt[2][2] * RCPCt[0][1]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff f9c3 	bl	8000d44 <__aeabi_fmul>
 80019be:	4603      	mov	r3, r0
					- RCPCt[1][0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4628      	mov	r0, r5
 80019c4:	f7ff f8b4 	bl	8000b30 <__aeabi_fsub>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461d      	mov	r5, r3
					+ RCPCt[2][0]
 80019cc:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
							* (RCPCt[1][2] * RCPCt[0][1]
 80019d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f9b2 	bl	8000d44 <__aeabi_fmul>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461e      	mov	r6, r3
									- RCPCt[1][1] * RCPCt[0][2]));
 80019e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9a8 	bl	8000d44 <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4619      	mov	r1, r3
 80019f8:	4630      	mov	r0, r6
 80019fa:	f7ff f899 	bl	8000b30 <__aeabi_fsub>
 80019fe:	4603      	mov	r3, r0
							* (RCPCt[1][2] * RCPCt[0][1]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff f99e 	bl	8000d44 <__aeabi_fmul>
 8001a08:	4603      	mov	r3, r0
					+ RCPCt[2][0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f7ff f891 	bl	8000b34 <__addsf3>
 8001a12:	4603      	mov	r3, r0
	float detMatInv = 1.0f
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a1a:	f7ff fa47 	bl	8000eac <__aeabi_fdiv>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a28:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f988 	bl	8000d44 <__aeabi_fmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461c      	mov	r4, r3
			- RCPCt[2][1] * RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8001a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f97e 	bl	8000d44 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff f86f 	bl	8000b30 <__aeabi_fsub>
 8001a52:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001a54:	66fb      	str	r3, [r7, #108]	; 0x6c
			- RCPCt[2][1] * RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8001a56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f96f 	bl	8000d44 <__aeabi_fmul>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461c      	mov	r4, r3
			- RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] * RCPCt[0][1]
 8001a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f965 	bl	8000d44 <__aeabi_fmul>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff f856 	bl	8000b30 <__aeabi_fsub>
 8001a84:	4603      	mov	r3, r0
			- RCPCt[2][1] * RCPCt[1][2], -(RCPCt[2][2] * RCPCt[0][1]
 8001a86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001a8a:	673b      	str	r3, [r7, #112]	; 0x70
			- RCPCt[2][1] * RCPCt[0][2]), RCPCt[1][2] * RCPCt[0][1]
 8001a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f954 	bl	8000d44 <__aeabi_fmul>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461c      	mov	r4, r3
			- RCPCt[1][1] * RCPCt[0][2] }, { -(RCPCt[2][2] * RCPCt[1][0]
 8001aa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aa4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f94a 	bl	8000d44 <__aeabi_fmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff f83b 	bl	8000b30 <__aeabi_fsub>
 8001aba:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001abc:	677b      	str	r3, [r7, #116]	; 0x74
			- RCPCt[1][1] * RCPCt[0][2] }, { -(RCPCt[2][2] * RCPCt[1][0]
 8001abe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ac2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f93b 	bl	8000d44 <__aeabi_fmul>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] * RCPCt[0][0]
 8001ad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ad6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f931 	bl	8000d44 <__aeabi_fmul>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff f822 	bl	8000b30 <__aeabi_fsub>
 8001aec:	4603      	mov	r3, r0
			- RCPCt[1][1] * RCPCt[0][2] }, { -(RCPCt[2][2] * RCPCt[1][0]
 8001aee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001af2:	67bb      	str	r3, [r7, #120]	; 0x78
			- RCPCt[2][0] * RCPCt[1][2]), RCPCt[2][2] * RCPCt[0][0]
 8001af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001af8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f920 	bl	8000d44 <__aeabi_fmul>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8001b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f916 	bl	8000d44 <__aeabi_fmul>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff f807 	bl	8000b30 <__aeabi_fsub>
 8001b22:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001b24:	67fb      	str	r3, [r7, #124]	; 0x7c
			- RCPCt[2][0] * RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8001b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f907 	bl	8000d44 <__aeabi_fmul>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461c      	mov	r4, r3
			- RCPCt[1][0] * RCPCt[0][2]) }, { RCPCt[2][1] * RCPCt[1][0]
 8001b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f8fd 	bl	8000d44 <__aeabi_fmul>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7fe ffee 	bl	8000b30 <__aeabi_fsub>
 8001b54:	4603      	mov	r3, r0
			- RCPCt[2][0] * RCPCt[0][2], -(RCPCt[1][2] * RCPCt[0][0]
 8001b56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001b5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			- RCPCt[1][0] * RCPCt[0][2]) }, { RCPCt[2][1] * RCPCt[1][0]
 8001b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b62:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f8eb 	bl	8000d44 <__aeabi_fmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 8001b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b76:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f8e1 	bl	8000d44 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7fe ffd2 	bl	8000b30 <__aeabi_fsub>
 8001b8c:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001b8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			- RCPCt[2][0] * RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 8001b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f8d1 	bl	8000d44 <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461c      	mov	r4, r3
			- RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] * RCPCt[0][0]
 8001ba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001baa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f8c7 	bl	8000d44 <__aeabi_fmul>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7fe ffb8 	bl	8000b30 <__aeabi_fsub>
 8001bc0:	4603      	mov	r3, r0
			- RCPCt[2][0] * RCPCt[1][1], -(RCPCt[2][1] * RCPCt[0][0]
 8001bc2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			- RCPCt[2][0] * RCPCt[0][1]), RCPCt[1][1] * RCPCt[0][0]
 8001bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f8b5 	bl	8000d44 <__aeabi_fmul>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461c      	mov	r4, r3
			- RCPCt[1][0] * RCPCt[0][1] } };
 8001bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f8ab 	bl	8000d44 <__aeabi_fmul>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe ff9c 	bl	8000b30 <__aeabi_fsub>
 8001bf8:	4603      	mov	r3, r0
	float matInv[3][3] = { { RCPCt[2][2] * RCPCt[1][1]
 8001bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	for (unsigned int i = 0; i < 3; i++) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001c04:	e034      	b.n	8001c70 <EKF_Update+0x756>

		for (unsigned int j = 0; j < 3; j++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001c0c:	e027      	b.n	8001c5e <EKF_Update+0x744>

			matInv[i][j] *= detMatInv;
 8001c0e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c24:	4413      	add	r3, r2
 8001c26:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8001c2a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f888 	bl	8000d44 <__aeabi_fmul>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4619      	mov	r1, r3
 8001c38:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c4e:	4413      	add	r3, r2
 8001c50:	f843 1ca4 	str.w	r1, [r3, #-164]
		for (unsigned int j = 0; j < 3; j++) {
 8001c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001c5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d9d3      	bls.n	8001c0e <EKF_Update+0x6f4>
	for (unsigned int i = 0; i < 3; i++) {
 8001c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d9c6      	bls.n	8001c06 <EKF_Update+0x6ec>
		}

	}

	/* C' * inv(R + C * P * C') */
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8001c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f85f 	bl	8000d44 <__aeabi_fmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461c      	mov	r4, r3
 8001c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f855 	bl	8000d44 <__aeabi_fmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7fe ff48 	bl	8000b34 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
			C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], C[1][0]
 8001ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f847 	bl	8000d44 <__aeabi_fmul>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461c      	mov	r4, r3
 8001cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff f83d 	bl	8000d44 <__aeabi_fmul>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7fe ff30 	bl	8000b34 <__addsf3>
 8001cd4:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8001cd6:	65bb      	str	r3, [r7, #88]	; 0x58
			C[1][0] * matInv[1][1] + C[2][0] * matInv[2][1], C[1][0]
 8001cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
					* matInv[1][2] + C[2][0] * matInv[2][2] }, { C[0][1]
 8001cdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f82e 	bl	8000d44 <__aeabi_fmul>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461c      	mov	r4, r3
 8001cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cf0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f824 	bl	8000d44 <__aeabi_fmul>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7fe ff17 	bl	8000b34 <__addsf3>
 8001d06:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8001d08:	65fb      	str	r3, [r7, #92]	; 0x5c
					* matInv[1][2] + C[2][0] * matInv[2][2] }, { C[0][1]
 8001d0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
			* matInv[0][0] + C[1][1] * matInv[1][0] + C[2][1] * matInv[2][0],
 8001d0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f816 	bl	8000d44 <__aeabi_fmul>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461c      	mov	r4, r3
 8001d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f80d 	bl	8000d44 <__aeabi_fmul>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7fe ff00 	bl	8000b34 <__addsf3>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461c      	mov	r4, r3
 8001d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fffe 	bl	8000d44 <__aeabi_fmul>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7fe fef1 	bl	8000b34 <__addsf3>
 8001d52:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8001d54:	663b      	str	r3, [r7, #96]	; 0x60
			C[0][1] * matInv[0][1] + C[1][1] * matInv[1][1]
 8001d56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d5a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fff0 	bl	8000d44 <__aeabi_fmul>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461c      	mov	r4, r3
 8001d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ffe7 	bl	8000d44 <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7fe feda 	bl	8000b34 <__addsf3>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461c      	mov	r4, r3
					+ C[2][1] * matInv[2][1], C[0][1] * matInv[0][2]
 8001d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d88:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ffd8 	bl	8000d44 <__aeabi_fmul>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7fe fecb 	bl	8000b34 <__addsf3>
 8001d9e:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8001da0:	667b      	str	r3, [r7, #100]	; 0x64
					+ C[2][1] * matInv[2][1], C[0][1] * matInv[0][2]
 8001da2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001da6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ffca 	bl	8000d44 <__aeabi_fmul>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461c      	mov	r4, r3
					+ C[1][1] * matInv[1][2] + C[2][1] * matInv[2][2] } };
 8001db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001db8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe ffc0 	bl	8000d44 <__aeabi_fmul>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7fe feb3 	bl	8000b34 <__addsf3>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461c      	mov	r4, r3
 8001dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dd6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ffb1 	bl	8000d44 <__aeabi_fmul>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7fe fea4 	bl	8000b34 <__addsf3>
 8001dec:	4603      	mov	r3, r0
	float CtmatInv[2][3] = { { C[1][0] * matInv[1][0] + C[2][0] * matInv[2][0],
 8001dee:	66bb      	str	r3, [r7, #104]	; 0x68

	/* K = P * C' * inv(R + C * P * C') */
	float K[2][3] = { { ekf->P[0][0] * CtmatInv[0][0]
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe ffa1 	bl	8000d44 <__aeabi_fmul>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461c      	mov	r4, r3
			+ ekf->P[0][1] * CtmatInv[1][0], ekf->P[0][0] * CtmatInv[0][1]
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe ff96 	bl	8000d44 <__aeabi_fmul>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7fe fe89 	bl	8000b34 <__addsf3>
 8001e22:	4603      	mov	r3, r0
	float K[2][3] = { { ekf->P[0][0] * CtmatInv[0][0]
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
			+ ekf->P[0][1] * CtmatInv[1][0], ekf->P[0][0] * CtmatInv[0][1]
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe ff86 	bl	8000d44 <__aeabi_fmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461c      	mov	r4, r3
			+ ekf->P[0][1] * CtmatInv[1][1], ekf->P[0][0] * CtmatInv[0][2]
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ff7b 	bl	8000d44 <__aeabi_fmul>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4619      	mov	r1, r3
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7fe fe6e 	bl	8000b34 <__addsf3>
 8001e58:	4603      	mov	r3, r0
	float K[2][3] = { { ekf->P[0][0] * CtmatInv[0][0]
 8001e5a:	643b      	str	r3, [r7, #64]	; 0x40
			+ ekf->P[0][1] * CtmatInv[1][1], ekf->P[0][0] * CtmatInv[0][2]
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe ff6b 	bl	8000d44 <__aeabi_fmul>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461c      	mov	r4, r3
			+ ekf->P[0][1] * CtmatInv[1][2] }, { ekf->P[1][0] * CtmatInv[0][0]
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe ff60 	bl	8000d44 <__aeabi_fmul>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4619      	mov	r1, r3
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7fe fe53 	bl	8000b34 <__addsf3>
 8001e8e:	4603      	mov	r3, r0
	float K[2][3] = { { ekf->P[0][0] * CtmatInv[0][0]
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
			+ ekf->P[0][1] * CtmatInv[1][2] }, { ekf->P[1][0] * CtmatInv[0][0]
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe ff50 	bl	8000d44 <__aeabi_fmul>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461c      	mov	r4, r3
			+ ekf->P[1][1] * CtmatInv[1][0], ekf->P[1][0] * CtmatInv[0][1]
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe ff45 	bl	8000d44 <__aeabi_fmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7fe fe38 	bl	8000b34 <__addsf3>
 8001ec4:	4603      	mov	r3, r0
	float K[2][3] = { { ekf->P[0][0] * CtmatInv[0][0]
 8001ec6:	64bb      	str	r3, [r7, #72]	; 0x48
			+ ekf->P[1][1] * CtmatInv[1][0], ekf->P[1][0] * CtmatInv[0][1]
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe ff35 	bl	8000d44 <__aeabi_fmul>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461c      	mov	r4, r3
			+ ekf->P[1][1] * CtmatInv[1][1], ekf->P[1][0] * CtmatInv[0][2]
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe ff2a 	bl	8000d44 <__aeabi_fmul>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7fe fe1d 	bl	8000b34 <__addsf3>
 8001efa:	4603      	mov	r3, r0
	float K[2][3] = { { ekf->P[0][0] * CtmatInv[0][0]
 8001efc:	64fb      	str	r3, [r7, #76]	; 0x4c
			+ ekf->P[1][1] * CtmatInv[1][1], ekf->P[1][0] * CtmatInv[0][2]
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe ff1a 	bl	8000d44 <__aeabi_fmul>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461c      	mov	r4, r3
			+ ekf->P[1][1] * CtmatInv[1][2] } };
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe ff0f 	bl	8000d44 <__aeabi_fmul>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	f7fe fe02 	bl	8000b34 <__addsf3>
 8001f30:	4603      	mov	r3, r0
	float K[2][3] = { { ekf->P[0][0] * CtmatInv[0][0]
 8001f32:	653b      	str	r3, [r7, #80]	; 0x50

	/* Update state covariance matrix P(n+1) = (I - K * C) * P(n) */
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 8001f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe ff01 	bl	8000d44 <__aeabi_fmul>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461c      	mov	r4, r3
 8001f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fef8 	bl	8000d44 <__aeabi_fmul>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4619      	mov	r1, r3
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7fe fdeb 	bl	8000b34 <__addsf3>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4619      	mov	r1, r3
 8001f62:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001f66:	f7fe fde3 	bl	8000b30 <__aeabi_fsub>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
			-(K[0][1] * C[1][1] + K[1][0] * C[2][1]) },
 8001f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f70:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fee4 	bl	8000d44 <__aeabi_fmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461c      	mov	r4, r3
 8001f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fedb 	bl	8000d44 <__aeabi_fmul>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4619      	mov	r1, r3
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7fe fdce 	bl	8000b34 <__addsf3>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
			{ -(K[1][1] * C[1][0] + K[1][2] * C[2][0]), 1.0f
 8001fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fecb 	bl	8000d44 <__aeabi_fmul>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fec2 	bl	8000d44 <__aeabi_fmul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7fe fdb5 	bl	8000b34 <__addsf3>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
					- (K[1][1] * C[1][1] + K[1][2] * C[2][1]) } };
 8001fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe feb2 	bl	8000d44 <__aeabi_fmul>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461c      	mov	r4, r3
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fea9 	bl	8000d44 <__aeabi_fmul>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7fe fd9c 	bl	8000b34 <__addsf3>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4619      	mov	r1, r3
 8002000:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002004:	f7fe fd94 	bl	8000b30 <__aeabi_fsub>
 8002008:	4603      	mov	r3, r0
	float IminKC[2][2] = { { 1.0f - (K[0][1] * C[1][0] + K[1][0] * C[2][0]),
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38

	float Pnew[2][2] = { { IminKC[0][0] * ekf->P[0][0]
 800200c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f7fe fe93 	bl	8000d44 <__aeabi_fmul>
 800201e:	4603      	mov	r3, r0
 8002020:	461c      	mov	r4, r3
			+ IminKC[0][1] * ekf->P[1][0], IminKC[0][0] * ekf->P[0][1]
 8002022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f7fe fe88 	bl	8000d44 <__aeabi_fmul>
 8002034:	4603      	mov	r3, r0
 8002036:	4619      	mov	r1, r3
 8002038:	4620      	mov	r0, r4
 800203a:	f7fe fd7b 	bl	8000b34 <__addsf3>
 800203e:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf->P[0][0]
 8002040:	61fb      	str	r3, [r7, #28]
			+ IminKC[0][1] * ekf->P[1][0], IminKC[0][0] * ekf->P[0][1]
 8002042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f7fe fe78 	bl	8000d44 <__aeabi_fmul>
 8002054:	4603      	mov	r3, r0
 8002056:	461c      	mov	r4, r3
			+ IminKC[0][1] * ekf->P[1][1] }, { IminKC[1][0] * ekf->P[0][0]
 8002058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f7fe fe6d 	bl	8000d44 <__aeabi_fmul>
 800206a:	4603      	mov	r3, r0
 800206c:	4619      	mov	r1, r3
 800206e:	4620      	mov	r0, r4
 8002070:	f7fe fd60 	bl	8000b34 <__addsf3>
 8002074:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf->P[0][0]
 8002076:	623b      	str	r3, [r7, #32]
			+ IminKC[0][1] * ekf->P[1][1] }, { IminKC[1][0] * ekf->P[0][0]
 8002078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4619      	mov	r1, r3
 8002084:	4610      	mov	r0, r2
 8002086:	f7fe fe5d 	bl	8000d44 <__aeabi_fmul>
 800208a:	4603      	mov	r3, r0
 800208c:	461c      	mov	r4, r3
			+ IminKC[1][1] * ekf->P[1][0], IminKC[1][0] * ekf->P[0][1]
 800208e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f7fe fe52 	bl	8000d44 <__aeabi_fmul>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7fe fd45 	bl	8000b34 <__addsf3>
 80020aa:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf->P[0][0]
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
			+ IminKC[1][1] * ekf->P[1][0], IminKC[1][0] * ekf->P[0][1]
 80020ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7fe fe42 	bl	8000d44 <__aeabi_fmul>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461c      	mov	r4, r3
			+ IminKC[1][1] * ekf->P[1][1] } };
 80020c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f7fe fe37 	bl	8000d44 <__aeabi_fmul>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4619      	mov	r1, r3
 80020da:	4620      	mov	r0, r4
 80020dc:	f7fe fd2a 	bl	8000b34 <__addsf3>
 80020e0:	4603      	mov	r3, r0
	float Pnew[2][2] = { { IminKC[0][0] * ekf->P[0][0]
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28

	ekf->P[0][0] = Pnew[0][0];
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	609a      	str	r2, [r3, #8]
	ekf->P[0][1] = Pnew[0][1];
 80020ee:	6a3a      	ldr	r2, [r7, #32]
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60da      	str	r2, [r3, #12]
	ekf->P[1][0] = Pnew[1][0];
 80020f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	611a      	str	r2, [r3, #16]
	ekf->P[1][1] = Pnew[1][1];
 8002102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	615a      	str	r2, [r3, #20]

	/* Compute output function h(x,u) */
	float h[3] = { sinf(ekf->theta_r), -cosf(ekf->theta_r) * sinf(ekf->phi_r),
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4618      	mov	r0, r3
 8002116:	f006 fd79 	bl	8008c0c <sinf>
 800211a:	4602      	mov	r2, r0
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	f006 fd36 	bl	8008b9c <cosf>
 8002130:	4603      	mov	r3, r0
 8002132:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f006 fd64 	bl	8008c0c <sinf>
 8002144:	4603      	mov	r3, r0
 8002146:	4619      	mov	r1, r3
 8002148:	4620      	mov	r0, r4
 800214a:	f7fe fdfb 	bl	8000d44 <__aeabi_fmul>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	f107 0310 	add.w	r3, r7, #16
 8002156:	605a      	str	r2, [r3, #4]
			-cosf(ekf->theta_r) * cosf(ekf->phi_r) };
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	f006 fd1b 	bl	8008b9c <cosf>
 8002166:	4603      	mov	r3, r0
 8002168:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f006 fd11 	bl	8008b9c <cosf>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	4620      	mov	r0, r4
 8002180:	f7fe fde0 	bl	8000d44 <__aeabi_fmul>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
	float h[3] = { sinf(ekf->theta_r), -cosf(ekf->theta_r) * sinf(ekf->phi_r),
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	609a      	str	r2, [r3, #8]

	/* Update state estimate x(n+1) = x(n) + K * (y - h) */
	ekf->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 800218e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800219c:	f7fe fcc8 	bl	8000b30 <__aeabi_fsub>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7fe fdcd 	bl	8000d44 <__aeabi_fmul>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461d      	mov	r5, r3
 80021ae:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4619      	mov	r1, r3
 80021b8:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80021bc:	f7fe fcb8 	bl	8000b30 <__aeabi_fsub>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7fe fdbd 	bl	8000d44 <__aeabi_fmul>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4619      	mov	r1, r3
 80021ce:	4628      	mov	r0, r5
 80021d0:	f7fe fcb0 	bl	8000b34 <__addsf3>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461d      	mov	r5, r3
			+ K[0][2] * (az_norm - h[2]);
 80021d8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80021e6:	f7fe fca3 	bl	8000b30 <__aeabi_fsub>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4619      	mov	r1, r3
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7fe fda8 	bl	8000d44 <__aeabi_fmul>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4628      	mov	r0, r5
 80021fa:	f7fe fc9b 	bl	8000b34 <__addsf3>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
	ekf->phi_r = K[0][0] * (ax_norm - h[0]) + K[0][1] * (ay_norm - h[1])
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	601a      	str	r2, [r3, #0]
	ekf->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 800220a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8002218:	f7fe fc8a 	bl	8000b30 <__aeabi_fsub>
 800221c:	4603      	mov	r3, r0
 800221e:	4619      	mov	r1, r3
 8002220:	4620      	mov	r0, r4
 8002222:	f7fe fd8f 	bl	8000d44 <__aeabi_fmul>
 8002226:	4603      	mov	r3, r0
 8002228:	461d      	mov	r5, r3
 800222a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4619      	mov	r1, r3
 8002234:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8002238:	f7fe fc7a 	bl	8000b30 <__aeabi_fsub>
 800223c:	4603      	mov	r3, r0
 800223e:	4619      	mov	r1, r3
 8002240:	4620      	mov	r0, r4
 8002242:	f7fe fd7f 	bl	8000d44 <__aeabi_fmul>
 8002246:	4603      	mov	r3, r0
 8002248:	4619      	mov	r1, r3
 800224a:	4628      	mov	r0, r5
 800224c:	f7fe fc72 	bl	8000b34 <__addsf3>
 8002250:	4603      	mov	r3, r0
 8002252:	461d      	mov	r5, r3
			+ K[1][2] * (az_norm - h[2]);
 8002254:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002256:	f107 0310 	add.w	r3, r7, #16
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4619      	mov	r1, r3
 800225e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8002262:	f7fe fc65 	bl	8000b30 <__aeabi_fsub>
 8002266:	4603      	mov	r3, r0
 8002268:	4619      	mov	r1, r3
 800226a:	4620      	mov	r0, r4
 800226c:	f7fe fd6a 	bl	8000d44 <__aeabi_fmul>
 8002270:	4603      	mov	r3, r0
 8002272:	4619      	mov	r1, r3
 8002274:	4628      	mov	r0, r5
 8002276:	f7fe fc5d 	bl	8000b34 <__addsf3>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
	ekf->theta_r = K[1][0] * (ax_norm - h[0]) + K[1][1] * (ay_norm - h[1])
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]

}
 8002286:	bf00      	nop
 8002288:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800228c:	46bd      	mov	sp, r7
 800228e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002290 <LSM9DS1_ReadReg>:
 * @brief  Read data from Specific Register address of LSM9DS1
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address from which data is to be read
 */
uint8_t LSM9DS1_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2110      	movs	r1, #16
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <LSM9DS1_ReadReg+0x50>)
 80022ac:	f001 ff5a 	bl	8004164 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 80022b0:	1cf9      	adds	r1, r7, #3
 80022b2:	2364      	movs	r3, #100	; 0x64
 80022b4:	2201      	movs	r2, #1
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f002 fbfe 	bl	8004ab8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 80022bc:	f107 010f 	add.w	r1, r7, #15
 80022c0:	2364      	movs	r3, #100	; 0x64
 80022c2:	2201      	movs	r2, #1
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f002 fd3a 	bl	8004d3e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2110      	movs	r1, #16
 80022ce:	4804      	ldr	r0, [pc, #16]	; (80022e0 <LSM9DS1_ReadReg+0x50>)
 80022d0:	f001 ff48 	bl	8004164 <HAL_GPIO_WritePin>
	return val;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40010800 	.word	0x40010800

080022e4 <LSM9DS1_WriteReg>:
 * @brief  Write on Specific Register address of LSM9DS1
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address where certain value is to be written
 */
void LSM9DS1_WriteReg(SPI_HandleTypeDef *hspi, uint8_t add, uint8_t val) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
 80022f0:	4613      	mov	r3, r2
 80022f2:	70bb      	strb	r3, [r7, #2]
	add &= 0x7F;  // clear the MSB to indicate a write operation
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	2110      	movs	r1, #16
 8002302:	480c      	ldr	r0, [pc, #48]	; (8002334 <LSM9DS1_WriteReg+0x50>)
 8002304:	f001 ff2e 	bl	8004164 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 8002308:	1cf9      	adds	r1, r7, #3
 800230a:	2364      	movs	r3, #100	; 0x64
 800230c:	2201      	movs	r2, #1
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f002 fbd2 	bl	8004ab8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 8002314:	1cb9      	adds	r1, r7, #2
 8002316:	2364      	movs	r3, #100	; 0x64
 8002318:	2201      	movs	r2, #1
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f002 fbcc 	bl	8004ab8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MAG_Pin, GPIO_PIN_SET);
 8002320:	2201      	movs	r2, #1
 8002322:	2110      	movs	r1, #16
 8002324:	4803      	ldr	r0, [pc, #12]	; (8002334 <LSM9DS1_WriteReg+0x50>)
 8002326:	f001 ff1d 	bl	8004164 <HAL_GPIO_WritePin>

}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40010800 	.word	0x40010800

08002338 <LSM9DS1_Init>:
 * @brief  Initialize LSM9DS1 to work in 16-bit, 1.25Hz ODR, ±4 Gauss and Continuous conversion Mode
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  ctrl2 Control Register Value to choose LSM9DS1 sensor Scale
 */
void LSM9DS1_Init(SPI_HandleTypeDef *hspi, uint8_t ctrl2) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl1 = 0x74; // set the magnetic resolution to 16-bit, 20 Hz ODR, UHP mode in X-Y axis
 8002344:	2374      	movs	r3, #116	; 0x74
 8002346:	73fb      	strb	r3, [r7, #15]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG1_M, ctrl1);
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	461a      	mov	r2, r3
 800234c:	2120      	movs	r1, #32
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffc8 	bl	80022e4 <LSM9DS1_WriteReg>

	/* Change the full-scale range to ±4 Gauss */

	//value to set the full-scale range
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG2_M, ctrl2);
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	461a      	mov	r2, r3
 8002358:	2121      	movs	r1, #33	; 0x21
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffc2 	bl	80022e4 <LSM9DS1_WriteReg>

	/* Change the control register 3 to continuous conversion mode */

	uint8_t ctrl3 = 0x00; // value to set the continuous conversion mode
 8002360:	2300      	movs	r3, #0
 8002362:	73bb      	strb	r3, [r7, #14]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG3_M, ctrl3);
 8002364:	7bbb      	ldrb	r3, [r7, #14]
 8002366:	461a      	mov	r2, r3
 8002368:	2122      	movs	r1, #34	; 0x22
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffba 	bl	80022e4 <LSM9DS1_WriteReg>

	uint8_t ctrl4 = 0x0C; // value to set the UHP mode on Z-axis
 8002370:	230c      	movs	r3, #12
 8002372:	737b      	strb	r3, [r7, #13]
	LSM9DS1_WriteReg(hspi, LSM9DS1_CTRL_REG4_M, ctrl4);
 8002374:	7b7b      	ldrb	r3, [r7, #13]
 8002376:	461a      	mov	r2, r3
 8002378:	2123      	movs	r1, #35	; 0x23
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffb2 	bl	80022e4 <LSM9DS1_WriteReg>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <MPU_begin>:

//MPU6500 Functions

uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU6500_t *pMPU6500) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	// Initialize variables
	uint8_t addr, val;
//	 Confirm device
//	HAL_Delay(100);
	whoAmI();
 8002392:	f000 f8e1 	bl	8002558 <whoAmI>
	readRegisters(WHO_AM_I, 1, &check);
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <MPU_begin+0x7c>)
 8002398:	2101      	movs	r1, #1
 800239a:	2075      	movs	r0, #117	; 0x75
 800239c:	f000 f8c9 	bl	8002532 <readRegisters>
	if (check == WHO_AM_I_6500_ANS) {
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MPU_begin+0x7c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b70      	cmp	r3, #112	; 0x70
 80023a6:	d128      	bne.n	80023fa <MPU_begin+0x72>
//	 Startup / reset the sensor
		addr = PWR_MGMT_1;
 80023a8:	236b      	movs	r3, #107	; 0x6b
 80023aa:	73fb      	strb	r3, [r7, #15]
		val = 0x00;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80023b0:	7bba      	ldrb	r2, [r7, #14]
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f8a6 	bl	8002508 <writeRegister>

		// Disable I2C (SPI only)
		addr = USER_CTRL;
 80023bc:	236a      	movs	r3, #106	; 0x6a
 80023be:	73fb      	strb	r3, [r7, #15]
		val = 0x10;
 80023c0:	2310      	movs	r3, #16
 80023c2:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80023c4:	7bba      	ldrb	r2, [r7, #14]
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f89c 	bl	8002508 <writeRegister>

		// Configure DLPF value()
		val = 0x11;
 80023d0:	2311      	movs	r3, #17
 80023d2:	73bb      	strb	r3, [r7, #14]
		MPU6500_SetDLPFBandwidth(DLPF_BANDWIDTH_20HZ);
 80023d4:	2004      	movs	r0, #4
 80023d6:	f000 f8cd 	bl	8002574 <MPU6500_SetDLPFBandwidth>

		// Set the full scale ranges

		MPU_writeAccFullScaleRange(pMPU6500,
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80023e0:	4619      	mov	r1, r3
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	f000 f8dc 	bl	80025a0 <MPU_writeAccFullScaleRange>
				pMPU6500->settings.aFullScaleRange);
		MPU_writeGyroFullScaleRange(pMPU6500,
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80023ee:	4619      	mov	r1, r3
 80023f0:	6838      	ldr	r0, [r7, #0]
 80023f2:	f000 f931 	bl	8002658 <MPU_writeGyroFullScaleRange>
				pMPU6500->settings.gFullScaleRange);
		return 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <MPU_begin+0x74>
	} else {
		return 0;
 80023fa:	2300      	movs	r3, #0
	}
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200003f0 	.word	0x200003f0

08002408 <MPU_CS>:

void MPU_CS(uint8_t state) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, CS_MPU_Pin, state);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	461a      	mov	r2, r3
 8002416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <MPU_CS+0x20>)
 800241c:	f001 fea2 	bl	8004164 <HAL_GPIO_WritePin>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40010c00 	.word	0x40010c00

0800242c <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
	if (HAL_SPI_TransmitReceive(&IMU_STREAM, (uint8_t*) &Byte,
 800243a:	f107 020f 	add.w	r2, r7, #15
 800243e:	1df9      	adds	r1, r7, #7
 8002440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2301      	movs	r3, #1
 8002448:	4806      	ldr	r0, [pc, #24]	; (8002464 <SPIx_WriteRead+0x38>)
 800244a:	f002 fd90 	bl	8004f6e <HAL_SPI_TransmitReceive>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <SPIx_WriteRead+0x2c>
			(uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK) {
		return -1;
 8002454:	23ff      	movs	r3, #255	; 0xff
 8002456:	e000      	b.n	800245a <SPIx_WriteRead+0x2e>
	} else {
	}
	return receivedbyte;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000043c 	.word	0x2000043c

08002468 <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
 8002474:	4613      	mov	r3, r2
 8002476:	803b      	strh	r3, [r7, #0]
	MPU_CS(CS_SEL);
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff ffc5 	bl	8002408 <MPU_CS>
	SPIx_WriteRead(WriteAddr);
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ffd3 	bl	800242c <SPIx_WriteRead>
	while (NumByteToWrite >= 0x01) {
 8002486:	e00a      	b.n	800249e <MPU_SPI_Write+0x36>
		SPIx_WriteRead(*pBuffer);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ffcd 	bl	800242c <SPIx_WriteRead>
		NumByteToWrite--;
 8002492:	883b      	ldrh	r3, [r7, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3301      	adds	r3, #1
 800249c:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite >= 0x01) {
 800249e:	883b      	ldrh	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f1      	bne.n	8002488 <MPU_SPI_Write+0x20>
	}
	MPU_CS(CS_DES);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7ff ffaf 	bl	8002408 <MPU_CS>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
 80024c0:	4613      	mov	r3, r2
 80024c2:	803b      	strh	r3, [r7, #0]
	MPU_CS(CS_DES);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7ff ff9f 	bl	8002408 <MPU_CS>
	MPU_CS(CS_SEL);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7ff ff9c 	bl	8002408 <MPU_CS>
	uint8_t data = ReadAddr | READWRITE_CMD;
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&IMU_STREAM, &data, 1, 100);
 80024da:	f107 010f 	add.w	r1, r7, #15
 80024de:	2364      	movs	r3, #100	; 0x64
 80024e0:	2201      	movs	r2, #1
 80024e2:	4808      	ldr	r0, [pc, #32]	; (8002504 <MPU_SPI_Read+0x50>)
 80024e4:	f002 fae8 	bl	8004ab8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&IMU_STREAM, pBuffer, NumByteToRead, 100);
 80024e8:	883a      	ldrh	r2, [r7, #0]
 80024ea:	2364      	movs	r3, #100	; 0x64
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4805      	ldr	r0, [pc, #20]	; (8002504 <MPU_SPI_Read+0x50>)
 80024f0:	f002 fc25 	bl	8004d3e <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7ff ff87 	bl	8002408 <MPU_CS>
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000043c 	.word	0x2000043c

08002508 <writeRegister>:

/* writes a byte to MPU6500 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	460a      	mov	r2, r1
 8002512:	71fb      	strb	r3, [r7, #7]
 8002514:	4613      	mov	r3, r2
 8002516:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8002518:	79f9      	ldrb	r1, [r7, #7]
 800251a:	1dbb      	adds	r3, r7, #6
 800251c:	2201      	movs	r2, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ffa2 	bl	8002468 <MPU_SPI_Write>
	HAL_Delay(10);
 8002524:	200a      	movs	r0, #10
 8002526:	f001 faef 	bl	8003b08 <HAL_Delay>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <readRegisters>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t *dest) {
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	603a      	str	r2, [r7, #0]
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	460b      	mov	r3, r1
 8002540:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 8002542:	79bb      	ldrb	r3, [r7, #6]
 8002544:	b29a      	uxth	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4619      	mov	r1, r3
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	f7ff ffb2 	bl	80024b4 <MPU_SPI_Read>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <whoAmI>:

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x71 */
uint8_t whoAmI() {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I, 1, &_buffer1);
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <whoAmI+0x18>)
 800255e:	2101      	movs	r1, #1
 8002560:	2075      	movs	r0, #117	; 0x75
 8002562:	f7ff ffe6 	bl	8002532 <readRegisters>

	// return the register value
	return _buffer1;
 8002566:	4b02      	ldr	r3, [pc, #8]	; (8002570 <whoAmI+0x18>)
 8002568:	781b      	ldrb	r3, [r3, #0]
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000342 	.word	0x20000342

08002574 <MPU6500_SetDLPFBandwidth>:

/* sets the DLPF bandwidth to values other than default */
void MPU6500_SetDLPFBandwidth(DLPFBandwidth bandwidth) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG2, bandwidth);
 800257e:	221d      	movs	r2, #29
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f7ff ffbf 	bl	8002508 <writeRegister>
	writeRegister(CONFIG, bandwidth);
 800258a:	221a      	movs	r2, #26
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f7ff ffb9 	bl	8002508 <writeRegister>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(MPU6500_t *pMPU6500, uint8_t aScale) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = ACCEL_CONFIG;
 80025ac:	231c      	movs	r3, #28
 80025ae:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (aScale) {
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d83e      	bhi.n	8002634 <MPU_writeAccFullScaleRange+0x94>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <MPU_writeAccFullScaleRange+0x1c>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025e7 	.word	0x080025e7
 80025c4:	08002601 	.word	0x08002601
 80025c8:	0800261b 	.word	0x0800261b
	case AFSR_2G:
		pMPU6500->sensorData.aScaleFactor = 16384.0;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80025d2:	60da      	str	r2, [r3, #12]
		val = 0x00;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80025d8:	7bba      	ldrb	r2, [r7, #14]
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff92 	bl	8002508 <writeRegister>
		break;
 80025e4:	e033      	b.n	800264e <MPU_writeAccFullScaleRange+0xae>
	case AFSR_4G:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80025ec:	60da      	str	r2, [r3, #12]
		val = 0x08;
 80025ee:	2308      	movs	r3, #8
 80025f0:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80025f2:	7bba      	ldrb	r2, [r7, #14]
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff85 	bl	8002508 <writeRegister>
		break;
 80025fe:	e026      	b.n	800264e <MPU_writeAccFullScaleRange+0xae>
	case AFSR_8G:
		pMPU6500->sensorData.aScaleFactor = 4096.0;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002606:	60da      	str	r2, [r3, #12]
		val = 0x10;
 8002608:	2310      	movs	r3, #16
 800260a:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800260c:	7bba      	ldrb	r2, [r7, #14]
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff78 	bl	8002508 <writeRegister>
		break;
 8002618:	e019      	b.n	800264e <MPU_writeAccFullScaleRange+0xae>
	case AFSR_16G:
		pMPU6500->sensorData.aScaleFactor = 2048.0;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002620:	60da      	str	r2, [r3, #12]
		val = 0x18;
 8002622:	2318      	movs	r3, #24
 8002624:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002626:	7bba      	ldrb	r2, [r7, #14]
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff6b 	bl	8002508 <writeRegister>
		break;
 8002632:	e00c      	b.n	800264e <MPU_writeAccFullScaleRange+0xae>
	default:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800263a:	60da      	str	r2, [r3, #12]
		val = 0x08;
 800263c:	2308      	movs	r3, #8
 800263e:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8002640:	7bba      	ldrb	r2, [r7, #14]
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff5e 	bl	8002508 <writeRegister>
		break;
 800264c:	bf00      	nop
	}
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(MPU6500_t *pMPU6500, uint8_t gScale) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = GYRO_CONFIG;
 8002664:	231b      	movs	r3, #27
 8002666:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (gScale) {
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d83a      	bhi.n	80026e4 <MPU_writeGyroFullScaleRange+0x8c>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <MPU_writeGyroFullScaleRange+0x1c>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002685 	.word	0x08002685
 8002678:	0800269d 	.word	0x0800269d
 800267c:	080026b5 	.word	0x080026b5
 8002680:	080026cd 	.word	0x080026cd
	case GFSR_250DPS:
		pMPU6500->sensorData.gScaleFactor = 131.0;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <MPU_writeGyroFullScaleRange+0xac>)
 8002688:	611a      	str	r2, [r3, #16]
		val = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800268e:	7bba      	ldrb	r2, [r7, #14]
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff37 	bl	8002508 <writeRegister>
		break;
 800269a:	e02f      	b.n	80026fc <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_500DPS:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <MPU_writeGyroFullScaleRange+0xb0>)
 80026a0:	611a      	str	r2, [r3, #16]
		val = 0x08;
 80026a2:	2308      	movs	r3, #8
 80026a4:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026a6:	7bba      	ldrb	r2, [r7, #14]
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff2b 	bl	8002508 <writeRegister>
		break;
 80026b2:	e023      	b.n	80026fc <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_1000DPS:
		pMPU6500->sensorData.gScaleFactor = 32.8;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a15      	ldr	r2, [pc, #84]	; (800270c <MPU_writeGyroFullScaleRange+0xb4>)
 80026b8:	611a      	str	r2, [r3, #16]
		val = 0x10;
 80026ba:	2310      	movs	r3, #16
 80026bc:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026be:	7bba      	ldrb	r2, [r7, #14]
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff1f 	bl	8002508 <writeRegister>
		break;
 80026ca:	e017      	b.n	80026fc <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_2000DPS:
		pMPU6500->sensorData.gScaleFactor = 16.4;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a10      	ldr	r2, [pc, #64]	; (8002710 <MPU_writeGyroFullScaleRange+0xb8>)
 80026d0:	611a      	str	r2, [r3, #16]
		val = 0x18;
 80026d2:	2318      	movs	r3, #24
 80026d4:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026d6:	7bba      	ldrb	r2, [r7, #14]
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff13 	bl	8002508 <writeRegister>
		break;
 80026e2:	e00b      	b.n	80026fc <MPU_writeGyroFullScaleRange+0xa4>
	default:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <MPU_writeGyroFullScaleRange+0xb0>)
 80026e8:	611a      	str	r2, [r3, #16]
		val = 0x08;
 80026ea:	2308      	movs	r3, #8
 80026ec:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80026ee:	7bba      	ldrb	r2, [r7, #14]
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff07 	bl	8002508 <writeRegister>
		break;
 80026fa:	bf00      	nop
	}
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	43030000 	.word	0x43030000
 8002708:	42830000 	.word	0x42830000
 800270c:	42033333 	.word	0x42033333
 8002710:	41833333 	.word	0x41833333

08002714 <MPU6500_GetData>:
	MPU_CS(CS_DES);
	return val;
}

/* read the data, each argument should point to a array for x, y, and x */
void MPU6500_GetData(MPU6500_t *pMPU6500) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU6500
	readRegisters(ACCEL_OUT, 14, _buffer);
 800271c:	233b      	movs	r3, #59	; 0x3b
 800271e:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <MPU6500_GetData+0xa0>)
 8002720:	210e      	movs	r1, #14
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff05 	bl	8002532 <readRegisters>

	// combine into 16 bit values
	pMPU6500->rawData.ax = (((int16_t) _buffer[0]) << 8) | _buffer[1];
 8002728:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <MPU6500_GetData+0xa0>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	b21a      	sxth	r2, r3
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <MPU6500_GetData+0xa0>)
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	b21b      	sxth	r3, r3
 8002736:	4313      	orrs	r3, r2
 8002738:	b21a      	sxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	801a      	strh	r2, [r3, #0]
	pMPU6500->rawData.ay = (((int16_t) _buffer[2]) << 8) | _buffer[3];
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <MPU6500_GetData+0xa0>)
 8002740:	789b      	ldrb	r3, [r3, #2]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	b21a      	sxth	r2, r3
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <MPU6500_GetData+0xa0>)
 8002748:	78db      	ldrb	r3, [r3, #3]
 800274a:	b21b      	sxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b21a      	sxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	805a      	strh	r2, [r3, #2]
	pMPU6500->rawData.az = (((int16_t) _buffer[4]) << 8) | _buffer[5];
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <MPU6500_GetData+0xa0>)
 8002756:	791b      	ldrb	r3, [r3, #4]
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	b21a      	sxth	r2, r3
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <MPU6500_GetData+0xa0>)
 800275e:	795b      	ldrb	r3, [r3, #5]
 8002760:	b21b      	sxth	r3, r3
 8002762:	4313      	orrs	r3, r2
 8002764:	b21a      	sxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	809a      	strh	r2, [r3, #4]

	pMPU6500->rawData.gx = (((int16_t) _buffer[8]) << 8) | _buffer[9];
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <MPU6500_GetData+0xa0>)
 800276c:	7a1b      	ldrb	r3, [r3, #8]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	b21a      	sxth	r2, r3
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <MPU6500_GetData+0xa0>)
 8002774:	7a5b      	ldrb	r3, [r3, #9]
 8002776:	b21b      	sxth	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	b21a      	sxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	80da      	strh	r2, [r3, #6]
	pMPU6500->rawData.gy = (((int16_t) _buffer[10]) << 8) | _buffer[11];
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <MPU6500_GetData+0xa0>)
 8002782:	7a9b      	ldrb	r3, [r3, #10]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	b21a      	sxth	r2, r3
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <MPU6500_GetData+0xa0>)
 800278a:	7adb      	ldrb	r3, [r3, #11]
 800278c:	b21b      	sxth	r3, r3
 800278e:	4313      	orrs	r3, r2
 8002790:	b21a      	sxth	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	811a      	strh	r2, [r3, #8]
	pMPU6500->rawData.gz = (((int16_t) _buffer[12]) << 8) | _buffer[13];
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <MPU6500_GetData+0xa0>)
 8002798:	7b1b      	ldrb	r3, [r3, #12]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	b21a      	sxth	r2, r3
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <MPU6500_GetData+0xa0>)
 80027a0:	7b5b      	ldrb	r3, [r3, #13]
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	815a      	strh	r2, [r3, #10]

}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000224 	.word	0x20000224

080027b8 <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(MPU6500_t *pMPU6500, uint16_t numCalPoints) {
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
// Init
	int32_t x = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
	int32_t y = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
	int32_t z = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]

// Zero guard
	if (numCalPoints == 0) {
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <MPU_calibrateGyro+0x22>
		numCalPoints = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	807b      	strh	r3, [r7, #2]
	}

// Save specified number of points
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 80027da:	2300      	movs	r3, #0
 80027dc:	817b      	strh	r3, [r7, #10]
 80027de:	e01d      	b.n	800281c <MPU_calibrateGyro+0x64>
		MPU6500_GetData(pMPU6500);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff97 	bl	8002714 <MPU6500_GetData>

		x += pMPU6500->rawData.gx;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80027ec:	461a      	mov	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	4413      	add	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
		y += pMPU6500->rawData.gy;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027fa:	461a      	mov	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
		z += pMPU6500->rawData.gz;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002808:	461a      	mov	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4413      	add	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(3);
 8002810:	2003      	movs	r0, #3
 8002812:	f001 f979 	bl	8003b08 <HAL_Delay>
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	3301      	adds	r3, #1
 800281a:	817b      	strh	r3, [r7, #10]
 800281c:	897a      	ldrh	r2, [r7, #10]
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	429a      	cmp	r2, r3
 8002822:	d3dd      	bcc.n	80027e0 <MPU_calibrateGyro+0x28>
	}

// Average the saved data points to find the gyroscope offset
	pMPU6500->gyroCal.x = (float) x / (float) numCalPoints;
 8002824:	6978      	ldr	r0, [r7, #20]
 8002826:	f7fe fa39 	bl	8000c9c <__aeabi_i2f>
 800282a:	4604      	mov	r4, r0
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fa30 	bl	8000c94 <__aeabi_ui2f>
 8002834:	4603      	mov	r3, r0
 8002836:	4619      	mov	r1, r3
 8002838:	4620      	mov	r0, r4
 800283a:	f7fe fb37 	bl	8000eac <__aeabi_fdiv>
 800283e:	4603      	mov	r3, r0
 8002840:	461a      	mov	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	62da      	str	r2, [r3, #44]	; 0x2c
	pMPU6500->gyroCal.y = (float) y / (float) numCalPoints;
 8002846:	6938      	ldr	r0, [r7, #16]
 8002848:	f7fe fa28 	bl	8000c9c <__aeabi_i2f>
 800284c:	4604      	mov	r4, r0
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fa1f 	bl	8000c94 <__aeabi_ui2f>
 8002856:	4603      	mov	r3, r0
 8002858:	4619      	mov	r1, r3
 800285a:	4620      	mov	r0, r4
 800285c:	f7fe fb26 	bl	8000eac <__aeabi_fdiv>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
	pMPU6500->gyroCal.z = (float) z / (float) numCalPoints;
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7fe fa17 	bl	8000c9c <__aeabi_i2f>
 800286e:	4604      	mov	r4, r0
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fa0e 	bl	8000c94 <__aeabi_ui2f>
 8002878:	4603      	mov	r3, r0
 800287a:	4619      	mov	r1, r3
 800287c:	4620      	mov	r0, r4
 800287e:	f7fe fb15 	bl	8000eac <__aeabi_fdiv>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	0000      	movs	r0, r0
 8002894:	0000      	movs	r0, r0
	...

08002898 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_readProcessedData(MPU6500_t *pMPU6500) {
 8002898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800289c:	b092      	sub	sp, #72	; 0x48
 800289e:	af06      	add	r7, sp, #24
 80028a0:	6078      	str	r0, [r7, #4]
// Get raw values from the IMU
	MPU6500_GetData(pMPU6500);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ff36 	bl	8002714 <MPU6500_GetData>

// Compensate for gyro offset
	pMPU6500->sensorData.gx = pMPU6500->rawData.gx - pMPU6500->gyroCal.x;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe f9f4 	bl	8000c9c <__aeabi_i2f>
 80028b4:	4602      	mov	r2, r0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7fe f937 	bl	8000b30 <__aeabi_fsub>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy = pMPU6500->rawData.gy - pMPU6500->gyroCal.y;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe f9e3 	bl	8000c9c <__aeabi_i2f>
 80028d6:	4602      	mov	r2, r0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f7fe f926 	bl	8000b30 <__aeabi_fsub>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz = pMPU6500->rawData.gz - pMPU6500->gyroCal.z;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f9d2 	bl	8000c9c <__aeabi_i2f>
 80028f8:	4602      	mov	r2, r0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f7fe f915 	bl	8000b30 <__aeabi_fsub>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28

// Convert gyro values to deg/s
	pMPU6500->sensorData.gx /= pMPU6500->sensorData.gScaleFactor;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f7fe fac7 	bl	8000eac <__aeabi_fdiv>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy /= pMPU6500->sensorData.gScaleFactor;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f7fe fabb 	bl	8000eac <__aeabi_fdiv>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz /= pMPU6500->sensorData.gScaleFactor;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f7fe faaf 	bl	8000eac <__aeabi_fdiv>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28

	// Convert gyro values to rad/s
	pMPU6500->sensorData.gx /= (pMPU6500->sensorData.gScaleFactor) * DEG_TO_RAD;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fd64 	bl	8000428 <__aeabi_f2d>
 8002960:	4604      	mov	r4, r0
 8002962:	460d      	mov	r5, r1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fd5d 	bl	8000428 <__aeabi_f2d>
 800296e:	a3a8      	add	r3, pc, #672	; (adr r3, 8002c10 <MPU_readProcessedData+0x378>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd fdb0 	bl	80004d8 <__aeabi_dmul>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4620      	mov	r0, r4
 800297e:	4629      	mov	r1, r5
 8002980:	f7fd fed4 	bl	800072c <__aeabi_ddiv>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f87c 	bl	8000a88 <__aeabi_d2f>
 8002990:	4602      	mov	r2, r0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	621a      	str	r2, [r3, #32]
	pMPU6500->sensorData.gy /= (pMPU6500->sensorData.gScaleFactor) * DEG_TO_RAD;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fd44 	bl	8000428 <__aeabi_f2d>
 80029a0:	4604      	mov	r4, r0
 80029a2:	460d      	mov	r5, r1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fd3d 	bl	8000428 <__aeabi_f2d>
 80029ae:	a398      	add	r3, pc, #608	; (adr r3, 8002c10 <MPU_readProcessedData+0x378>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fd90 	bl	80004d8 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4620      	mov	r0, r4
 80029be:	4629      	mov	r1, r5
 80029c0:	f7fd feb4 	bl	800072c <__aeabi_ddiv>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe f85c 	bl	8000a88 <__aeabi_d2f>
 80029d0:	4602      	mov	r2, r0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
	pMPU6500->sensorData.gz /= (pMPU6500->sensorData.gScaleFactor) * DEG_TO_RAD;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fd24 	bl	8000428 <__aeabi_f2d>
 80029e0:	4604      	mov	r4, r0
 80029e2:	460d      	mov	r5, r1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fd1d 	bl	8000428 <__aeabi_f2d>
 80029ee:	a388      	add	r3, pc, #544	; (adr r3, 8002c10 <MPU_readProcessedData+0x378>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd fd70 	bl	80004d8 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4620      	mov	r0, r4
 80029fe:	4629      	mov	r1, r5
 8002a00:	f7fd fe94 	bl	800072c <__aeabi_ddiv>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7fe f83c 	bl	8000a88 <__aeabi_d2f>
 8002a10:	4602      	mov	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28

	gyr_rps[0] = -pMPU6500->sensorData.gy;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a1e:	4a7e      	ldr	r2, [pc, #504]	; (8002c18 <MPU_readProcessedData+0x380>)
 8002a20:	6013      	str	r3, [r2, #0]
	gyr_rps[1] = -pMPU6500->sensorData.gx;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a2a:	4a7b      	ldr	r2, [pc, #492]	; (8002c18 <MPU_readProcessedData+0x380>)
 8002a2c:	6053      	str	r3, [r2, #4]
	gyr_rps[2] = -pMPU6500->sensorData.gz;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a36:	4a78      	ldr	r2, [pc, #480]	; (8002c18 <MPU_readProcessedData+0x380>)
 8002a38:	6093      	str	r3, [r2, #8]

	myprintf("Gyro axis to Euler axis mapping: Egx, Egy, Egz\r\n");
 8002a3a:	4878      	ldr	r0, [pc, #480]	; (8002c1c <MPU_readProcessedData+0x384>)
 8002a3c:	f000 fcc4 	bl	80033c8 <myprintf>
	for (int i = 0; i < 3; i++) {
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a44:	e00e      	b.n	8002a64 <MPU_readProcessedData+0x1cc>
		myprintf("%d\r\t", (int) gyr_rps[i]);
 8002a46:	4a74      	ldr	r2, [pc, #464]	; (8002c18 <MPU_readProcessedData+0x380>)
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fb54 	bl	80010fc <__aeabi_f2iz>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4619      	mov	r1, r3
 8002a58:	4871      	ldr	r0, [pc, #452]	; (8002c20 <MPU_readProcessedData+0x388>)
 8002a5a:	f000 fcb5 	bl	80033c8 <myprintf>
	for (int i = 0; i < 3; i++) {
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a60:	3301      	adds	r3, #1
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	dded      	ble.n	8002a46 <MPU_readProcessedData+0x1ae>
	}
	myprintf("\n");
 8002a6a:	486e      	ldr	r0, [pc, #440]	; (8002c24 <MPU_readProcessedData+0x38c>)
 8002a6c:	f000 fcac 	bl	80033c8 <myprintf>

	// Convert accelerometer values to g's
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f9b3 3000 	ldrsh.w	r3, [r3]
			/ pMPU6500->sensorData.aScaleFactor;
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f910 	bl	8000c9c <__aeabi_i2f>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f7fe fa11 	bl	8000eac <__aeabi_fdiv>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
	pMPU6500->sensorData.ax = pMPU6500->rawData.ax
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	615a      	str	r2, [r3, #20]
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			/ pMPU6500->sensorData.aScaleFactor;
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f8ff 	bl	8000c9c <__aeabi_i2f>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f7fe fa00 	bl	8000eac <__aeabi_fdiv>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461a      	mov	r2, r3
	pMPU6500->sensorData.ay = pMPU6500->rawData.ay
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			/ pMPU6500->sensorData.aScaleFactor;
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f8ee 	bl	8000c9c <__aeabi_i2f>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4610      	mov	r0, r2
 8002aca:	f7fe f9ef 	bl	8000eac <__aeabi_fdiv>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
	pMPU6500->sensorData.az = pMPU6500->rawData.az
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	61da      	str	r2, [r3, #28]

	acc_mps2[0] = -pMPU6500->sensorData.ay;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ade:	4a52      	ldr	r2, [pc, #328]	; (8002c28 <MPU_readProcessedData+0x390>)
 8002ae0:	6013      	str	r3, [r2, #0]
	acc_mps2[1] = -pMPU6500->sensorData.ax;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002aea:	4a4f      	ldr	r2, [pc, #316]	; (8002c28 <MPU_readProcessedData+0x390>)
 8002aec:	6053      	str	r3, [r2, #4]
	acc_mps2[2] = -pMPU6500->sensorData.az;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002af6:	4a4c      	ldr	r2, [pc, #304]	; (8002c28 <MPU_readProcessedData+0x390>)
 8002af8:	6093      	str	r3, [r2, #8]

	myprintf(" Accel axis to Euler axis mapping: Ay, Ax, Az\r\n");
 8002afa:	484c      	ldr	r0, [pc, #304]	; (8002c2c <MPU_readProcessedData+0x394>)
 8002afc:	f000 fc64 	bl	80033c8 <myprintf>
	for (int i = 0; i < 3; i++) {
 8002b00:	2300      	movs	r3, #0
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b04:	e00e      	b.n	8002b24 <MPU_readProcessedData+0x28c>
		myprintf("%d\r\t", (int) acc_mps2[i]);
 8002b06:	4a48      	ldr	r2, [pc, #288]	; (8002c28 <MPU_readProcessedData+0x390>)
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe faf4 	bl	80010fc <__aeabi_f2iz>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4619      	mov	r1, r3
 8002b18:	4841      	ldr	r0, [pc, #260]	; (8002c20 <MPU_readProcessedData+0x388>)
 8002b1a:	f000 fc55 	bl	80033c8 <myprintf>
	for (int i = 0; i < 3; i++) {
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	3301      	adds	r3, #1
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	dded      	ble.n	8002b06 <MPU_readProcessedData+0x26e>
	}
	myprintf("\n");
 8002b2a:	483e      	ldr	r0, [pc, #248]	; (8002c24 <MPU_readProcessedData+0x38c>)
 8002b2c:	f000 fc4c 	bl	80033c8 <myprintf>

	myprintf("\nRCFilter Init:\r\n");
 8002b30:	483f      	ldr	r0, [pc, #252]	; (8002c30 <MPU_readProcessedData+0x398>)
 8002b32:	f000 fc49 	bl	80033c8 <myprintf>
	myprintf("Coeff and Out: %f %f out: %f %f\r\n", myRCFilter.coeff[0],
 8002b36:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <MPU_readProcessedData+0x39c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fc74 	bl	8000428 <__aeabi_f2d>
 8002b40:	4682      	mov	sl, r0
 8002b42:	468b      	mov	fp, r1
			myRCFilter.coeff[1], myRCFilter.out[0], myRCFilter.out[1]);
 8002b44:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <MPU_readProcessedData+0x39c>)
 8002b46:	685b      	ldr	r3, [r3, #4]
	myprintf("Coeff and Out: %f %f out: %f %f\r\n", myRCFilter.coeff[0],
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fc6d 	bl	8000428 <__aeabi_f2d>
 8002b4e:	4604      	mov	r4, r0
 8002b50:	460d      	mov	r5, r1
			myRCFilter.coeff[1], myRCFilter.out[0], myRCFilter.out[1]);
 8002b52:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <MPU_readProcessedData+0x39c>)
 8002b54:	689b      	ldr	r3, [r3, #8]
	myprintf("Coeff and Out: %f %f out: %f %f\r\n", myRCFilter.coeff[0],
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fc66 	bl	8000428 <__aeabi_f2d>
 8002b5c:	4680      	mov	r8, r0
 8002b5e:	4689      	mov	r9, r1
			myRCFilter.coeff[1], myRCFilter.out[0], myRCFilter.out[1]);
 8002b60:	4b34      	ldr	r3, [pc, #208]	; (8002c34 <MPU_readProcessedData+0x39c>)
 8002b62:	68db      	ldr	r3, [r3, #12]
	myprintf("Coeff and Out: %f %f out: %f %f\r\n", myRCFilter.coeff[0],
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fc5f 	bl	8000428 <__aeabi_f2d>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b72:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002b76:	e9cd 4500 	strd	r4, r5, [sp]
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	465b      	mov	r3, fp
 8002b7e:	482e      	ldr	r0, [pc, #184]	; (8002c38 <MPU_readProcessedData+0x3a0>)
 8002b80:	f000 fc22 	bl	80033c8 <myprintf>
	myprintf("Cutoff Freq: %f\r\n", cutoffFreqHz);
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <MPU_readProcessedData+0x3a4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fc4d 	bl	8000428 <__aeabi_f2d>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	482b      	ldr	r0, [pc, #172]	; (8002c40 <MPU_readProcessedData+0x3a8>)
 8002b94:	f000 fc18 	bl	80033c8 <myprintf>
	myprintf("Sample Time: %f\r\n", sampleTimeS);
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <MPU_readProcessedData+0x3ac>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fc43 	bl	8000428 <__aeabi_f2d>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4828      	ldr	r0, [pc, #160]	; (8002c48 <MPU_readProcessedData+0x3b0>)
 8002ba8:	f000 fc0e 	bl	80033c8 <myprintf>
	RCFilter Filter;
	RCFilter_Init(&Filter, cutoffFreqHz, sampleTimeS);
 8002bac:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <MPU_readProcessedData+0x3a4>)
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <MPU_readProcessedData+0x3ac>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	f107 030c 	add.w	r3, r7, #12
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fb8d 	bl	80032d8 <RCFilter_Init>
	myprintf("RCFilter Init complete\r\n");
 8002bbe:	4823      	ldr	r0, [pc, #140]	; (8002c4c <MPU_readProcessedData+0x3b4>)
 8002bc0:	f000 fc02 	bl	80033c8 <myprintf>

	myprintf("\nEKF Filter Init\n:");
 8002bc4:	4822      	ldr	r0, [pc, #136]	; (8002c50 <MPU_readProcessedData+0x3b8>)
 8002bc6:	f000 fbff 	bl	80033c8 <myprintf>
	myprintf("Value of Initial State co-varience\n");
 8002bca:	4822      	ldr	r0, [pc, #136]	; (8002c54 <MPU_readProcessedData+0x3bc>)
 8002bcc:	f000 fbfc 	bl	80033c8 <myprintf>
	for (int i = 0; i < 2; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd4:	e00e      	b.n	8002bf4 <MPU_readProcessedData+0x35c>
		myprintf("%.2f\r\t", P[i]);
 8002bd6:	4a20      	ldr	r2, [pc, #128]	; (8002c58 <MPU_readProcessedData+0x3c0>)
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fc22 	bl	8000428 <__aeabi_f2d>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	481c      	ldr	r0, [pc, #112]	; (8002c5c <MPU_readProcessedData+0x3c4>)
 8002bea:	f000 fbed 	bl	80033c8 <myprintf>
	for (int i = 0; i < 2; i++) {
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	dded      	ble.n	8002bd6 <MPU_readProcessedData+0x33e>
	}
	myprintf("\n");
 8002bfa:	480a      	ldr	r0, [pc, #40]	; (8002c24 <MPU_readProcessedData+0x38c>)
 8002bfc:	f000 fbe4 	bl	80033c8 <myprintf>
	myprintf("Process Noise co-varience\n");
 8002c00:	4817      	ldr	r0, [pc, #92]	; (8002c60 <MPU_readProcessedData+0x3c8>)
 8002c02:	f000 fbe1 	bl	80033c8 <myprintf>
	for (int i = 0; i < 2; i++) {
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	e03a      	b.n	8002c82 <MPU_readProcessedData+0x3ea>
 8002c0c:	f3af 8000 	nop.w
 8002c10:	a2529d39 	.word	0xa2529d39
 8002c14:	3f91df46 	.word	0x3f91df46
 8002c18:	20000390 	.word	0x20000390
 8002c1c:	0800b258 	.word	0x0800b258
 8002c20:	0800b28c 	.word	0x0800b28c
 8002c24:	0800b294 	.word	0x0800b294
 8002c28:	20000344 	.word	0x20000344
 8002c2c:	0800b298 	.word	0x0800b298
 8002c30:	0800b2c8 	.word	0x0800b2c8
 8002c34:	200003d8 	.word	0x200003d8
 8002c38:	0800b2dc 	.word	0x0800b2dc
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	0800b300 	.word	0x0800b300
 8002c44:	20000004 	.word	0x20000004
 8002c48:	0800b314 	.word	0x0800b314
 8002c4c:	0800b328 	.word	0x0800b328
 8002c50:	0800b344 	.word	0x0800b344
 8002c54:	0800b358 	.word	0x0800b358
 8002c58:	20000008 	.word	0x20000008
 8002c5c:	0800b37c 	.word	0x0800b37c
 8002c60:	0800b384 	.word	0x0800b384
		myprintf("%.2f\r\t", Q[i]);
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <MPU_readProcessedData+0x444>)
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fbdb 	bl	8000428 <__aeabi_f2d>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	481a      	ldr	r0, [pc, #104]	; (8002ce0 <MPU_readProcessedData+0x448>)
 8002c78:	f000 fba6 	bl	80033c8 <myprintf>
	for (int i = 0; i < 2; i++) {
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	dded      	ble.n	8002c64 <MPU_readProcessedData+0x3cc>
	}
	myprintf("\n");
 8002c88:	4816      	ldr	r0, [pc, #88]	; (8002ce4 <MPU_readProcessedData+0x44c>)
 8002c8a:	f000 fb9d 	bl	80033c8 <myprintf>
	myprintf("Value of Measurement Noiseco-varience\n");
 8002c8e:	4816      	ldr	r0, [pc, #88]	; (8002ce8 <MPU_readProcessedData+0x450>)
 8002c90:	f000 fb9a 	bl	80033c8 <myprintf>
	for (int i = 0; i < 3; i++) {
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	e00e      	b.n	8002cb8 <MPU_readProcessedData+0x420>
		myprintf("%.2f\r\t", R[i]);
 8002c9a:	4a14      	ldr	r2, [pc, #80]	; (8002cec <MPU_readProcessedData+0x454>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fbc0 	bl	8000428 <__aeabi_f2d>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <MPU_readProcessedData+0x448>)
 8002cae:	f000 fb8b 	bl	80033c8 <myprintf>
	for (int i = 0; i < 3; i++) {
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	dded      	ble.n	8002c9a <MPU_readProcessedData+0x402>
	}
	EKF_Init(&ekf, P, Q, R);
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <MPU_readProcessedData+0x454>)
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <MPU_readProcessedData+0x444>)
 8002cc2:	490b      	ldr	r1, [pc, #44]	; (8002cf0 <MPU_readProcessedData+0x458>)
 8002cc4:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <MPU_readProcessedData+0x45c>)
 8002cc6:	f7fe fa3f 	bl	8001148 <EKF_Init>
	myprintf("\nEKF Filter Init Complete");
 8002cca:	480b      	ldr	r0, [pc, #44]	; (8002cf8 <MPU_readProcessedData+0x460>)
 8002ccc:	f000 fb7c 	bl	80033c8 <myprintf>
}
 8002cd0:	bf00      	nop
 8002cd2:	3730      	adds	r7, #48	; 0x30
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000010 	.word	0x20000010
 8002ce0:	0800b37c 	.word	0x0800b37c
 8002ce4:	0800b294 	.word	0x0800b294
 8002ce8:	0800b3a0 	.word	0x0800b3a0
 8002cec:	20000018 	.word	0x20000018
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	200002b4 	.word	0x200002b4
 8002cf8:	0800b3c8 	.word	0x0800b3c8
 8002cfc:	00000000 	.word	0x00000000

08002d00 <MPU_calcAttitude>:
uint8_t Mag_Data[6];

/// @brief Calculate the attitude of the sensor in degrees using a complementary filter
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
void MPU_calcAttitude(MPU6500_t *pMPU6500) {
 8002d00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d04:	b08e      	sub	sp, #56	; 0x38
 8002d06:	af02      	add	r7, sp, #8
 8002d08:	6078      	str	r0, [r7, #4]
// Read processed data
	MPU_readProcessedData(pMPU6500);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fdc4 	bl	8002898 <MPU_readProcessedData>
//
//	float Ym = magy * cos(rollRad) + magz * sin(rollRad);
//
//	pMPU6500->attitude.y = atan2(Ym, Xm) * RAD2DEG;

	Mag_Data[0] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_L_M);
 8002d10:	2128      	movs	r1, #40	; 0x28
 8002d12:	48a3      	ldr	r0, [pc, #652]	; (8002fa0 <MPU_calcAttitude+0x2a0>)
 8002d14:	f7ff fabc 	bl	8002290 <LSM9DS1_ReadReg>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4ba1      	ldr	r3, [pc, #644]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d1e:	701a      	strb	r2, [r3, #0]
	Mag_Data[1] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTX_H_M);
 8002d20:	2129      	movs	r1, #41	; 0x29
 8002d22:	489f      	ldr	r0, [pc, #636]	; (8002fa0 <MPU_calcAttitude+0x2a0>)
 8002d24:	f7ff fab4 	bl	8002290 <LSM9DS1_ReadReg>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b9d      	ldr	r3, [pc, #628]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d2e:	705a      	strb	r2, [r3, #1]
	Mag_Data[2] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_L_M);
 8002d30:	212a      	movs	r1, #42	; 0x2a
 8002d32:	489b      	ldr	r0, [pc, #620]	; (8002fa0 <MPU_calcAttitude+0x2a0>)
 8002d34:	f7ff faac 	bl	8002290 <LSM9DS1_ReadReg>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b99      	ldr	r3, [pc, #612]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d3e:	709a      	strb	r2, [r3, #2]
	Mag_Data[3] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTY_H_M);
 8002d40:	212b      	movs	r1, #43	; 0x2b
 8002d42:	4897      	ldr	r0, [pc, #604]	; (8002fa0 <MPU_calcAttitude+0x2a0>)
 8002d44:	f7ff faa4 	bl	8002290 <LSM9DS1_ReadReg>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b95      	ldr	r3, [pc, #596]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d4e:	70da      	strb	r2, [r3, #3]
	Mag_Data[4] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_L_M);
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	4893      	ldr	r0, [pc, #588]	; (8002fa0 <MPU_calcAttitude+0x2a0>)
 8002d54:	f7ff fa9c 	bl	8002290 <LSM9DS1_ReadReg>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b91      	ldr	r3, [pc, #580]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d5e:	711a      	strb	r2, [r3, #4]
	Mag_Data[5] = LSM9DS1_ReadReg(&hspi1, LSM9DS1_OUTZ_H_M);
 8002d60:	212d      	movs	r1, #45	; 0x2d
 8002d62:	488f      	ldr	r0, [pc, #572]	; (8002fa0 <MPU_calcAttitude+0x2a0>)
 8002d64:	f7ff fa94 	bl	8002290 <LSM9DS1_ReadReg>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b8d      	ldr	r3, [pc, #564]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d6e:	715a      	strb	r2, [r3, #5]

	mX = (int16_t) ((Mag_Data[1] << 8) | Mag_Data[0]);
 8002d70:	4b8c      	ldr	r3, [pc, #560]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	b21a      	sxth	r2, r3
 8002d78:	4b8a      	ldr	r3, [pc, #552]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	b21b      	sxth	r3, r3
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <MPU_calcAttitude+0x2a8>)
 8002d86:	801a      	strh	r2, [r3, #0]
	mY = (int16_t) ((Mag_Data[1] << 8) | Mag_Data[0]);
 8002d88:	4b86      	ldr	r3, [pc, #536]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	b21a      	sxth	r2, r3
 8002d90:	4b84      	ldr	r3, [pc, #528]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b21b      	sxth	r3, r3
 8002d96:	4313      	orrs	r3, r2
 8002d98:	b21b      	sxth	r3, r3
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	4b83      	ldr	r3, [pc, #524]	; (8002fac <MPU_calcAttitude+0x2ac>)
 8002d9e:	801a      	strh	r2, [r3, #0]
	mZ = (int16_t) ((Mag_Data[1] << 8) | Mag_Data[0]);
 8002da0:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002da2:	785b      	ldrb	r3, [r3, #1]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	4b7e      	ldr	r3, [pc, #504]	; (8002fa4 <MPU_calcAttitude+0x2a4>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b21b      	sxth	r3, r3
 8002dae:	4313      	orrs	r3, r2
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <MPU_calcAttitude+0x2b0>)
 8002db6:	801a      	strh	r2, [r3, #0]

	magX = (float) (mX * LSM9DS1_SENSITIVITY);
 8002db8:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <MPU_calcAttitude+0x2a8>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd fb21 	bl	8000404 <__aeabi_i2d>
 8002dc2:	a375      	add	r3, pc, #468	; (adr r3, 8002f98 <MPU_calcAttitude+0x298>)
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f7fd fb86 	bl	80004d8 <__aeabi_dmul>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7fd fe58 	bl	8000a88 <__aeabi_d2f>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fb24 	bl	8000428 <__aeabi_f2d>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4973      	ldr	r1, [pc, #460]	; (8002fb4 <MPU_calcAttitude+0x2b4>)
 8002de6:	e9c1 2300 	strd	r2, r3, [r1]
	magY = (float) (mY * LSM9DS1_SENSITIVITY);
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <MPU_calcAttitude+0x2ac>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fb08 	bl	8000404 <__aeabi_i2d>
 8002df4:	a368      	add	r3, pc, #416	; (adr r3, 8002f98 <MPU_calcAttitude+0x298>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f7fd fb6d 	bl	80004d8 <__aeabi_dmul>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f7fd fe3f 	bl	8000a88 <__aeabi_d2f>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fb0b 	bl	8000428 <__aeabi_f2d>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4968      	ldr	r1, [pc, #416]	; (8002fb8 <MPU_calcAttitude+0x2b8>)
 8002e18:	e9c1 2300 	strd	r2, r3, [r1]
	magZ = (float) (mZ * LSM9DS1_SENSITIVITY);
 8002e1c:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <MPU_calcAttitude+0x2b0>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd faef 	bl	8000404 <__aeabi_i2d>
 8002e26:	a35c      	add	r3, pc, #368	; (adr r3, 8002f98 <MPU_calcAttitude+0x298>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fb54 	bl	80004d8 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f7fd fe26 	bl	8000a88 <__aeabi_d2f>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd faf2 	bl	8000428 <__aeabi_f2d>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	495c      	ldr	r1, [pc, #368]	; (8002fbc <MPU_calcAttitude+0x2bc>)
 8002e4a:	e9c1 2300 	strd	r2, r3, [r1]
	/* Filter gyroscope data */
	RCFilter_Update(&lpfGyr[0], gyr_rps[0]);
 8002e4e:	4b5c      	ldr	r3, [pc, #368]	; (8002fc0 <MPU_calcAttitude+0x2c0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	485b      	ldr	r0, [pc, #364]	; (8002fc4 <MPU_calcAttitude+0x2c4>)
 8002e56:	f000 fa79 	bl	800334c <RCFilter_Update>
	RCFilter_Update(&lpfGyr[1], gyr_rps[1]);
 8002e5a:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <MPU_calcAttitude+0x2c0>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4859      	ldr	r0, [pc, #356]	; (8002fc8 <MPU_calcAttitude+0x2c8>)
 8002e62:	f000 fa73 	bl	800334c <RCFilter_Update>
	RCFilter_Update(&lpfGyr[2], gyr_rps[2]);
 8002e66:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <MPU_calcAttitude+0x2c0>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4857      	ldr	r0, [pc, #348]	; (8002fcc <MPU_calcAttitude+0x2cc>)
 8002e6e:	f000 fa6d 	bl	800334c <RCFilter_Update>

	//Filtered gyroscope measurement
	float p_rps = lpfGyr[0].out[0];
 8002e72:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <MPU_calcAttitude+0x2c4>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	float q_rps = lpfGyr[1].out[0];
 8002e78:	4b52      	ldr	r3, [pc, #328]	; (8002fc4 <MPU_calcAttitude+0x2c4>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
	float r_rps = lpfGyr[2].out[0];
 8002e7e:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <MPU_calcAttitude+0x2c4>)
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24

	EKF_Predict(&ekf, p_rps, q_rps, r_rps, sampleTimeS);
 8002e84:	4b52      	ldr	r3, [pc, #328]	; (8002fd0 <MPU_calcAttitude+0x2d0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e90:	4850      	ldr	r0, [pc, #320]	; (8002fd4 <MPU_calcAttitude+0x2d4>)
 8002e92:	f7fe f991 	bl	80011b8 <EKF_Predict>

	//Transform body rates to Euler rates to get estimate of roll and pitch angles
	float phiDot_rps = p_rps
			+ tanf(thetaHat_rad_)
 8002e96:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <MPU_calcAttitude+0x2d8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f005 feec 	bl	8008c78 <tanf>
 8002ea0:	4604      	mov	r4, r0
					* (sinf(phiHat_rad_) * q_rps + cosf(phiHat_rad_) * r_rps);
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <MPU_calcAttitude+0x2dc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f005 feb0 	bl	8008c0c <sinf>
 8002eac:	4603      	mov	r3, r0
 8002eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd ff47 	bl	8000d44 <__aeabi_fmul>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461d      	mov	r5, r3
 8002eba:	4b48      	ldr	r3, [pc, #288]	; (8002fdc <MPU_calcAttitude+0x2dc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f005 fe6c 	bl	8008b9c <cosf>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd ff3b 	bl	8000d44 <__aeabi_fmul>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f7fd fe2e 	bl	8000b34 <__addsf3>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4619      	mov	r1, r3
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7fd ff31 	bl	8000d44 <__aeabi_fmul>
 8002ee2:	4603      	mov	r3, r0
	float phiDot_rps = p_rps
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ee8:	f7fd fe24 	bl	8000b34 <__addsf3>
 8002eec:	4603      	mov	r3, r0
 8002eee:	623b      	str	r3, [r7, #32]
	float thetaDot_rps = cosf(phiHat_rad_) * q_rps - sinf(phiHat_rad_) * r_rps;
 8002ef0:	4b3a      	ldr	r3, [pc, #232]	; (8002fdc <MPU_calcAttitude+0x2dc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f005 fe51 	bl	8008b9c <cosf>
 8002efa:	4603      	mov	r3, r0
 8002efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd ff20 	bl	8000d44 <__aeabi_fmul>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461c      	mov	r4, r3
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <MPU_calcAttitude+0x2dc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f005 fe7d 	bl	8008c0c <sinf>
 8002f12:	4603      	mov	r3, r0
 8002f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd ff14 	bl	8000d44 <__aeabi_fmul>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7fd fe05 	bl	8000b30 <__aeabi_fsub>
 8002f26:	4603      	mov	r3, r0
 8002f28:	61fb      	str	r3, [r7, #28]

	//Integrate Euler rates to get estimate of roll and pitch angles
	phiHat_rad_ = (phiHat_rad_ + (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps)
 8002f2a:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <MPU_calcAttitude+0x2dc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a39      	ldr	r1, [r7, #32]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fdff 	bl	8000b34 <__addsf3>
 8002f36:	4603      	mov	r3, r0
			* RAD_TO_DEG;
 8002f38:	4929      	ldr	r1, [pc, #164]	; (8002fe0 <MPU_calcAttitude+0x2e0>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd ff02 	bl	8000d44 <__aeabi_fmul>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
	phiHat_rad_ = (phiHat_rad_ + (SAMPLE_TIME_MS_USB_ / 1000.0f) * phiDot_rps)
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <MPU_calcAttitude+0x2dc>)
 8002f46:	601a      	str	r2, [r3, #0]
	thetaHat_rad_ = (thetaHat_rad_
			+ (SAMPLE_TIME_MS_USB_ / 1000.0F) * thetaDot_rps) * RAD_TO_DEG;
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <MPU_calcAttitude+0x2d8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69f9      	ldr	r1, [r7, #28]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd fdf0 	bl	8000b34 <__addsf3>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4922      	ldr	r1, [pc, #136]	; (8002fe0 <MPU_calcAttitude+0x2e0>)
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd fef3 	bl	8000d44 <__aeabi_fmul>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
	thetaHat_rad_ = (thetaHat_rad_
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <MPU_calcAttitude+0x2d8>)
 8002f64:	601a      	str	r2, [r3, #0]

	/* Filter accelerometer data */
	RCFilter_Update(&lpfAcc[0], acc_mps2[0]);
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <MPU_calcAttitude+0x2e4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	481e      	ldr	r0, [pc, #120]	; (8002fe8 <MPU_calcAttitude+0x2e8>)
 8002f6e:	f000 f9ed 	bl	800334c <RCFilter_Update>
	RCFilter_Update(&lpfAcc[1], acc_mps2[1]);
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <MPU_calcAttitude+0x2e4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4619      	mov	r1, r3
 8002f78:	481c      	ldr	r0, [pc, #112]	; (8002fec <MPU_calcAttitude+0x2ec>)
 8002f7a:	f000 f9e7 	bl	800334c <RCFilter_Update>
	RCFilter_Update(&lpfAcc[2], acc_mps2[2]);
 8002f7e:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <MPU_calcAttitude+0x2e4>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4619      	mov	r1, r3
 8002f84:	481a      	ldr	r0, [pc, #104]	; (8002ff0 <MPU_calcAttitude+0x2f0>)
 8002f86:	f000 f9e1 	bl	800334c <RCFilter_Update>

	//Filtered accelerometer measurement
	float ax_mps2 = lpfAcc[0].out[0];
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <MPU_calcAttitude+0x2e8>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
	float ay_mps2 = lpfAcc[1].out[0];
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <MPU_calcAttitude+0x2e8>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	e02e      	b.n	8002ff4 <MPU_calcAttitude+0x2f4>
 8002f96:	bf00      	nop
 8002f98:	ed1f417e 	.word	0xed1f417e
 8002f9c:	3f3ffffe 	.word	0x3f3ffffe
 8002fa0:	2000043c 	.word	0x2000043c
 8002fa4:	200003cc 	.word	0x200003cc
 8002fa8:	200003d4 	.word	0x200003d4
 8002fac:	20000350 	.word	0x20000350
 8002fb0:	20000340 	.word	0x20000340
 8002fb4:	200003e8 	.word	0x200003e8
 8002fb8:	200002e0 	.word	0x200002e0
 8002fbc:	20000358 	.word	0x20000358
 8002fc0:	20000390 	.word	0x20000390
 8002fc4:	20000360 	.word	0x20000360
 8002fc8:	20000370 	.word	0x20000370
 8002fcc:	20000380 	.word	0x20000380
 8002fd0:	20000004 	.word	0x20000004
 8002fd4:	200002b4 	.word	0x200002b4
 8002fd8:	20000240 	.word	0x20000240
 8002fdc:	2000023c 	.word	0x2000023c
 8002fe0:	42652ee1 	.word	0x42652ee1
 8002fe4:	20000344 	.word	0x20000344
 8002fe8:	2000039c 	.word	0x2000039c
 8002fec:	200003ac 	.word	0x200003ac
 8002ff0:	200003bc 	.word	0x200003bc
 8002ff4:	617b      	str	r3, [r7, #20]
	float az_mps2 = lpfAcc[2].out[0];
 8002ff6:	4b8b      	ldr	r3, [pc, #556]	; (8003224 <MPU_calcAttitude+0x524>)
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	613b      	str	r3, [r7, #16]

	EKF_Update(&ekf, ax_mps2, ay_mps2, az_mps2);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	69b9      	ldr	r1, [r7, #24]
 8003002:	4889      	ldr	r0, [pc, #548]	; (8003228 <MPU_calcAttitude+0x528>)
 8003004:	f7fe fa89 	bl	800151a <EKF_Update>

	/*Calculate roll (phi) and pitch(theta) angle estimates using filtered accelerometer readings*/
	phiHat_deg_ = atanf(ay_mps2 / az_mps2) * RAD_TO_DEG;
 8003008:	6939      	ldr	r1, [r7, #16]
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f7fd ff4e 	bl	8000eac <__aeabi_fdiv>
 8003010:	4603      	mov	r3, r0
 8003012:	4618      	mov	r0, r3
 8003014:	f005 fcb6 	bl	8008984 <atanf>
 8003018:	4603      	mov	r3, r0
 800301a:	4984      	ldr	r1, [pc, #528]	; (800322c <MPU_calcAttitude+0x52c>)
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fe91 	bl	8000d44 <__aeabi_fmul>
 8003022:	4603      	mov	r3, r0
 8003024:	461a      	mov	r2, r3
 8003026:	4b82      	ldr	r3, [pc, #520]	; (8003230 <MPU_calcAttitude+0x530>)
 8003028:	601a      	str	r2, [r3, #0]
	thetaHat_deg_ = asinf(ax_mps2 / G_MPS2) * RAD_TO_DEG;
 800302a:	4982      	ldr	r1, [pc, #520]	; (8003234 <MPU_calcAttitude+0x534>)
 800302c:	69b8      	ldr	r0, [r7, #24]
 800302e:	f7fd ff3d 	bl	8000eac <__aeabi_fdiv>
 8003032:	4603      	mov	r3, r0
 8003034:	4618      	mov	r0, r3
 8003036:	f005 fe43 	bl	8008cc0 <asinf>
 800303a:	4603      	mov	r3, r0
 800303c:	497b      	ldr	r1, [pc, #492]	; (800322c <MPU_calcAttitude+0x52c>)
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fe80 	bl	8000d44 <__aeabi_fmul>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	4b7b      	ldr	r3, [pc, #492]	; (8003238 <MPU_calcAttitude+0x538>)
 800304a:	601a      	str	r2, [r3, #0]

	float Xm = mX * cos(thetaHat_deg_)
 800304c:	4b7b      	ldr	r3, [pc, #492]	; (800323c <MPU_calcAttitude+0x53c>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd f9d7 	bl	8000404 <__aeabi_i2d>
 8003056:	4604      	mov	r4, r0
 8003058:	460d      	mov	r5, r1
 800305a:	4b77      	ldr	r3, [pc, #476]	; (8003238 <MPU_calcAttitude+0x538>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd f9e2 	bl	8000428 <__aeabi_f2d>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	f005 fc02 	bl	8008874 <cos>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4620      	mov	r0, r4
 8003076:	4629      	mov	r1, r5
 8003078:	f7fd fa2e 	bl	80004d8 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4690      	mov	r8, r2
 8003082:	4699      	mov	r9, r3
			- mY * sin(phiHat_deg_) * sin(thetaHat_deg_)
 8003084:	4b6e      	ldr	r3, [pc, #440]	; (8003240 <MPU_calcAttitude+0x540>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd f9bb 	bl	8000404 <__aeabi_i2d>
 800308e:	4604      	mov	r4, r0
 8003090:	460d      	mov	r5, r1
 8003092:	4b67      	ldr	r3, [pc, #412]	; (8003230 <MPU_calcAttitude+0x530>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd f9c6 	bl	8000428 <__aeabi_f2d>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f005 fc28 	bl	80088f8 <sin>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4620      	mov	r0, r4
 80030ae:	4629      	mov	r1, r5
 80030b0:	f7fd fa12 	bl	80004d8 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4b5e      	ldr	r3, [pc, #376]	; (8003238 <MPU_calcAttitude+0x538>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd f9b1 	bl	8000428 <__aeabi_f2d>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f005 fc13 	bl	80088f8 <sin>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4620      	mov	r0, r4
 80030d8:	4629      	mov	r1, r5
 80030da:	f7fd f9fd 	bl	80004d8 <__aeabi_dmul>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4640      	mov	r0, r8
 80030e4:	4649      	mov	r1, r9
 80030e6:	f7fd f83f 	bl	8000168 <__aeabi_dsub>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4690      	mov	r8, r2
 80030f0:	4699      	mov	r9, r3
			+ mZ * cos(phiHat_deg_) * sin(thetaHat_deg_);
 80030f2:	4b54      	ldr	r3, [pc, #336]	; (8003244 <MPU_calcAttitude+0x544>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd f984 	bl	8000404 <__aeabi_i2d>
 80030fc:	4604      	mov	r4, r0
 80030fe:	460d      	mov	r5, r1
 8003100:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <MPU_calcAttitude+0x530>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd f98f 	bl	8000428 <__aeabi_f2d>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f005 fbaf 	bl	8008874 <cos>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4620      	mov	r0, r4
 800311c:	4629      	mov	r1, r5
 800311e:	f7fd f9db 	bl	80004d8 <__aeabi_dmul>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4614      	mov	r4, r2
 8003128:	461d      	mov	r5, r3
 800312a:	4b43      	ldr	r3, [pc, #268]	; (8003238 <MPU_calcAttitude+0x538>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f97a 	bl	8000428 <__aeabi_f2d>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	f005 fbdc 	bl	80088f8 <sin>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4620      	mov	r0, r4
 8003146:	4629      	mov	r1, r5
 8003148:	f7fd f9c6 	bl	80004d8 <__aeabi_dmul>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4640      	mov	r0, r8
 8003152:	4649      	mov	r1, r9
 8003154:	f7fd f80a 	bl	800016c <__adddf3>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
	float Xm = mX * cos(thetaHat_deg_)
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f7fd fc92 	bl	8000a88 <__aeabi_d2f>
 8003164:	4603      	mov	r3, r0
 8003166:	60fb      	str	r3, [r7, #12]

	float Ym = mY * cos(phiHat_deg_) + mZ * sin(phiHat_deg_);
 8003168:	4b35      	ldr	r3, [pc, #212]	; (8003240 <MPU_calcAttitude+0x540>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f949 	bl	8000404 <__aeabi_i2d>
 8003172:	4604      	mov	r4, r0
 8003174:	460d      	mov	r5, r1
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <MPU_calcAttitude+0x530>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f954 	bl	8000428 <__aeabi_f2d>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	f005 fb74 	bl	8008874 <cos>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4620      	mov	r0, r4
 8003192:	4629      	mov	r1, r5
 8003194:	f7fd f9a0 	bl	80004d8 <__aeabi_dmul>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4690      	mov	r8, r2
 800319e:	4699      	mov	r9, r3
 80031a0:	4b28      	ldr	r3, [pc, #160]	; (8003244 <MPU_calcAttitude+0x544>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd f92d 	bl	8000404 <__aeabi_i2d>
 80031aa:	4604      	mov	r4, r0
 80031ac:	460d      	mov	r5, r1
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <MPU_calcAttitude+0x530>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f938 	bl	8000428 <__aeabi_f2d>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	f005 fb9a 	bl	80088f8 <sin>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4620      	mov	r0, r4
 80031ca:	4629      	mov	r1, r5
 80031cc:	f7fd f984 	bl	80004d8 <__aeabi_dmul>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4640      	mov	r0, r8
 80031d6:	4649      	mov	r1, r9
 80031d8:	f7fc ffc8 	bl	800016c <__adddf3>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd fc50 	bl	8000a88 <__aeabi_d2f>
 80031e8:	4603      	mov	r3, r0
 80031ea:	60bb      	str	r3, [r7, #8]

	pMPU6500->attitude.y = atan2(Ym, Xm);
 80031ec:	68b8      	ldr	r0, [r7, #8]
 80031ee:	f7fd f91b 	bl	8000428 <__aeabi_f2d>
 80031f2:	4604      	mov	r4, r0
 80031f4:	460d      	mov	r5, r1
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7fd f916 	bl	8000428 <__aeabi_f2d>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4620      	mov	r0, r4
 8003202:	4629      	mov	r1, r5
 8003204:	f005 fd5a 	bl	8008cbc <atan2>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	f7fd fc3a 	bl	8000a88 <__aeabi_d2f>
 8003214:	4602      	mov	r2, r0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	649a      	str	r2, [r3, #72]	; 0x48

}
 800321a:	bf00      	nop
 800321c:	3730      	adds	r7, #48	; 0x30
 800321e:	46bd      	mov	sp, r7
 8003220:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003224:	2000039c 	.word	0x2000039c
 8003228:	200002b4 	.word	0x200002b4
 800322c:	42652ee1 	.word	0x42652ee1
 8003230:	20000234 	.word	0x20000234
 8003234:	411cf5c3 	.word	0x411cf5c3
 8003238:	20000238 	.word	0x20000238
 800323c:	200003d4 	.word	0x200003d4
 8003240:	20000350 	.word	0x20000350
 8003244:	20000340 	.word	0x20000340

08003248 <IMU_Setup>:

void IMU_Setup() {
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0

	LSM9DS1_Init(&IMU_STREAM, 0x60); // ±16 Gauss full scale, 20Hz ODR, Continuous conversion mode
 800324c:	2160      	movs	r1, #96	; 0x60
 800324e:	481a      	ldr	r0, [pc, #104]	; (80032b8 <IMU_Setup+0x70>)
 8003250:	f7ff f872 	bl	8002338 <LSM9DS1_Init>
	HAL_Delay(1000);
 8003254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003258:	f000 fc56 	bl	8003b08 <HAL_Delay>

	if (MPU_begin(&IMU_STREAM, &MPU6500) != TRUE) {
 800325c:	4917      	ldr	r1, [pc, #92]	; (80032bc <IMU_Setup+0x74>)
 800325e:	4816      	ldr	r0, [pc, #88]	; (80032b8 <IMU_Setup+0x70>)
 8003260:	f7ff f892 	bl	8002388 <MPU_begin>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d00e      	beq.n	8003288 <IMU_Setup+0x40>
		sprintf((char*) serialBuf, "ERROR!\r\n");
 800326a:	4915      	ldr	r1, [pc, #84]	; (80032c0 <IMU_Setup+0x78>)
 800326c:	4815      	ldr	r0, [pc, #84]	; (80032c4 <IMU_Setup+0x7c>)
 800326e:	f003 f88d 	bl	800638c <siprintf>
		HAL_UART_Transmit(&DEBUG_STREAM, serialBuf, strlen((char*) serialBuf),
 8003272:	4814      	ldr	r0, [pc, #80]	; (80032c4 <IMU_Setup+0x7c>)
 8003274:	f7fc ff6c 	bl	8000150 <strlen>
 8003278:	4603      	mov	r3, r0
 800327a:	b29a      	uxth	r2, r3
 800327c:	2364      	movs	r3, #100	; 0x64
 800327e:	4911      	ldr	r1, [pc, #68]	; (80032c4 <IMU_Setup+0x7c>)
 8003280:	4811      	ldr	r0, [pc, #68]	; (80032c8 <IMU_Setup+0x80>)
 8003282:	f002 fa71 	bl	8005768 <HAL_UART_Transmit>
 8003286:	e002      	b.n	800328e <IMU_Setup+0x46>
				100);
	} else {
		myprintf("MPU6500 Initialization Complete\r\n");
 8003288:	4810      	ldr	r0, [pc, #64]	; (80032cc <IMU_Setup+0x84>)
 800328a:	f000 f89d 	bl	80033c8 <myprintf>
	}

//	 Calibrate the IMU
	myprintf("Calibrating sensors.\r\n");
 800328e:	4810      	ldr	r0, [pc, #64]	; (80032d0 <IMU_Setup+0x88>)
 8003290:	f000 f89a 	bl	80033c8 <myprintf>
	HAL_Delay(1);
 8003294:	2001      	movs	r0, #1
 8003296:	f000 fc37 	bl	8003b08 <HAL_Delay>
	MPU_calibrateGyro(&MPU6500, 1500);
 800329a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800329e:	4807      	ldr	r0, [pc, #28]	; (80032bc <IMU_Setup+0x74>)
 80032a0:	f7ff fa8a 	bl	80027b8 <MPU_calibrateGyro>
	HAL_Delay(1000);
 80032a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032a8:	f000 fc2e 	bl	8003b08 <HAL_Delay>
	myprintf("Calibration  Complete\r\n");
 80032ac:	4809      	ldr	r0, [pc, #36]	; (80032d4 <IMU_Setup+0x8c>)
 80032ae:	f000 f88b 	bl	80033c8 <myprintf>

}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	2000043c 	.word	0x2000043c
 80032bc:	200002e8 	.word	0x200002e8
 80032c0:	0800b3e4 	.word	0x0800b3e4
 80032c4:	20000510 	.word	0x20000510
 80032c8:	200003f4 	.word	0x200003f4
 80032cc:	0800b3f0 	.word	0x0800b3f0
 80032d0:	0800b414 	.word	0x0800b414
 80032d4:	0800b42c 	.word	0x0800b42c

080032d8 <RCFilter_Init>:
 */

#include "RCFilter.h"


void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (6.28318530718f * cutoffFreqHz);
 80032e4:	4918      	ldr	r1, [pc, #96]	; (8003348 <RCFilter_Init+0x70>)
 80032e6:	68b8      	ldr	r0, [r7, #8]
 80032e8:	f7fd fd2c 	bl	8000d44 <__aeabi_fmul>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4619      	mov	r1, r3
 80032f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80032f4:	f7fd fdda 	bl	8000eac <__aeabi_fdiv>
 80032f8:	4603      	mov	r3, r0
 80032fa:	617b      	str	r3, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 80032fc:	6979      	ldr	r1, [r7, #20]
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd fc18 	bl	8000b34 <__addsf3>
 8003304:	4603      	mov	r3, r0
 8003306:	4619      	mov	r1, r3
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd fdcf 	bl	8000eac <__aeabi_fdiv>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	601a      	str	r2, [r3, #0]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 8003316:	6979      	ldr	r1, [r7, #20]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fd fc0b 	bl	8000b34 <__addsf3>
 800331e:	4603      	mov	r3, r0
 8003320:	4619      	mov	r1, r3
 8003322:	6978      	ldr	r0, [r7, #20]
 8003324:	f7fd fdc2 	bl	8000eac <__aeabi_fdiv>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	605a      	str	r2, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	60da      	str	r2, [r3, #12]

}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40c90fdb 	.word	0x40c90fdb

0800334c <RCFilter_Update>:

float RCFilter_Update(RCFilter *filt, float inp) {
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]

	/* Shift output samples */
	filt->out[1] = filt->out[0];
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60da      	str	r2, [r3, #12]

	/* Compute new output sample */
	filt->out[0] = filt->coeff[0] * inp + filt->coeff[1] * filt->out[1];
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6839      	ldr	r1, [r7, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd fced 	bl	8000d44 <__aeabi_fmul>
 800336a:	4603      	mov	r3, r0
 800336c:	461c      	mov	r4, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f7fd fce3 	bl	8000d44 <__aeabi_fmul>
 800337e:	4603      	mov	r3, r0
 8003380:	4619      	mov	r1, r3
 8003382:	4620      	mov	r0, r4
 8003384:	f7fd fbd6 	bl	8000b34 <__addsf3>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]

	/* Return filtered sample */
	return (filt->out[0]);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]

}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}

0800339c <buffersize>:
 * @brief	counts the number of non-null data in given array
 *
 * @param	buff	pointer to the array of data to be counted
 * @retval	int		number of non-null values in the array
 */
int buffersize(char *buff) {
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 80033a8:	e002      	b.n	80033b0 <buffersize+0x14>
		i++;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f6      	bne.n	80033aa <buffersize+0xe>
	return i;
 80033bc:	68fb      	ldr	r3, [r7, #12]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <myprintf>:
 *
 * @param	fmt	pointer the array of characters data to be transmitted
 *
 * @retval	none
 */
void myprintf(const char *fmt, ...) {
 80033c8:	b40f      	push	{r0, r1, r2, r3}
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
	static char temp[100];
		va_list args;
		va_start(args, fmt);
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	603b      	str	r3, [r7, #0]
		vsnprintf(temp, sizeof(temp), fmt, args);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	2164      	movs	r1, #100	; 0x64
 80033dc:	480a      	ldr	r0, [pc, #40]	; (8003408 <myprintf+0x40>)
 80033de:	f003 f821 	bl	8006424 <vsniprintf>
		va_end(args);
		int len = buffersize(temp);
 80033e2:	4809      	ldr	r0, [pc, #36]	; (8003408 <myprintf+0x40>)
 80033e4:	f7ff ffda 	bl	800339c <buffersize>
 80033e8:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&DEBUG_STREAM, (uint8_t*) temp, len, 1000);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f2:	4905      	ldr	r1, [pc, #20]	; (8003408 <myprintf+0x40>)
 80033f4:	4805      	ldr	r0, [pc, #20]	; (800340c <myprintf+0x44>)
 80033f6:	f002 f9b7 	bl	8005768 <HAL_UART_Transmit>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003404:	b004      	add	sp, #16
 8003406:	4770      	bx	lr
 8003408:	20000244 	.word	0x20000244
 800340c:	200003f4 	.word	0x200003f4

08003410 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003414:	f000 fb16 	bl	8003a44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003418:	f000 f81a 	bl	8003450 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800341c:	f000 f8be 	bl	800359c <MX_GPIO_Init>
	MX_SPI1_Init();
 8003420:	f000 f85c 	bl	80034dc <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8003424:	f000 f890 	bl	8003548 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	whoAmI();
 8003428:	f7ff f896 	bl	8002558 <whoAmI>
	MPU_begin(&IMU_STREAM, &MPU6500);
 800342c:	4906      	ldr	r1, [pc, #24]	; (8003448 <main+0x38>)
 800342e:	4807      	ldr	r0, [pc, #28]	; (800344c <main+0x3c>)
 8003430:	f7fe ffaa 	bl	8002388 <MPU_begin>
	IMU_Setup();
 8003434:	f7ff ff08 	bl	8003248 <IMU_Setup>
	HAL_Delay(1000);
 8003438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800343c:	f000 fb64 	bl	8003b08 <HAL_Delay>
	MPU_calcAttitude(&MPU6500);
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <main+0x38>)
 8003442:	f7ff fc5d 	bl	8002d00 <MPU_calcAttitude>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003446:	e7fe      	b.n	8003446 <main+0x36>
 8003448:	200002e8 	.word	0x200002e8
 800344c:	2000043c 	.word	0x2000043c

08003450 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b090      	sub	sp, #64	; 0x40
 8003454:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003456:	f107 0318 	add.w	r3, r7, #24
 800345a:	2228      	movs	r2, #40	; 0x28
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f002 fb2c 	bl	8005abc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003472:	2301      	movs	r3, #1
 8003474:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800347a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800347c:	2300      	movs	r3, #0
 800347e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003480:	2301      	movs	r3, #1
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003484:	2302      	movs	r3, #2
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800348c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800348e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003494:	f107 0318 	add.w	r3, r7, #24
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fe7b 	bl	8004194 <HAL_RCC_OscConfig>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <SystemClock_Config+0x58>
		Error_Handler();
 80034a4:	f000 f8da 	bl	800365c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80034a8:	230f      	movs	r3, #15
 80034aa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ac:	2302      	movs	r3, #2
 80034ae:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	2102      	movs	r1, #2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f8e6 	bl	8004694 <HAL_RCC_ClockConfig>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <SystemClock_Config+0x82>
		Error_Handler();
 80034ce:	f000 f8c5 	bl	800365c <Error_Handler>
	}
}
 80034d2:	bf00      	nop
 80034d4:	3740      	adds	r7, #64	; 0x40
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <MX_SPI1_Init+0x64>)
 80034e2:	4a18      	ldr	r2, [pc, #96]	; (8003544 <MX_SPI1_Init+0x68>)
 80034e4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <MX_SPI1_Init+0x64>)
 80034e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034ec:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <MX_SPI1_Init+0x64>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <MX_SPI1_Init+0x64>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <MX_SPI1_Init+0x64>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <MX_SPI1_Init+0x64>)
 8003502:	2200      	movs	r2, #0
 8003504:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <MX_SPI1_Init+0x64>)
 8003508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <MX_SPI1_Init+0x64>)
 8003510:	2220      	movs	r2, #32
 8003512:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <MX_SPI1_Init+0x64>)
 8003516:	2200      	movs	r2, #0
 8003518:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <MX_SPI1_Init+0x64>)
 800351c:	2200      	movs	r2, #0
 800351e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <MX_SPI1_Init+0x64>)
 8003522:	2200      	movs	r2, #0
 8003524:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <MX_SPI1_Init+0x64>)
 8003528:	220a      	movs	r2, #10
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800352c:	4804      	ldr	r0, [pc, #16]	; (8003540 <MX_SPI1_Init+0x64>)
 800352e:	f001 fa3f 	bl	80049b0 <HAL_SPI_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_SPI1_Init+0x60>
		Error_Handler();
 8003538:	f000 f890 	bl	800365c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2000043c 	.word	0x2000043c
 8003544:	40013000 	.word	0x40013000

08003548 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <MX_USART1_UART_Init+0x4c>)
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <MX_USART1_UART_Init+0x50>)
 8003550:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <MX_USART1_UART_Init+0x4c>)
 8003554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003558:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <MX_USART1_UART_Init+0x4c>)
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <MX_USART1_UART_Init+0x4c>)
 8003562:	2200      	movs	r2, #0
 8003564:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <MX_USART1_UART_Init+0x4c>)
 8003568:	2200      	movs	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <MX_USART1_UART_Init+0x4c>)
 800356e:	220c      	movs	r2, #12
 8003570:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <MX_USART1_UART_Init+0x4c>)
 8003574:	2200      	movs	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <MX_USART1_UART_Init+0x4c>)
 800357a:	2200      	movs	r2, #0
 800357c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800357e:	4805      	ldr	r0, [pc, #20]	; (8003594 <MX_USART1_UART_Init+0x4c>)
 8003580:	f002 f8a2 	bl	80056c8 <HAL_UART_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800358a:	f000 f867 	bl	800365c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200003f4 	.word	0x200003f4
 8003598:	40013800 	.word	0x40013800

0800359c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80035a2:	f107 0310 	add.w	r3, r7, #16
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80035b0:	4b27      	ldr	r3, [pc, #156]	; (8003650 <MX_GPIO_Init+0xb4>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	4a26      	ldr	r2, [pc, #152]	; (8003650 <MX_GPIO_Init+0xb4>)
 80035b6:	f043 0320 	orr.w	r3, r3, #32
 80035ba:	6193      	str	r3, [r2, #24]
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <MX_GPIO_Init+0xb4>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80035c8:	4b21      	ldr	r3, [pc, #132]	; (8003650 <MX_GPIO_Init+0xb4>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	4a20      	ldr	r2, [pc, #128]	; (8003650 <MX_GPIO_Init+0xb4>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6193      	str	r3, [r2, #24]
 80035d4:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <MX_GPIO_Init+0xb4>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80035e0:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <MX_GPIO_Init+0xb4>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <MX_GPIO_Init+0xb4>)
 80035e6:	f043 0308 	orr.w	r3, r3, #8
 80035ea:	6193      	str	r3, [r2, #24]
 80035ec:	4b18      	ldr	r3, [pc, #96]	; (8003650 <MX_GPIO_Init+0xb4>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_MAG_GPIO_Port, CS_MAG_Pin, GPIO_PIN_RESET);
 80035f8:	2200      	movs	r2, #0
 80035fa:	2110      	movs	r1, #16
 80035fc:	4815      	ldr	r0, [pc, #84]	; (8003654 <MX_GPIO_Init+0xb8>)
 80035fe:	f000 fdb1 	bl	8004164 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_MPU_GPIO_Port, CS_MPU_Pin, GPIO_PIN_RESET);
 8003602:	2200      	movs	r2, #0
 8003604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003608:	4813      	ldr	r0, [pc, #76]	; (8003658 <MX_GPIO_Init+0xbc>)
 800360a:	f000 fdab 	bl	8004164 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_MAG_Pin */
	GPIO_InitStruct.Pin = CS_MAG_Pin;
 800360e:	2310      	movs	r3, #16
 8003610:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003612:	2301      	movs	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361a:	2302      	movs	r3, #2
 800361c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CS_MAG_GPIO_Port, &GPIO_InitStruct);
 800361e:	f107 0310 	add.w	r3, r7, #16
 8003622:	4619      	mov	r1, r3
 8003624:	480b      	ldr	r0, [pc, #44]	; (8003654 <MX_GPIO_Init+0xb8>)
 8003626:	f000 fc19 	bl	8003e5c <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_MPU_Pin */
	GPIO_InitStruct.Pin = CS_MPU_Pin;
 800362a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800362e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003630:	2301      	movs	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003638:	2302      	movs	r3, #2
 800363a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CS_MPU_GPIO_Port, &GPIO_InitStruct);
 800363c:	f107 0310 	add.w	r3, r7, #16
 8003640:	4619      	mov	r1, r3
 8003642:	4805      	ldr	r0, [pc, #20]	; (8003658 <MX_GPIO_Init+0xbc>)
 8003644:	f000 fc0a 	bl	8003e5c <HAL_GPIO_Init>

}
 8003648:	bf00      	nop
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	40010800 	.word	0x40010800
 8003658:	40010c00 	.word	0x40010c00

0800365c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003660:	b672      	cpsid	i
}
 8003662:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003664:	e7fe      	b.n	8003664 <Error_Handler+0x8>
	...

08003668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <HAL_MspInit+0x5c>)
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <HAL_MspInit+0x5c>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6193      	str	r3, [r2, #24]
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_MspInit+0x5c>)
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_MspInit+0x5c>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <HAL_MspInit+0x5c>)
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003690:	61d3      	str	r3, [r2, #28]
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <HAL_MspInit+0x5c>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_MspInit+0x60>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <HAL_MspInit+0x60>)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40010000 	.word	0x40010000

080036cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_SPI_MspInit+0x98>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d137      	bne.n	800375c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <HAL_SPI_MspInit+0x9c>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_SPI_MspInit+0x9c>)
 80036f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036f6:	6193      	str	r3, [r2, #24]
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_SPI_MspInit+0x9c>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_SPI_MspInit+0x9c>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_SPI_MspInit+0x9c>)
 800370a:	f043 0304 	orr.w	r3, r3, #4
 800370e:	6193      	str	r3, [r2, #24]
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_SPI_MspInit+0x9c>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SEN_SCK_Pin|SEN_MOSI_Pin;
 800371c:	23a0      	movs	r3, #160	; 0xa0
 800371e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003724:	2303      	movs	r3, #3
 8003726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	f107 0310 	add.w	r3, r7, #16
 800372c:	4619      	mov	r1, r3
 800372e:	480f      	ldr	r0, [pc, #60]	; (800376c <HAL_SPI_MspInit+0xa0>)
 8003730:	f000 fb94 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEN_MISO_Pin;
 8003734:	2340      	movs	r3, #64	; 0x40
 8003736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SEN_MISO_GPIO_Port, &GPIO_InitStruct);
 8003740:	f107 0310 	add.w	r3, r7, #16
 8003744:	4619      	mov	r1, r3
 8003746:	4809      	ldr	r0, [pc, #36]	; (800376c <HAL_SPI_MspInit+0xa0>)
 8003748:	f000 fb88 	bl	8003e5c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800374c:	2200      	movs	r2, #0
 800374e:	2100      	movs	r1, #0
 8003750:	2023      	movs	r0, #35	; 0x23
 8003752:	f000 fad4 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003756:	2023      	movs	r0, #35	; 0x23
 8003758:	f000 faed 	bl	8003d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800375c:	bf00      	nop
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40013000 	.word	0x40013000
 8003768:	40021000 	.word	0x40021000
 800376c:	40010800 	.word	0x40010800

08003770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 0310 	add.w	r3, r7, #16
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_UART_MspInit+0x8c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d131      	bne.n	80037f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_UART_MspInit+0x90>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <HAL_UART_MspInit+0x90>)
 8003796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800379a:	6193      	str	r3, [r2, #24]
 800379c:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_UART_MspInit+0x90>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_UART_MspInit+0x90>)
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <HAL_UART_MspInit+0x90>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6193      	str	r3, [r2, #24]
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <HAL_UART_MspInit+0x90>)
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ca:	2303      	movs	r3, #3
 80037cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ce:	f107 0310 	add.w	r3, r7, #16
 80037d2:	4619      	mov	r1, r3
 80037d4:	480b      	ldr	r0, [pc, #44]	; (8003804 <HAL_UART_MspInit+0x94>)
 80037d6:	f000 fb41 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	4619      	mov	r1, r3
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <HAL_UART_MspInit+0x94>)
 80037f0:	f000 fb34 	bl	8003e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80037f4:	bf00      	nop
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40013800 	.word	0x40013800
 8003800:	40021000 	.word	0x40021000
 8003804:	40010800 	.word	0x40010800

08003808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800380c:	e7fe      	b.n	800380c <NMI_Handler+0x4>

0800380e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003812:	e7fe      	b.n	8003812 <HardFault_Handler+0x4>

08003814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003818:	e7fe      	b.n	8003818 <MemManage_Handler+0x4>

0800381a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381e:	e7fe      	b.n	800381e <BusFault_Handler+0x4>

08003820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <UsageFault_Handler+0x4>

08003826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800384e:	f000 f93f 	bl	8003ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <SPI1_IRQHandler+0x10>)
 800385e:	f001 fd37 	bl	80052d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	2000043c 	.word	0x2000043c

0800386c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
	return 1;
 8003870:	2301      	movs	r3, #1
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <_kill>:

int _kill(int pid, int sig)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003884:	f002 f8f0 	bl	8005a68 <__errno>
 8003888:	4603      	mov	r3, r0
 800388a:	2216      	movs	r2, #22
 800388c:	601a      	str	r2, [r3, #0]
	return -1;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <_exit>:

void _exit (int status)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038a2:	f04f 31ff 	mov.w	r1, #4294967295
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ffe7 	bl	800387a <_kill>
	while (1) {}		/* Make sure we hang here */
 80038ac:	e7fe      	b.n	80038ac <_exit+0x12>

080038ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e00a      	b.n	80038d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038c0:	f3af 8000 	nop.w
 80038c4:	4601      	mov	r1, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	60ba      	str	r2, [r7, #8]
 80038cc:	b2ca      	uxtb	r2, r1
 80038ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3301      	adds	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	dbf0      	blt.n	80038c0 <_read+0x12>
	}

return len;
 80038de:	687b      	ldr	r3, [r7, #4]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e009      	b.n	800390e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	60ba      	str	r2, [r7, #8]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3301      	adds	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	dbf1      	blt.n	80038fa <_write+0x12>
	}
	return len;
 8003916:	687b      	ldr	r3, [r7, #4]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <_close>:

int _close(int file)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	return -1;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003946:	605a      	str	r2, [r3, #4]
	return 0;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <_isatty>:

int _isatty(int file)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	return 1;
 800395c:	2301      	movs	r3, #1
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
	return 0;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003988:	4a14      	ldr	r2, [pc, #80]	; (80039dc <_sbrk+0x5c>)
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <_sbrk+0x60>)
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <_sbrk+0x64>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <_sbrk+0x64>)
 800399e:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <_sbrk+0x68>)
 80039a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <_sbrk+0x64>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d207      	bcs.n	80039c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039b0:	f002 f85a 	bl	8005a68 <__errno>
 80039b4:	4603      	mov	r3, r0
 80039b6:	220c      	movs	r2, #12
 80039b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	e009      	b.n	80039d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <_sbrk+0x64>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039c6:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <_sbrk+0x64>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	4a05      	ldr	r2, [pc, #20]	; (80039e4 <_sbrk+0x64>)
 80039d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039d2:	68fb      	ldr	r3, [r7, #12]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20005000 	.word	0x20005000
 80039e0:	00000400 	.word	0x00000400
 80039e4:	200002a8 	.word	0x200002a8
 80039e8:	200005a8 	.word	0x200005a8

080039ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039f8:	f7ff fff8 	bl	80039ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039fc:	480b      	ldr	r0, [pc, #44]	; (8003a2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80039fe:	490c      	ldr	r1, [pc, #48]	; (8003a30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a00:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a04:	e002      	b.n	8003a0c <LoopCopyDataInit>

08003a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a0a:	3304      	adds	r3, #4

08003a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a10:	d3f9      	bcc.n	8003a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a14:	4c09      	ldr	r4, [pc, #36]	; (8003a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a18:	e001      	b.n	8003a1e <LoopFillZerobss>

08003a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a1c:	3204      	adds	r2, #4

08003a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a20:	d3fb      	bcc.n	8003a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a22:	f002 f827 	bl	8005a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a26:	f7ff fcf3 	bl	8003410 <main>
  bx lr
 8003a2a:	4770      	bx	lr
  ldr r0, =_sdata
 8003a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a30:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003a34:	0800be98 	.word	0x0800be98
  ldr r2, =_sbss
 8003a38:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003a3c:	200005a8 	.word	0x200005a8

08003a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a40:	e7fe      	b.n	8003a40 <ADC1_2_IRQHandler>
	...

08003a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_Init+0x28>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <HAL_Init+0x28>)
 8003a4e:	f043 0310 	orr.w	r3, r3, #16
 8003a52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a54:	2003      	movs	r0, #3
 8003a56:	f000 f947 	bl	8003ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a5a:	200f      	movs	r0, #15
 8003a5c:	f000 f808 	bl	8003a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a60:	f7ff fe02 	bl	8003668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40022000 	.word	0x40022000

08003a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_InitTick+0x54>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_InitTick+0x58>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	4619      	mov	r1, r3
 8003a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f95f 	bl	8003d52 <HAL_SYSTICK_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e00e      	b.n	8003abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b0f      	cmp	r3, #15
 8003aa2:	d80a      	bhi.n	8003aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	f000 f927 	bl	8003cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ab0:	4a06      	ldr	r2, [pc, #24]	; (8003acc <HAL_InitTick+0x5c>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e000      	b.n	8003abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000024 	.word	0x20000024
 8003ac8:	2000002c 	.word	0x2000002c
 8003acc:	20000028 	.word	0x20000028

08003ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_IncTick+0x1c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_IncTick+0x20>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4413      	add	r3, r2
 8003ae0:	4a03      	ldr	r2, [pc, #12]	; (8003af0 <HAL_IncTick+0x20>)
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	2000002c 	.word	0x2000002c
 8003af0:	20000594 	.word	0x20000594

08003af4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return uwTick;
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <HAL_GetTick+0x10>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	20000594 	.word	0x20000594

08003b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b10:	f7ff fff0 	bl	8003af4 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d005      	beq.n	8003b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_Delay+0x44>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b2e:	bf00      	nop
 8003b30:	f7ff ffe0 	bl	8003af4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d8f7      	bhi.n	8003b30 <HAL_Delay+0x28>
  {
  }
}
 8003b40:	bf00      	nop
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2000002c 	.word	0x2000002c

08003b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <__NVIC_SetPriorityGrouping+0x44>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b82:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <__NVIC_SetPriorityGrouping+0x44>)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	60d3      	str	r3, [r2, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	f003 0307 	and.w	r3, r3, #7
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	db0b      	blt.n	8003bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	f003 021f 	and.w	r2, r3, #31
 8003bcc:	4906      	ldr	r1, [pc, #24]	; (8003be8 <__NVIC_EnableIRQ+0x34>)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	e000e100 	.word	0xe000e100

08003bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	db0a      	blt.n	8003c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	490c      	ldr	r1, [pc, #48]	; (8003c38 <__NVIC_SetPriority+0x4c>)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	0112      	lsls	r2, r2, #4
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c14:	e00a      	b.n	8003c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	4908      	ldr	r1, [pc, #32]	; (8003c3c <__NVIC_SetPriority+0x50>)
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	3b04      	subs	r3, #4
 8003c24:	0112      	lsls	r2, r2, #4
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	440b      	add	r3, r1
 8003c2a:	761a      	strb	r2, [r3, #24]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000e100 	.word	0xe000e100
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	; 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f1c3 0307 	rsb	r3, r3, #7
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	bf28      	it	cs
 8003c5e:	2304      	movcs	r3, #4
 8003c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3304      	adds	r3, #4
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d902      	bls.n	8003c70 <NVIC_EncodePriority+0x30>
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	3b03      	subs	r3, #3
 8003c6e:	e000      	b.n	8003c72 <NVIC_EncodePriority+0x32>
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	401a      	ands	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c88:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	43d9      	mvns	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	4313      	orrs	r3, r2
         );
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3724      	adds	r7, #36	; 0x24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb4:	d301      	bcc.n	8003cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00f      	b.n	8003cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <SysTick_Config+0x40>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cc2:	210f      	movs	r1, #15
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	f7ff ff90 	bl	8003bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <SysTick_Config+0x40>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <SysTick_Config+0x40>)
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	e000e010 	.word	0xe000e010

08003ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff2d 	bl	8003b50 <__NVIC_SetPriorityGrouping>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d10:	f7ff ff42 	bl	8003b98 <__NVIC_GetPriorityGrouping>
 8003d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	6978      	ldr	r0, [r7, #20]
 8003d1c:	f7ff ff90 	bl	8003c40 <NVIC_EncodePriority>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff5f 	bl	8003bec <__NVIC_SetPriority>
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff35 	bl	8003bb4 <__NVIC_EnableIRQ>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ffa2 	bl	8003ca4 <SysTick_Config>
 8003d60:	4603      	mov	r3, r0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d005      	beq.n	8003d90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2204      	movs	r2, #4
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
 8003d8e:	e051      	b.n	8003e34 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 020e 	bic.w	r2, r2, #14
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a22      	ldr	r2, [pc, #136]	; (8003e40 <HAL_DMA_Abort_IT+0xd4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d029      	beq.n	8003e0e <HAL_DMA_Abort_IT+0xa2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a21      	ldr	r2, [pc, #132]	; (8003e44 <HAL_DMA_Abort_IT+0xd8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d022      	beq.n	8003e0a <HAL_DMA_Abort_IT+0x9e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <HAL_DMA_Abort_IT+0xdc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01a      	beq.n	8003e04 <HAL_DMA_Abort_IT+0x98>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <HAL_DMA_Abort_IT+0xe0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d012      	beq.n	8003dfe <HAL_DMA_Abort_IT+0x92>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_DMA_Abort_IT+0xe4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00a      	beq.n	8003df8 <HAL_DMA_Abort_IT+0x8c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_DMA_Abort_IT+0xe8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d102      	bne.n	8003df2 <HAL_DMA_Abort_IT+0x86>
 8003dec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003df0:	e00e      	b.n	8003e10 <HAL_DMA_Abort_IT+0xa4>
 8003df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003df6:	e00b      	b.n	8003e10 <HAL_DMA_Abort_IT+0xa4>
 8003df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dfc:	e008      	b.n	8003e10 <HAL_DMA_Abort_IT+0xa4>
 8003dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e02:	e005      	b.n	8003e10 <HAL_DMA_Abort_IT+0xa4>
 8003e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e08:	e002      	b.n	8003e10 <HAL_DMA_Abort_IT+0xa4>
 8003e0a:	2310      	movs	r3, #16
 8003e0c:	e000      	b.n	8003e10 <HAL_DMA_Abort_IT+0xa4>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_DMA_Abort_IT+0xec>)
 8003e12:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
    } 
  }
  return status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40020008 	.word	0x40020008
 8003e44:	4002001c 	.word	0x4002001c
 8003e48:	40020030 	.word	0x40020030
 8003e4c:	40020044 	.word	0x40020044
 8003e50:	40020058 	.word	0x40020058
 8003e54:	4002006c 	.word	0x4002006c
 8003e58:	40020000 	.word	0x40020000

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b08b      	sub	sp, #44	; 0x2c
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6e:	e169      	b.n	8004144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e70:	2201      	movs	r2, #1
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	f040 8158 	bne.w	800413e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a9a      	ldr	r2, [pc, #616]	; (80040fc <HAL_GPIO_Init+0x2a0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d05e      	beq.n	8003f56 <HAL_GPIO_Init+0xfa>
 8003e98:	4a98      	ldr	r2, [pc, #608]	; (80040fc <HAL_GPIO_Init+0x2a0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d875      	bhi.n	8003f8a <HAL_GPIO_Init+0x12e>
 8003e9e:	4a98      	ldr	r2, [pc, #608]	; (8004100 <HAL_GPIO_Init+0x2a4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d058      	beq.n	8003f56 <HAL_GPIO_Init+0xfa>
 8003ea4:	4a96      	ldr	r2, [pc, #600]	; (8004100 <HAL_GPIO_Init+0x2a4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d86f      	bhi.n	8003f8a <HAL_GPIO_Init+0x12e>
 8003eaa:	4a96      	ldr	r2, [pc, #600]	; (8004104 <HAL_GPIO_Init+0x2a8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d052      	beq.n	8003f56 <HAL_GPIO_Init+0xfa>
 8003eb0:	4a94      	ldr	r2, [pc, #592]	; (8004104 <HAL_GPIO_Init+0x2a8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d869      	bhi.n	8003f8a <HAL_GPIO_Init+0x12e>
 8003eb6:	4a94      	ldr	r2, [pc, #592]	; (8004108 <HAL_GPIO_Init+0x2ac>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04c      	beq.n	8003f56 <HAL_GPIO_Init+0xfa>
 8003ebc:	4a92      	ldr	r2, [pc, #584]	; (8004108 <HAL_GPIO_Init+0x2ac>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d863      	bhi.n	8003f8a <HAL_GPIO_Init+0x12e>
 8003ec2:	4a92      	ldr	r2, [pc, #584]	; (800410c <HAL_GPIO_Init+0x2b0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d046      	beq.n	8003f56 <HAL_GPIO_Init+0xfa>
 8003ec8:	4a90      	ldr	r2, [pc, #576]	; (800410c <HAL_GPIO_Init+0x2b0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d85d      	bhi.n	8003f8a <HAL_GPIO_Init+0x12e>
 8003ece:	2b12      	cmp	r3, #18
 8003ed0:	d82a      	bhi.n	8003f28 <HAL_GPIO_Init+0xcc>
 8003ed2:	2b12      	cmp	r3, #18
 8003ed4:	d859      	bhi.n	8003f8a <HAL_GPIO_Init+0x12e>
 8003ed6:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <HAL_GPIO_Init+0x80>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003f57 	.word	0x08003f57
 8003ee0:	08003f31 	.word	0x08003f31
 8003ee4:	08003f43 	.word	0x08003f43
 8003ee8:	08003f85 	.word	0x08003f85
 8003eec:	08003f8b 	.word	0x08003f8b
 8003ef0:	08003f8b 	.word	0x08003f8b
 8003ef4:	08003f8b 	.word	0x08003f8b
 8003ef8:	08003f8b 	.word	0x08003f8b
 8003efc:	08003f8b 	.word	0x08003f8b
 8003f00:	08003f8b 	.word	0x08003f8b
 8003f04:	08003f8b 	.word	0x08003f8b
 8003f08:	08003f8b 	.word	0x08003f8b
 8003f0c:	08003f8b 	.word	0x08003f8b
 8003f10:	08003f8b 	.word	0x08003f8b
 8003f14:	08003f8b 	.word	0x08003f8b
 8003f18:	08003f8b 	.word	0x08003f8b
 8003f1c:	08003f8b 	.word	0x08003f8b
 8003f20:	08003f39 	.word	0x08003f39
 8003f24:	08003f4d 	.word	0x08003f4d
 8003f28:	4a79      	ldr	r2, [pc, #484]	; (8004110 <HAL_GPIO_Init+0x2b4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f2e:	e02c      	b.n	8003f8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	623b      	str	r3, [r7, #32]
          break;
 8003f36:	e029      	b.n	8003f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	623b      	str	r3, [r7, #32]
          break;
 8003f40:	e024      	b.n	8003f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	3308      	adds	r3, #8
 8003f48:	623b      	str	r3, [r7, #32]
          break;
 8003f4a:	e01f      	b.n	8003f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	330c      	adds	r3, #12
 8003f52:	623b      	str	r3, [r7, #32]
          break;
 8003f54:	e01a      	b.n	8003f8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d102      	bne.n	8003f64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f5e:	2304      	movs	r3, #4
 8003f60:	623b      	str	r3, [r7, #32]
          break;
 8003f62:	e013      	b.n	8003f8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d105      	bne.n	8003f78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f6c:	2308      	movs	r3, #8
 8003f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	611a      	str	r2, [r3, #16]
          break;
 8003f76:	e009      	b.n	8003f8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f78:	2308      	movs	r3, #8
 8003f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	615a      	str	r2, [r3, #20]
          break;
 8003f82:	e003      	b.n	8003f8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f84:	2300      	movs	r3, #0
 8003f86:	623b      	str	r3, [r7, #32]
          break;
 8003f88:	e000      	b.n	8003f8c <HAL_GPIO_Init+0x130>
          break;
 8003f8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2bff      	cmp	r3, #255	; 0xff
 8003f90:	d801      	bhi.n	8003f96 <HAL_GPIO_Init+0x13a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	e001      	b.n	8003f9a <HAL_GPIO_Init+0x13e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2bff      	cmp	r3, #255	; 0xff
 8003fa0:	d802      	bhi.n	8003fa8 <HAL_GPIO_Init+0x14c>
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	e002      	b.n	8003fae <HAL_GPIO_Init+0x152>
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	3b08      	subs	r3, #8
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	210f      	movs	r1, #15
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	6a39      	ldr	r1, [r7, #32]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80b1 	beq.w	800413e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fdc:	4b4d      	ldr	r3, [pc, #308]	; (8004114 <HAL_GPIO_Init+0x2b8>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	4a4c      	ldr	r2, [pc, #304]	; (8004114 <HAL_GPIO_Init+0x2b8>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6193      	str	r3, [r2, #24]
 8003fe8:	4b4a      	ldr	r3, [pc, #296]	; (8004114 <HAL_GPIO_Init+0x2b8>)
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ff4:	4a48      	ldr	r2, [pc, #288]	; (8004118 <HAL_GPIO_Init+0x2bc>)
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004000:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	220f      	movs	r2, #15
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4013      	ands	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a40      	ldr	r2, [pc, #256]	; (800411c <HAL_GPIO_Init+0x2c0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <HAL_GPIO_Init+0x1ec>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3f      	ldr	r2, [pc, #252]	; (8004120 <HAL_GPIO_Init+0x2c4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00d      	beq.n	8004044 <HAL_GPIO_Init+0x1e8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3e      	ldr	r2, [pc, #248]	; (8004124 <HAL_GPIO_Init+0x2c8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d007      	beq.n	8004040 <HAL_GPIO_Init+0x1e4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3d      	ldr	r2, [pc, #244]	; (8004128 <HAL_GPIO_Init+0x2cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d101      	bne.n	800403c <HAL_GPIO_Init+0x1e0>
 8004038:	2303      	movs	r3, #3
 800403a:	e006      	b.n	800404a <HAL_GPIO_Init+0x1ee>
 800403c:	2304      	movs	r3, #4
 800403e:	e004      	b.n	800404a <HAL_GPIO_Init+0x1ee>
 8004040:	2302      	movs	r3, #2
 8004042:	e002      	b.n	800404a <HAL_GPIO_Init+0x1ee>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_GPIO_Init+0x1ee>
 8004048:	2300      	movs	r3, #0
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	f002 0203 	and.w	r2, r2, #3
 8004050:	0092      	lsls	r2, r2, #2
 8004052:	4093      	lsls	r3, r2
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800405a:	492f      	ldr	r1, [pc, #188]	; (8004118 <HAL_GPIO_Init+0x2bc>)
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	3302      	adds	r3, #2
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004074:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_GPIO_Init+0x2d0>)
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	492c      	ldr	r1, [pc, #176]	; (800412c <HAL_GPIO_Init+0x2d0>)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]
 8004080:	e006      	b.n	8004090 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_GPIO_Init+0x2d0>)
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	43db      	mvns	r3, r3
 800408a:	4928      	ldr	r1, [pc, #160]	; (800412c <HAL_GPIO_Init+0x2d0>)
 800408c:	4013      	ands	r3, r2
 800408e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d006      	beq.n	80040aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800409c:	4b23      	ldr	r3, [pc, #140]	; (800412c <HAL_GPIO_Init+0x2d0>)
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	4922      	ldr	r1, [pc, #136]	; (800412c <HAL_GPIO_Init+0x2d0>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60cb      	str	r3, [r1, #12]
 80040a8:	e006      	b.n	80040b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <HAL_GPIO_Init+0x2d0>)
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	491e      	ldr	r1, [pc, #120]	; (800412c <HAL_GPIO_Init+0x2d0>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_GPIO_Init+0x2d0>)
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	4918      	ldr	r1, [pc, #96]	; (800412c <HAL_GPIO_Init+0x2d0>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
 80040d0:	e006      	b.n	80040e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040d2:	4b16      	ldr	r3, [pc, #88]	; (800412c <HAL_GPIO_Init+0x2d0>)
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	43db      	mvns	r3, r3
 80040da:	4914      	ldr	r1, [pc, #80]	; (800412c <HAL_GPIO_Init+0x2d0>)
 80040dc:	4013      	ands	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d021      	beq.n	8004130 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_GPIO_Init+0x2d0>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	490e      	ldr	r1, [pc, #56]	; (800412c <HAL_GPIO_Init+0x2d0>)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]
 80040f8:	e021      	b.n	800413e <HAL_GPIO_Init+0x2e2>
 80040fa:	bf00      	nop
 80040fc:	10320000 	.word	0x10320000
 8004100:	10310000 	.word	0x10310000
 8004104:	10220000 	.word	0x10220000
 8004108:	10210000 	.word	0x10210000
 800410c:	10120000 	.word	0x10120000
 8004110:	10110000 	.word	0x10110000
 8004114:	40021000 	.word	0x40021000
 8004118:	40010000 	.word	0x40010000
 800411c:	40010800 	.word	0x40010800
 8004120:	40010c00 	.word	0x40010c00
 8004124:	40011000 	.word	0x40011000
 8004128:	40011400 	.word	0x40011400
 800412c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_GPIO_Init+0x304>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	43db      	mvns	r3, r3
 8004138:	4909      	ldr	r1, [pc, #36]	; (8004160 <HAL_GPIO_Init+0x304>)
 800413a:	4013      	ands	r3, r2
 800413c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	3301      	adds	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	fa22 f303 	lsr.w	r3, r2, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	f47f ae8e 	bne.w	8003e70 <HAL_GPIO_Init+0x14>
  }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	372c      	adds	r7, #44	; 0x2c
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	40010400 	.word	0x40010400

08004164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	807b      	strh	r3, [r7, #2]
 8004170:	4613      	mov	r3, r2
 8004172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004174:	787b      	ldrb	r3, [r7, #1]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004180:	e003      	b.n	800418a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004182:	887b      	ldrh	r3, [r7, #2]
 8004184:	041a      	lsls	r2, r3, #16
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e26c      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8087 	beq.w	80042c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b4:	4b92      	ldr	r3, [pc, #584]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d00c      	beq.n	80041da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041c0:	4b8f      	ldr	r3, [pc, #572]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d112      	bne.n	80041f2 <HAL_RCC_OscConfig+0x5e>
 80041cc:	4b8c      	ldr	r3, [pc, #560]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d10b      	bne.n	80041f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041da:	4b89      	ldr	r3, [pc, #548]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d06c      	beq.n	80042c0 <HAL_RCC_OscConfig+0x12c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d168      	bne.n	80042c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e246      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fa:	d106      	bne.n	800420a <HAL_RCC_OscConfig+0x76>
 80041fc:	4b80      	ldr	r3, [pc, #512]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a7f      	ldr	r2, [pc, #508]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	e02e      	b.n	8004268 <HAL_RCC_OscConfig+0xd4>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x98>
 8004212:	4b7b      	ldr	r3, [pc, #492]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7a      	ldr	r2, [pc, #488]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b78      	ldr	r3, [pc, #480]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a77      	ldr	r2, [pc, #476]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e01d      	b.n	8004268 <HAL_RCC_OscConfig+0xd4>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0xbc>
 8004236:	4b72      	ldr	r3, [pc, #456]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a71      	ldr	r2, [pc, #452]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 800423c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b6f      	ldr	r3, [pc, #444]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6e      	ldr	r2, [pc, #440]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e00b      	b.n	8004268 <HAL_RCC_OscConfig+0xd4>
 8004250:	4b6b      	ldr	r3, [pc, #428]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6a      	ldr	r2, [pc, #424]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b68      	ldr	r3, [pc, #416]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a67      	ldr	r2, [pc, #412]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004266:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7ff fc40 	bl	8003af4 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004278:	f7ff fc3c 	bl	8003af4 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e1fa      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	4b5d      	ldr	r3, [pc, #372]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0xe4>
 8004296:	e014      	b.n	80042c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7ff fc2c 	bl	8003af4 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7ff fc28 	bl	8003af4 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e1e6      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	4b53      	ldr	r3, [pc, #332]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x10c>
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d063      	beq.n	8004396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ce:	4b4c      	ldr	r3, [pc, #304]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042da:	4b49      	ldr	r3, [pc, #292]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d11c      	bne.n	8004320 <HAL_RCC_OscConfig+0x18c>
 80042e6:	4b46      	ldr	r3, [pc, #280]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d116      	bne.n	8004320 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	4b43      	ldr	r3, [pc, #268]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_RCC_OscConfig+0x176>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d001      	beq.n	800430a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e1ba      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430a:	4b3d      	ldr	r3, [pc, #244]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4939      	ldr	r1, [pc, #228]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	e03a      	b.n	8004396 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d020      	beq.n	800436a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004328:	4b36      	ldr	r3, [pc, #216]	; (8004404 <HAL_RCC_OscConfig+0x270>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432e:	f7ff fbe1 	bl	8003af4 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004336:	f7ff fbdd 	bl	8003af4 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e19b      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004354:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4927      	ldr	r1, [pc, #156]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]
 8004368:	e015      	b.n	8004396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <HAL_RCC_OscConfig+0x270>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7ff fbc0 	bl	8003af4 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004378:	f7ff fbbc 	bl	8003af4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e17a      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d03a      	beq.n	8004418 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d019      	beq.n	80043de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043aa:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_RCC_OscConfig+0x274>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b0:	f7ff fba0 	bl	8003af4 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b8:	f7ff fb9c 	bl	8003af4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e15a      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043d6:	2001      	movs	r0, #1
 80043d8:	f000 facc 	bl	8004974 <RCC_Delay>
 80043dc:	e01c      	b.n	8004418 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <HAL_RCC_OscConfig+0x274>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e4:	f7ff fb86 	bl	8003af4 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ea:	e00f      	b.n	800440c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ec:	f7ff fb82 	bl	8003af4 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d908      	bls.n	800440c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e140      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
 80043fe:	bf00      	nop
 8004400:	40021000 	.word	0x40021000
 8004404:	42420000 	.word	0x42420000
 8004408:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	4b9e      	ldr	r3, [pc, #632]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e9      	bne.n	80043ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80a6 	beq.w	8004572 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442a:	4b97      	ldr	r3, [pc, #604]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	4b94      	ldr	r3, [pc, #592]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4a93      	ldr	r2, [pc, #588]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	61d3      	str	r3, [r2, #28]
 8004442:	4b91      	ldr	r3, [pc, #580]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004452:	4b8e      	ldr	r3, [pc, #568]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d118      	bne.n	8004490 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445e:	4b8b      	ldr	r3, [pc, #556]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a8a      	ldr	r2, [pc, #552]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446a:	f7ff fb43 	bl	8003af4 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7ff fb3f 	bl	8003af4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e0fd      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	4b81      	ldr	r3, [pc, #516]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d106      	bne.n	80044a6 <HAL_RCC_OscConfig+0x312>
 8004498:	4b7b      	ldr	r3, [pc, #492]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4a7a      	ldr	r2, [pc, #488]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	6213      	str	r3, [r2, #32]
 80044a4:	e02d      	b.n	8004502 <HAL_RCC_OscConfig+0x36e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x334>
 80044ae:	4b76      	ldr	r3, [pc, #472]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4a75      	ldr	r2, [pc, #468]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6213      	str	r3, [r2, #32]
 80044ba:	4b73      	ldr	r3, [pc, #460]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	4a72      	ldr	r2, [pc, #456]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044c0:	f023 0304 	bic.w	r3, r3, #4
 80044c4:	6213      	str	r3, [r2, #32]
 80044c6:	e01c      	b.n	8004502 <HAL_RCC_OscConfig+0x36e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x356>
 80044d0:	4b6d      	ldr	r3, [pc, #436]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4a6c      	ldr	r2, [pc, #432]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6213      	str	r3, [r2, #32]
 80044dc:	4b6a      	ldr	r3, [pc, #424]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a69      	ldr	r2, [pc, #420]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6213      	str	r3, [r2, #32]
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x36e>
 80044ea:	4b67      	ldr	r3, [pc, #412]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4a66      	ldr	r2, [pc, #408]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	6213      	str	r3, [r2, #32]
 80044f6:	4b64      	ldr	r3, [pc, #400]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	4a63      	ldr	r2, [pc, #396]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d015      	beq.n	8004536 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7ff faf3 	bl	8003af4 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7ff faef 	bl	8003af4 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0ab      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	4b57      	ldr	r3, [pc, #348]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ee      	beq.n	8004512 <HAL_RCC_OscConfig+0x37e>
 8004534:	e014      	b.n	8004560 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004536:	f7ff fadd 	bl	8003af4 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7ff fad9 	bl	8003af4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e095      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004554:	4b4c      	ldr	r3, [pc, #304]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ee      	bne.n	800453e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d105      	bne.n	8004572 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b48      	ldr	r3, [pc, #288]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	4a47      	ldr	r2, [pc, #284]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004570:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8081 	beq.w	800467e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800457c:	4b42      	ldr	r3, [pc, #264]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d061      	beq.n	800464c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d146      	bne.n	800461e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b3f      	ldr	r3, [pc, #252]	; (8004690 <HAL_RCC_OscConfig+0x4fc>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7ff faad 	bl	8003af4 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459e:	f7ff faa9 	bl	8003af4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e067      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b0:	4b35      	ldr	r3, [pc, #212]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d108      	bne.n	80045d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045c6:	4b30      	ldr	r3, [pc, #192]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	492d      	ldr	r1, [pc, #180]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d8:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a19      	ldr	r1, [r3, #32]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	430b      	orrs	r3, r1
 80045ea:	4927      	ldr	r1, [pc, #156]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <HAL_RCC_OscConfig+0x4fc>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7ff fa7d 	bl	8003af4 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fe:	f7ff fa79 	bl	8003af4 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e037      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x46a>
 800461c:	e02f      	b.n	800467e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <HAL_RCC_OscConfig+0x4fc>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7ff fa66 	bl	8003af4 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462c:	f7ff fa62 	bl	8003af4 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e020      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x498>
 800464a:	e018      	b.n	800467e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e013      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <HAL_RCC_OscConfig+0x4f4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	429a      	cmp	r2, r3
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40021000 	.word	0x40021000
 800468c:	40007000 	.word	0x40007000
 8004690:	42420060 	.word	0x42420060

08004694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0d0      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a8:	4b6a      	ldr	r3, [pc, #424]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d910      	bls.n	80046d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b6:	4b67      	ldr	r3, [pc, #412]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 0207 	bic.w	r2, r3, #7
 80046be:	4965      	ldr	r1, [pc, #404]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b63      	ldr	r3, [pc, #396]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0b8      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f0:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a58      	ldr	r2, [pc, #352]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004708:	4b53      	ldr	r3, [pc, #332]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a52      	ldr	r2, [pc, #328]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b50      	ldr	r3, [pc, #320]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	494d      	ldr	r1, [pc, #308]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d040      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d115      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07f      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004752:	4b41      	ldr	r3, [pc, #260]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e073      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004762:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e06b      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004772:	4b39      	ldr	r3, [pc, #228]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f023 0203 	bic.w	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4936      	ldr	r1, [pc, #216]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004784:	f7ff f9b6 	bl	8003af4 <HAL_GetTick>
 8004788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478c:	f7ff f9b2 	bl	8003af4 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e053      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a2:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 020c 	and.w	r2, r3, #12
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d1eb      	bne.n	800478c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b4:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d210      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b24      	ldr	r3, [pc, #144]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 0207 	bic.w	r2, r3, #7
 80047ca:	4922      	ldr	r1, [pc, #136]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e032      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4916      	ldr	r1, [pc, #88]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	490e      	ldr	r1, [pc, #56]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004822:	f000 f821 	bl	8004868 <HAL_RCC_GetSysClockFreq>
 8004826:	4602      	mov	r2, r0
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	490a      	ldr	r1, [pc, #40]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x1cc>)
 800483c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_ClockConfig+0x1d0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff f914 	bl	8003a70 <HAL_InitTick>

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40022000 	.word	0x40022000
 8004858:	40021000 	.word	0x40021000
 800485c:	0800b444 	.word	0x0800b444
 8004860:	20000024 	.word	0x20000024
 8004864:	20000028 	.word	0x20000028

08004868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	2300      	movs	r3, #0
 800487c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <HAL_RCC_GetSysClockFreq+0x94>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b04      	cmp	r3, #4
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x30>
 8004892:	2b08      	cmp	r3, #8
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x36>
 8004896:	e027      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004898:	4b19      	ldr	r3, [pc, #100]	; (8004900 <HAL_RCC_GetSysClockFreq+0x98>)
 800489a:	613b      	str	r3, [r7, #16]
      break;
 800489c:	e027      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	0c9b      	lsrs	r3, r3, #18
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	4a17      	ldr	r2, [pc, #92]	; (8004904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048a8:	5cd3      	ldrb	r3, [r2, r3]
 80048aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d010      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048b6:	4b11      	ldr	r3, [pc, #68]	; (80048fc <HAL_RCC_GetSysClockFreq+0x94>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	0c5b      	lsrs	r3, r3, #17
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	4a11      	ldr	r2, [pc, #68]	; (8004908 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048c2:	5cd3      	ldrb	r3, [r2, r3]
 80048c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a0d      	ldr	r2, [pc, #52]	; (8004900 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ca:	fb02 f203 	mul.w	r2, r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e004      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <HAL_RCC_GetSysClockFreq+0xa4>)
 80048dc:	fb02 f303 	mul.w	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	613b      	str	r3, [r7, #16]
      break;
 80048e6:	e002      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ea:	613b      	str	r3, [r7, #16]
      break;
 80048ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ee:	693b      	ldr	r3, [r7, #16]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	007a1200 	.word	0x007a1200
 8004904:	0800b45c 	.word	0x0800b45c
 8004908:	0800b46c 	.word	0x0800b46c
 800490c:	003d0900 	.word	0x003d0900

08004910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004914:	4b02      	ldr	r3, [pc, #8]	; (8004920 <HAL_RCC_GetHCLKFreq+0x10>)
 8004916:	681b      	ldr	r3, [r3, #0]
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	20000024 	.word	0x20000024

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004928:	f7ff fff2 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4903      	ldr	r1, [pc, #12]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	0800b454 	.word	0x0800b454

0800494c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004950:	f7ff ffde 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	0adb      	lsrs	r3, r3, #11
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000
 8004970:	0800b454 	.word	0x0800b454

08004974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <RCC_Delay+0x34>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <RCC_Delay+0x38>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0a5b      	lsrs	r3, r3, #9
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004990:	bf00      	nop
  }
  while (Delay --);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	60fa      	str	r2, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f9      	bne.n	8004990 <RCC_Delay+0x1c>
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	20000024 	.word	0x20000024
 80049ac:	10624dd3 	.word	0x10624dd3

080049b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e076      	b.n	8004ab0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d108      	bne.n	80049dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d2:	d009      	beq.n	80049e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	61da      	str	r2, [r3, #28]
 80049da:	e005      	b.n	80049e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fe fe62 	bl	80036cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6c:	ea42 0103 	orr.w	r1, r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	0c1a      	lsrs	r2, r3, #16
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f002 0204 	and.w	r2, r2, #4
 8004a8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69da      	ldr	r2, [r3, #28]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_SPI_Transmit+0x22>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e12d      	b.n	8004d36 <HAL_SPI_Transmit+0x27e>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae2:	f7ff f807 	bl	8003af4 <HAL_GetTick>
 8004ae6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
 8004afa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004afc:	e116      	b.n	8004d2c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <HAL_SPI_Transmit+0x52>
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b0e:	e10d      	b.n	8004d2c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2203      	movs	r2, #3
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	88fa      	ldrh	r2, [r7, #6]
 8004b2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b56:	d10f      	bne.n	8004b78 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b40      	cmp	r3, #64	; 0x40
 8004b84:	d007      	beq.n	8004b96 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9e:	d14f      	bne.n	8004c40 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_SPI_Transmit+0xf6>
 8004ba8:	8afb      	ldrh	r3, [r7, #22]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d142      	bne.n	8004c34 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	881a      	ldrh	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bd2:	e02f      	b.n	8004c34 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d112      	bne.n	8004c08 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	881a      	ldrh	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	1c9a      	adds	r2, r3, #2
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c06:	e015      	b.n	8004c34 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c08:	f7fe ff74 	bl	8003af4 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d803      	bhi.n	8004c20 <HAL_SPI_Transmit+0x168>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1e:	d102      	bne.n	8004c26 <HAL_SPI_Transmit+0x16e>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c32:	e07b      	b.n	8004d2c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ca      	bne.n	8004bd4 <HAL_SPI_Transmit+0x11c>
 8004c3e:	e050      	b.n	8004ce2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_Transmit+0x196>
 8004c48:	8afb      	ldrh	r3, [r7, #22]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d144      	bne.n	8004cd8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c74:	e030      	b.n	8004cd8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d113      	bne.n	8004cac <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	7812      	ldrb	r2, [r2, #0]
 8004c90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004caa:	e015      	b.n	8004cd8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cac:	f7fe ff22 	bl	8003af4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d803      	bhi.n	8004cc4 <HAL_SPI_Transmit+0x20c>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d102      	bne.n	8004cca <HAL_SPI_Transmit+0x212>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004cd6:	e029      	b.n	8004d2c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1c9      	bne.n	8004c76 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fcd0 	bl	800568c <SPI_EndRxTxTransaction>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e003      	b.n	8004d2c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d34:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b088      	sub	sp, #32
 8004d42:	af02      	add	r7, sp, #8
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d002      	beq.n	8004d64 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
 8004d60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d62:	e0fb      	b.n	8004f5c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d6c:	d112      	bne.n	8004d94 <HAL_SPI_Receive+0x56>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10e      	bne.n	8004d94 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2204      	movs	r2, #4
 8004d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f8ef 	bl	8004f6e <HAL_SPI_TransmitReceive>
 8004d90:	4603      	mov	r3, r0
 8004d92:	e0e8      	b.n	8004f66 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_SPI_Receive+0x64>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e0e1      	b.n	8004f66 <HAL_SPI_Receive+0x228>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004daa:	f7fe fea3 	bl	8003af4 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_SPI_Receive+0x7e>
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dc0:	e0cc      	b.n	8004f5c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	88fa      	ldrh	r2, [r7, #6]
 8004dda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e08:	d10f      	bne.n	8004e2a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d007      	beq.n	8004e48 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d16a      	bne.n	8004f26 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e50:	e032      	b.n	8004eb8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d115      	bne.n	8004e8c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f103 020c 	add.w	r2, r3, #12
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e8a:	e015      	b.n	8004eb8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e8c:	f7fe fe32 	bl	8003af4 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d803      	bhi.n	8004ea4 <HAL_SPI_Receive+0x166>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d102      	bne.n	8004eaa <HAL_SPI_Receive+0x16c>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004eb6:	e051      	b.n	8004f5c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1c7      	bne.n	8004e52 <HAL_SPI_Receive+0x114>
 8004ec2:	e035      	b.n	8004f30 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d113      	bne.n	8004efa <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	b292      	uxth	r2, r2
 8004ede:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	1c9a      	adds	r2, r3, #2
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ef8:	e015      	b.n	8004f26 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efa:	f7fe fdfb 	bl	8003af4 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d803      	bhi.n	8004f12 <HAL_SPI_Receive+0x1d4>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d102      	bne.n	8004f18 <HAL_SPI_Receive+0x1da>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f24:	e01a      	b.n	8004f5c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1c9      	bne.n	8004ec4 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fb57 	bl	80055e8 <SPI_EndRxTransaction>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	75fb      	strb	r3, [r7, #23]
 8004f52:	e003      	b.n	8004f5c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b08c      	sub	sp, #48	; 0x30
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x26>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e198      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x358>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f9c:	f7fe fdaa 	bl	8003af4 <HAL_GetTick>
 8004fa0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fb2:	887b      	ldrh	r3, [r7, #2]
 8004fb4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d00f      	beq.n	8004fde <HAL_SPI_TransmitReceive+0x70>
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc4:	d107      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x68>
 8004fce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d003      	beq.n	8004fde <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fdc:	e16d      	b.n	80052ba <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x82>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x82>
 8004fea:	887b      	ldrh	r3, [r7, #2]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d103      	bne.n	8004ff8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ff6:	e160      	b.n	80052ba <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b04      	cmp	r3, #4
 8005002:	d003      	beq.n	800500c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2205      	movs	r2, #5
 8005008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	887a      	ldrh	r2, [r7, #2]
 800501c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	887a      	ldrh	r2, [r7, #2]
 8005022:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	887a      	ldrh	r2, [r7, #2]
 800502e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d007      	beq.n	8005060 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800505e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005068:	d17c      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x10a>
 8005072:	8b7b      	ldrh	r3, [r7, #26]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d16a      	bne.n	800514e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	881a      	ldrh	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	1c9a      	adds	r2, r3, #2
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800509c:	e057      	b.n	800514e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d11b      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x176>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <HAL_SPI_TransmitReceive+0x176>
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d113      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	881a      	ldrh	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	1c9a      	adds	r2, r3, #2
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d119      	bne.n	8005126 <HAL_SPI_TransmitReceive+0x1b8>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d014      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	b292      	uxth	r2, r2
 8005108:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	1c9a      	adds	r2, r3, #2
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005122:	2301      	movs	r3, #1
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005126:	f7fe fce5 	bl	8003af4 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005132:	429a      	cmp	r2, r3
 8005134:	d80b      	bhi.n	800514e <HAL_SPI_TransmitReceive+0x1e0>
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d007      	beq.n	800514e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800514c:	e0b5      	b.n	80052ba <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1a2      	bne.n	800509e <HAL_SPI_TransmitReceive+0x130>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d19d      	bne.n	800509e <HAL_SPI_TransmitReceive+0x130>
 8005162:	e080      	b.n	8005266 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_SPI_TransmitReceive+0x204>
 800516c:	8b7b      	ldrh	r3, [r7, #26]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d16f      	bne.n	8005252 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	330c      	adds	r3, #12
 800517c:	7812      	ldrb	r2, [r2, #0]
 800517e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005198:	e05b      	b.n	8005252 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d11c      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x274>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d017      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x274>
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d114      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	7812      	ldrb	r2, [r2, #0]
 80051c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d119      	bne.n	8005224 <HAL_SPI_TransmitReceive+0x2b6>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d014      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005220:	2301      	movs	r3, #1
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005224:	f7fe fc66 	bl	8003af4 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005230:	429a      	cmp	r2, r3
 8005232:	d803      	bhi.n	800523c <HAL_SPI_TransmitReceive+0x2ce>
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d102      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x2d4>
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	2b00      	cmp	r3, #0
 8005240:	d107      	bne.n	8005252 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005250:	e033      	b.n	80052ba <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d19e      	bne.n	800519a <HAL_SPI_TransmitReceive+0x22c>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d199      	bne.n	800519a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 fa0e 	bl	800568c <SPI_EndRxTxTransaction>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d006      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005282:	e01a      	b.n	80052ba <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b0:	e003      	b.n	80052ba <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3730      	adds	r7, #48	; 0x30
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	099b      	lsrs	r3, r3, #6
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10f      	bne.n	8005314 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	099b      	lsrs	r3, r3, #6
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	4798      	blx	r3
    return;
 8005312:	e0be      	b.n	8005492 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_SPI_IRQHandler+0x66>
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	09db      	lsrs	r3, r3, #7
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
    return;
 8005334:	e0ad      	b.n	8005492 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_SPI_IRQHandler+0x80>
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	099b      	lsrs	r3, r3, #6
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 80a1 	beq.w	8005492 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 809a 	beq.w	8005492 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d023      	beq.n	80053b2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b03      	cmp	r3, #3
 8005374:	d011      	beq.n	800539a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	e00b      	b.n	80053b2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	693b      	ldr	r3, [r7, #16]
        return;
 80053b0:	e06f      	b.n	8005492 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d014      	beq.n	80053e8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f043 0201 	orr.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d04f      	beq.n	8005490 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <HAL_SPI_IRQHandler+0x14c>
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d034      	beq.n	8005486 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0203 	bic.w	r2, r2, #3
 800542a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d011      	beq.n	8005458 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005438:	4a17      	ldr	r2, [pc, #92]	; (8005498 <HAL_SPI_IRQHandler+0x1c8>)
 800543a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe fc93 	bl	8003d6c <HAL_DMA_Abort_IT>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800545c:	2b00      	cmp	r3, #0
 800545e:	d016      	beq.n	800548e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005464:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <HAL_SPI_IRQHandler+0x1c8>)
 8005466:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fc7d 	bl	8003d6c <HAL_DMA_Abort_IT>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005484:	e003      	b.n	800548e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f808 	bl	800549c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800548c:	e000      	b.n	8005490 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800548e:	bf00      	nop
    return;
 8005490:	bf00      	nop
  }
}
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	080054af 	.word	0x080054af

0800549c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7ff ffe7 	bl	800549c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054e8:	f7fe fb04 	bl	8003af4 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054f8:	f7fe fafc 	bl	8003af4 <HAL_GetTick>
 80054fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054fe:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	015b      	lsls	r3, r3, #5
 8005504:	0d1b      	lsrs	r3, r3, #20
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550e:	e054      	b.n	80055ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d050      	beq.n	80055ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005518:	f7fe faec 	bl	8003af4 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	429a      	cmp	r2, r3
 8005526:	d902      	bls.n	800552e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d13d      	bne.n	80055aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800553c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005546:	d111      	bne.n	800556c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005550:	d004      	beq.n	800555c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555a:	d107      	bne.n	800556c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005574:	d10f      	bne.n	8005596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005594:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e017      	b.n	80055da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d19b      	bne.n	8005510 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000024 	.word	0x20000024

080055e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055fc:	d111      	bne.n	8005622 <SPI_EndRxTransaction+0x3a>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005606:	d004      	beq.n	8005612 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005610:	d107      	bne.n	8005622 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005620:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800562a:	d117      	bne.n	800565c <SPI_EndRxTransaction+0x74>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005634:	d112      	bne.n	800565c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	2101      	movs	r1, #1
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff ff49 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01a      	beq.n	8005682 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f043 0220 	orr.w	r2, r3, #32
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e013      	b.n	8005684 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2200      	movs	r2, #0
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff ff36 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e000      	b.n	8005684 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	2180      	movs	r1, #128	; 0x80
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff ff18 	bl	80054d8 <SPI_WaitFlagStateUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b2:	f043 0220 	orr.w	r2, r3, #32
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e000      	b.n	80056c0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e042      	b.n	8005760 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fe f83e 	bl	8003770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2224      	movs	r2, #36	; 0x24
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800570a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f91d 	bl	800594c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695a      	ldr	r2, [r3, #20]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b20      	cmp	r3, #32
 8005786:	d16d      	bne.n	8005864 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <HAL_UART_Transmit+0x2c>
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e066      	b.n	8005866 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2221      	movs	r2, #33	; 0x21
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057a6:	f7fe f9a5 	bl	8003af4 <HAL_GetTick>
 80057aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c0:	d108      	bne.n	80057d4 <HAL_UART_Transmit+0x6c>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	e003      	b.n	80057dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057dc:	e02a      	b.n	8005834 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2180      	movs	r1, #128	; 0x80
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f840 	bl	800586e <UART_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e036      	b.n	8005866 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3302      	adds	r3, #2
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e007      	b.n	8005826 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1cf      	bne.n	80057de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2200      	movs	r2, #0
 8005846:	2140      	movs	r1, #64	; 0x40
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f810 	bl	800586e <UART_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e006      	b.n	8005866 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b090      	sub	sp, #64	; 0x40
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587e:	e050      	b.n	8005922 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d04c      	beq.n	8005922 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <UART_WaitOnFlagUntilTimeout+0x30>
 800588e:	f7fe f931 	bl	8003af4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800589a:	429a      	cmp	r2, r3
 800589c:	d241      	bcs.n	8005922 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058be:	637a      	str	r2, [r7, #52]	; 0x34
 80058c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e5      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	613b      	str	r3, [r7, #16]
   return(result);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058f2:	623a      	str	r2, [r7, #32]
 80058f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	69f9      	ldr	r1, [r7, #28]
 80058f8:	6a3a      	ldr	r2, [r7, #32]
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e00f      	b.n	8005942 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4013      	ands	r3, r2
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	429a      	cmp	r2, r3
 800593e:	d09f      	beq.n	8005880 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3740      	adds	r7, #64	; 0x40
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005986:	f023 030c 	bic.w	r3, r3, #12
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	430b      	orrs	r3, r1
 8005992:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a2c      	ldr	r2, [pc, #176]	; (8005a60 <UART_SetConfig+0x114>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d103      	bne.n	80059bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059b4:	f7fe ffca 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	e002      	b.n	80059c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059bc:	f7fe ffb2 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 80059c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009a      	lsls	r2, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	4a22      	ldr	r2, [pc, #136]	; (8005a64 <UART_SetConfig+0x118>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	0119      	lsls	r1, r3, #4
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009a      	lsls	r2, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059f8:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <UART_SetConfig+0x118>)
 80059fa:	fba3 0302 	umull	r0, r3, r3, r2
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	2064      	movs	r0, #100	; 0x64
 8005a02:	fb00 f303 	mul.w	r3, r0, r3
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	3332      	adds	r3, #50	; 0x32
 8005a0c:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <UART_SetConfig+0x118>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a18:	4419      	add	r1, r3
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009a      	lsls	r2, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <UART_SetConfig+0x118>)
 8005a32:	fba3 0302 	umull	r0, r3, r3, r2
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	2064      	movs	r0, #100	; 0x64
 8005a3a:	fb00 f303 	mul.w	r3, r0, r3
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	3332      	adds	r3, #50	; 0x32
 8005a44:	4a07      	ldr	r2, [pc, #28]	; (8005a64 <UART_SetConfig+0x118>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	f003 020f 	and.w	r2, r3, #15
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	440a      	add	r2, r1
 8005a56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40013800 	.word	0x40013800
 8005a64:	51eb851f 	.word	0x51eb851f

08005a68 <__errno>:
 8005a68:	4b01      	ldr	r3, [pc, #4]	; (8005a70 <__errno+0x8>)
 8005a6a:	6818      	ldr	r0, [r3, #0]
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20000030 	.word	0x20000030

08005a74 <__libc_init_array>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	2600      	movs	r6, #0
 8005a78:	4d0c      	ldr	r5, [pc, #48]	; (8005aac <__libc_init_array+0x38>)
 8005a7a:	4c0d      	ldr	r4, [pc, #52]	; (8005ab0 <__libc_init_array+0x3c>)
 8005a7c:	1b64      	subs	r4, r4, r5
 8005a7e:	10a4      	asrs	r4, r4, #2
 8005a80:	42a6      	cmp	r6, r4
 8005a82:	d109      	bne.n	8005a98 <__libc_init_array+0x24>
 8005a84:	f005 fbdc 	bl	800b240 <_init>
 8005a88:	2600      	movs	r6, #0
 8005a8a:	4d0a      	ldr	r5, [pc, #40]	; (8005ab4 <__libc_init_array+0x40>)
 8005a8c:	4c0a      	ldr	r4, [pc, #40]	; (8005ab8 <__libc_init_array+0x44>)
 8005a8e:	1b64      	subs	r4, r4, r5
 8005a90:	10a4      	asrs	r4, r4, #2
 8005a92:	42a6      	cmp	r6, r4
 8005a94:	d105      	bne.n	8005aa2 <__libc_init_array+0x2e>
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
 8005a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9c:	4798      	blx	r3
 8005a9e:	3601      	adds	r6, #1
 8005aa0:	e7ee      	b.n	8005a80 <__libc_init_array+0xc>
 8005aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa6:	4798      	blx	r3
 8005aa8:	3601      	adds	r6, #1
 8005aaa:	e7f2      	b.n	8005a92 <__libc_init_array+0x1e>
 8005aac:	0800be90 	.word	0x0800be90
 8005ab0:	0800be90 	.word	0x0800be90
 8005ab4:	0800be90 	.word	0x0800be90
 8005ab8:	0800be94 	.word	0x0800be94

08005abc <memset>:
 8005abc:	4603      	mov	r3, r0
 8005abe:	4402      	add	r2, r0
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d100      	bne.n	8005ac6 <memset+0xa>
 8005ac4:	4770      	bx	lr
 8005ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aca:	e7f9      	b.n	8005ac0 <memset+0x4>

08005acc <__cvt>:
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad2:	461f      	mov	r7, r3
 8005ad4:	bfbb      	ittet	lt
 8005ad6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005ada:	461f      	movlt	r7, r3
 8005adc:	2300      	movge	r3, #0
 8005ade:	232d      	movlt	r3, #45	; 0x2d
 8005ae0:	b088      	sub	sp, #32
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ae6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ae8:	7013      	strb	r3, [r2, #0]
 8005aea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005aec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005af0:	f023 0820 	bic.w	r8, r3, #32
 8005af4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005af8:	d005      	beq.n	8005b06 <__cvt+0x3a>
 8005afa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005afe:	d100      	bne.n	8005b02 <__cvt+0x36>
 8005b00:	3501      	adds	r5, #1
 8005b02:	2302      	movs	r3, #2
 8005b04:	e000      	b.n	8005b08 <__cvt+0x3c>
 8005b06:	2303      	movs	r3, #3
 8005b08:	aa07      	add	r2, sp, #28
 8005b0a:	9204      	str	r2, [sp, #16]
 8005b0c:	aa06      	add	r2, sp, #24
 8005b0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b12:	e9cd 3500 	strd	r3, r5, [sp]
 8005b16:	4622      	mov	r2, r4
 8005b18:	463b      	mov	r3, r7
 8005b1a:	f000 fd21 	bl	8006560 <_dtoa_r>
 8005b1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b22:	4606      	mov	r6, r0
 8005b24:	d102      	bne.n	8005b2c <__cvt+0x60>
 8005b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b28:	07db      	lsls	r3, r3, #31
 8005b2a:	d522      	bpl.n	8005b72 <__cvt+0xa6>
 8005b2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b30:	eb06 0905 	add.w	r9, r6, r5
 8005b34:	d110      	bne.n	8005b58 <__cvt+0x8c>
 8005b36:	7833      	ldrb	r3, [r6, #0]
 8005b38:	2b30      	cmp	r3, #48	; 0x30
 8005b3a:	d10a      	bne.n	8005b52 <__cvt+0x86>
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4620      	mov	r0, r4
 8005b42:	4639      	mov	r1, r7
 8005b44:	f7fa ff30 	bl	80009a8 <__aeabi_dcmpeq>
 8005b48:	b918      	cbnz	r0, 8005b52 <__cvt+0x86>
 8005b4a:	f1c5 0501 	rsb	r5, r5, #1
 8005b4e:	f8ca 5000 	str.w	r5, [sl]
 8005b52:	f8da 3000 	ldr.w	r3, [sl]
 8005b56:	4499      	add	r9, r3
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	4639      	mov	r1, r7
 8005b60:	f7fa ff22 	bl	80009a8 <__aeabi_dcmpeq>
 8005b64:	b108      	cbz	r0, 8005b6a <__cvt+0x9e>
 8005b66:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b6a:	2230      	movs	r2, #48	; 0x30
 8005b6c:	9b07      	ldr	r3, [sp, #28]
 8005b6e:	454b      	cmp	r3, r9
 8005b70:	d307      	bcc.n	8005b82 <__cvt+0xb6>
 8005b72:	4630      	mov	r0, r6
 8005b74:	9b07      	ldr	r3, [sp, #28]
 8005b76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b78:	1b9b      	subs	r3, r3, r6
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	b008      	add	sp, #32
 8005b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	9107      	str	r1, [sp, #28]
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e7f0      	b.n	8005b6c <__cvt+0xa0>

08005b8a <__exponent>:
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	f803 2b02 	strb.w	r2, [r3], #2
 8005b94:	bfb6      	itet	lt
 8005b96:	222d      	movlt	r2, #45	; 0x2d
 8005b98:	222b      	movge	r2, #43	; 0x2b
 8005b9a:	4249      	neglt	r1, r1
 8005b9c:	2909      	cmp	r1, #9
 8005b9e:	7042      	strb	r2, [r0, #1]
 8005ba0:	dd2b      	ble.n	8005bfa <__exponent+0x70>
 8005ba2:	f10d 0407 	add.w	r4, sp, #7
 8005ba6:	46a4      	mov	ip, r4
 8005ba8:	270a      	movs	r7, #10
 8005baa:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bae:	460a      	mov	r2, r1
 8005bb0:	46a6      	mov	lr, r4
 8005bb2:	fb07 1516 	mls	r5, r7, r6, r1
 8005bb6:	2a63      	cmp	r2, #99	; 0x63
 8005bb8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005bbc:	4631      	mov	r1, r6
 8005bbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8005bc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005bc6:	dcf0      	bgt.n	8005baa <__exponent+0x20>
 8005bc8:	3130      	adds	r1, #48	; 0x30
 8005bca:	f1ae 0502 	sub.w	r5, lr, #2
 8005bce:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	1c44      	adds	r4, r0, #1
 8005bd6:	4561      	cmp	r1, ip
 8005bd8:	d30a      	bcc.n	8005bf0 <__exponent+0x66>
 8005bda:	f10d 0209 	add.w	r2, sp, #9
 8005bde:	eba2 020e 	sub.w	r2, r2, lr
 8005be2:	4565      	cmp	r5, ip
 8005be4:	bf88      	it	hi
 8005be6:	2200      	movhi	r2, #0
 8005be8:	4413      	add	r3, r2
 8005bea:	1a18      	subs	r0, r3, r0
 8005bec:	b003      	add	sp, #12
 8005bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bf4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005bf8:	e7ed      	b.n	8005bd6 <__exponent+0x4c>
 8005bfa:	2330      	movs	r3, #48	; 0x30
 8005bfc:	3130      	adds	r1, #48	; 0x30
 8005bfe:	7083      	strb	r3, [r0, #2]
 8005c00:	70c1      	strb	r1, [r0, #3]
 8005c02:	1d03      	adds	r3, r0, #4
 8005c04:	e7f1      	b.n	8005bea <__exponent+0x60>
	...

08005c08 <_printf_float>:
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	b091      	sub	sp, #68	; 0x44
 8005c0e:	460c      	mov	r4, r1
 8005c10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005c14:	4616      	mov	r6, r2
 8005c16:	461f      	mov	r7, r3
 8005c18:	4605      	mov	r5, r0
 8005c1a:	f001 fa8f 	bl	800713c <_localeconv_r>
 8005c1e:	6803      	ldr	r3, [r0, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	9309      	str	r3, [sp, #36]	; 0x24
 8005c24:	f7fa fa94 	bl	8000150 <strlen>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	930e      	str	r3, [sp, #56]	; 0x38
 8005c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c30:	900a      	str	r0, [sp, #40]	; 0x28
 8005c32:	3307      	adds	r3, #7
 8005c34:	f023 0307 	bic.w	r3, r3, #7
 8005c38:	f103 0208 	add.w	r2, r3, #8
 8005c3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c40:	f8d4 b000 	ldr.w	fp, [r4]
 8005c44:	f8c8 2000 	str.w	r2, [r8]
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c50:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005c54:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005c58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5e:	4640      	mov	r0, r8
 8005c60:	4b9c      	ldr	r3, [pc, #624]	; (8005ed4 <_printf_float+0x2cc>)
 8005c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c64:	f7fa fed2 	bl	8000a0c <__aeabi_dcmpun>
 8005c68:	bb70      	cbnz	r0, 8005cc8 <_printf_float+0xc0>
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6e:	4640      	mov	r0, r8
 8005c70:	4b98      	ldr	r3, [pc, #608]	; (8005ed4 <_printf_float+0x2cc>)
 8005c72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c74:	f7fa feac 	bl	80009d0 <__aeabi_dcmple>
 8005c78:	bb30      	cbnz	r0, 8005cc8 <_printf_float+0xc0>
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4640      	mov	r0, r8
 8005c80:	4651      	mov	r1, sl
 8005c82:	f7fa fe9b 	bl	80009bc <__aeabi_dcmplt>
 8005c86:	b110      	cbz	r0, 8005c8e <_printf_float+0x86>
 8005c88:	232d      	movs	r3, #45	; 0x2d
 8005c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c8e:	4b92      	ldr	r3, [pc, #584]	; (8005ed8 <_printf_float+0x2d0>)
 8005c90:	4892      	ldr	r0, [pc, #584]	; (8005edc <_printf_float+0x2d4>)
 8005c92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c96:	bf94      	ite	ls
 8005c98:	4698      	movls	r8, r3
 8005c9a:	4680      	movhi	r8, r0
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	f04f 0a00 	mov.w	sl, #0
 8005ca2:	6123      	str	r3, [r4, #16]
 8005ca4:	f02b 0304 	bic.w	r3, fp, #4
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	4633      	mov	r3, r6
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	9700      	str	r7, [sp, #0]
 8005cb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005cb4:	f000 f9d4 	bl	8006060 <_printf_common>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f040 8090 	bne.w	8005dde <_printf_float+0x1d6>
 8005cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc2:	b011      	add	sp, #68	; 0x44
 8005cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc8:	4642      	mov	r2, r8
 8005cca:	4653      	mov	r3, sl
 8005ccc:	4640      	mov	r0, r8
 8005cce:	4651      	mov	r1, sl
 8005cd0:	f7fa fe9c 	bl	8000a0c <__aeabi_dcmpun>
 8005cd4:	b148      	cbz	r0, 8005cea <_printf_float+0xe2>
 8005cd6:	f1ba 0f00 	cmp.w	sl, #0
 8005cda:	bfb8      	it	lt
 8005cdc:	232d      	movlt	r3, #45	; 0x2d
 8005cde:	4880      	ldr	r0, [pc, #512]	; (8005ee0 <_printf_float+0x2d8>)
 8005ce0:	bfb8      	it	lt
 8005ce2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ce6:	4b7f      	ldr	r3, [pc, #508]	; (8005ee4 <_printf_float+0x2dc>)
 8005ce8:	e7d3      	b.n	8005c92 <_printf_float+0x8a>
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	d142      	bne.n	8005d7a <_printf_float+0x172>
 8005cf4:	2306      	movs	r3, #6
 8005cf6:	6063      	str	r3, [r4, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	9206      	str	r2, [sp, #24]
 8005cfc:	aa0e      	add	r2, sp, #56	; 0x38
 8005cfe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005d02:	aa0d      	add	r2, sp, #52	; 0x34
 8005d04:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005d08:	9203      	str	r2, [sp, #12]
 8005d0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005d0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	4642      	mov	r2, r8
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	4653      	mov	r3, sl
 8005d1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d20:	f7ff fed4 	bl	8005acc <__cvt>
 8005d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d26:	4680      	mov	r8, r0
 8005d28:	2947      	cmp	r1, #71	; 0x47
 8005d2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d2c:	d108      	bne.n	8005d40 <_printf_float+0x138>
 8005d2e:	1cc8      	adds	r0, r1, #3
 8005d30:	db02      	blt.n	8005d38 <_printf_float+0x130>
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	4299      	cmp	r1, r3
 8005d36:	dd40      	ble.n	8005dba <_printf_float+0x1b2>
 8005d38:	f1a9 0902 	sub.w	r9, r9, #2
 8005d3c:	fa5f f989 	uxtb.w	r9, r9
 8005d40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d44:	d81f      	bhi.n	8005d86 <_printf_float+0x17e>
 8005d46:	464a      	mov	r2, r9
 8005d48:	3901      	subs	r1, #1
 8005d4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d4e:	910d      	str	r1, [sp, #52]	; 0x34
 8005d50:	f7ff ff1b 	bl	8005b8a <__exponent>
 8005d54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d56:	4682      	mov	sl, r0
 8005d58:	1813      	adds	r3, r2, r0
 8005d5a:	2a01      	cmp	r2, #1
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	dc02      	bgt.n	8005d66 <_printf_float+0x15e>
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	07d2      	lsls	r2, r2, #31
 8005d64:	d501      	bpl.n	8005d6a <_printf_float+0x162>
 8005d66:	3301      	adds	r3, #1
 8005d68:	6123      	str	r3, [r4, #16]
 8005d6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d09b      	beq.n	8005caa <_printf_float+0xa2>
 8005d72:	232d      	movs	r3, #45	; 0x2d
 8005d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d78:	e797      	b.n	8005caa <_printf_float+0xa2>
 8005d7a:	2947      	cmp	r1, #71	; 0x47
 8005d7c:	d1bc      	bne.n	8005cf8 <_printf_float+0xf0>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1ba      	bne.n	8005cf8 <_printf_float+0xf0>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e7b7      	b.n	8005cf6 <_printf_float+0xee>
 8005d86:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d8a:	d118      	bne.n	8005dbe <_printf_float+0x1b6>
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	6863      	ldr	r3, [r4, #4]
 8005d90:	dd0b      	ble.n	8005daa <_printf_float+0x1a2>
 8005d92:	6121      	str	r1, [r4, #16]
 8005d94:	b913      	cbnz	r3, 8005d9c <_printf_float+0x194>
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	07d0      	lsls	r0, r2, #31
 8005d9a:	d502      	bpl.n	8005da2 <_printf_float+0x19a>
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	440b      	add	r3, r1
 8005da0:	6123      	str	r3, [r4, #16]
 8005da2:	f04f 0a00 	mov.w	sl, #0
 8005da6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005da8:	e7df      	b.n	8005d6a <_printf_float+0x162>
 8005daa:	b913      	cbnz	r3, 8005db2 <_printf_float+0x1aa>
 8005dac:	6822      	ldr	r2, [r4, #0]
 8005dae:	07d2      	lsls	r2, r2, #31
 8005db0:	d501      	bpl.n	8005db6 <_printf_float+0x1ae>
 8005db2:	3302      	adds	r3, #2
 8005db4:	e7f4      	b.n	8005da0 <_printf_float+0x198>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e7f2      	b.n	8005da0 <_printf_float+0x198>
 8005dba:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	db05      	blt.n	8005dd0 <_printf_float+0x1c8>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	6121      	str	r1, [r4, #16]
 8005dc8:	07d8      	lsls	r0, r3, #31
 8005dca:	d5ea      	bpl.n	8005da2 <_printf_float+0x19a>
 8005dcc:	1c4b      	adds	r3, r1, #1
 8005dce:	e7e7      	b.n	8005da0 <_printf_float+0x198>
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	bfcc      	ite	gt
 8005dd4:	2201      	movgt	r2, #1
 8005dd6:	f1c1 0202 	rsble	r2, r1, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	e7e0      	b.n	8005da0 <_printf_float+0x198>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	055a      	lsls	r2, r3, #21
 8005de2:	d407      	bmi.n	8005df4 <_printf_float+0x1ec>
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	4642      	mov	r2, r8
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	47b8      	blx	r7
 8005dee:	3001      	adds	r0, #1
 8005df0:	d12b      	bne.n	8005e4a <_printf_float+0x242>
 8005df2:	e764      	b.n	8005cbe <_printf_float+0xb6>
 8005df4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005df8:	f240 80dd 	bls.w	8005fb6 <_printf_float+0x3ae>
 8005dfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e00:	2200      	movs	r2, #0
 8005e02:	2300      	movs	r3, #0
 8005e04:	f7fa fdd0 	bl	80009a8 <__aeabi_dcmpeq>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d033      	beq.n	8005e74 <_printf_float+0x26c>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	4a35      	ldr	r2, [pc, #212]	; (8005ee8 <_printf_float+0x2e0>)
 8005e14:	47b8      	blx	r7
 8005e16:	3001      	adds	r0, #1
 8005e18:	f43f af51 	beq.w	8005cbe <_printf_float+0xb6>
 8005e1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e20:	429a      	cmp	r2, r3
 8005e22:	db02      	blt.n	8005e2a <_printf_float+0x222>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	07d8      	lsls	r0, r3, #31
 8005e28:	d50f      	bpl.n	8005e4a <_printf_float+0x242>
 8005e2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	f43f af42 	beq.w	8005cbe <_printf_float+0xb6>
 8005e3a:	f04f 0800 	mov.w	r8, #0
 8005e3e:	f104 091a 	add.w	r9, r4, #26
 8005e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e44:	3b01      	subs	r3, #1
 8005e46:	4543      	cmp	r3, r8
 8005e48:	dc09      	bgt.n	8005e5e <_printf_float+0x256>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	079b      	lsls	r3, r3, #30
 8005e4e:	f100 8102 	bmi.w	8006056 <_printf_float+0x44e>
 8005e52:	68e0      	ldr	r0, [r4, #12]
 8005e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e56:	4298      	cmp	r0, r3
 8005e58:	bfb8      	it	lt
 8005e5a:	4618      	movlt	r0, r3
 8005e5c:	e731      	b.n	8005cc2 <_printf_float+0xba>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	464a      	mov	r2, r9
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f af28 	beq.w	8005cbe <_printf_float+0xb6>
 8005e6e:	f108 0801 	add.w	r8, r8, #1
 8005e72:	e7e6      	b.n	8005e42 <_printf_float+0x23a>
 8005e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	dc38      	bgt.n	8005eec <_printf_float+0x2e4>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <_printf_float+0x2e0>)
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f af1a 	beq.w	8005cbe <_printf_float+0xb6>
 8005e8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	d102      	bne.n	8005e98 <_printf_float+0x290>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	07d9      	lsls	r1, r3, #31
 8005e96:	d5d8      	bpl.n	8005e4a <_printf_float+0x242>
 8005e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f af0b 	beq.w	8005cbe <_printf_float+0xb6>
 8005ea8:	f04f 0900 	mov.w	r9, #0
 8005eac:	f104 0a1a 	add.w	sl, r4, #26
 8005eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb2:	425b      	negs	r3, r3
 8005eb4:	454b      	cmp	r3, r9
 8005eb6:	dc01      	bgt.n	8005ebc <_printf_float+0x2b4>
 8005eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eba:	e794      	b.n	8005de6 <_printf_float+0x1de>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4652      	mov	r2, sl
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	47b8      	blx	r7
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	f43f aef9 	beq.w	8005cbe <_printf_float+0xb6>
 8005ecc:	f109 0901 	add.w	r9, r9, #1
 8005ed0:	e7ee      	b.n	8005eb0 <_printf_float+0x2a8>
 8005ed2:	bf00      	nop
 8005ed4:	7fefffff 	.word	0x7fefffff
 8005ed8:	0800b474 	.word	0x0800b474
 8005edc:	0800b478 	.word	0x0800b478
 8005ee0:	0800b480 	.word	0x0800b480
 8005ee4:	0800b47c 	.word	0x0800b47c
 8005ee8:	0800b484 	.word	0x0800b484
 8005eec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	bfa8      	it	ge
 8005ef4:	461a      	movge	r2, r3
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	4691      	mov	r9, r2
 8005efa:	dc37      	bgt.n	8005f6c <_printf_float+0x364>
 8005efc:	f04f 0b00 	mov.w	fp, #0
 8005f00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f04:	f104 021a 	add.w	r2, r4, #26
 8005f08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f0c:	ebaa 0309 	sub.w	r3, sl, r9
 8005f10:	455b      	cmp	r3, fp
 8005f12:	dc33      	bgt.n	8005f7c <_printf_float+0x374>
 8005f14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	db3b      	blt.n	8005f94 <_printf_float+0x38c>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	07da      	lsls	r2, r3, #31
 8005f20:	d438      	bmi.n	8005f94 <_printf_float+0x38c>
 8005f22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f26:	eba2 030a 	sub.w	r3, r2, sl
 8005f2a:	eba2 0901 	sub.w	r9, r2, r1
 8005f2e:	4599      	cmp	r9, r3
 8005f30:	bfa8      	it	ge
 8005f32:	4699      	movge	r9, r3
 8005f34:	f1b9 0f00 	cmp.w	r9, #0
 8005f38:	dc34      	bgt.n	8005fa4 <_printf_float+0x39c>
 8005f3a:	f04f 0800 	mov.w	r8, #0
 8005f3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f42:	f104 0a1a 	add.w	sl, r4, #26
 8005f46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	eba3 0309 	sub.w	r3, r3, r9
 8005f50:	4543      	cmp	r3, r8
 8005f52:	f77f af7a 	ble.w	8005e4a <_printf_float+0x242>
 8005f56:	2301      	movs	r3, #1
 8005f58:	4652      	mov	r2, sl
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	f43f aeac 	beq.w	8005cbe <_printf_float+0xb6>
 8005f66:	f108 0801 	add.w	r8, r8, #1
 8005f6a:	e7ec      	b.n	8005f46 <_printf_float+0x33e>
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4642      	mov	r2, r8
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	d1c0      	bne.n	8005efc <_printf_float+0x2f4>
 8005f7a:	e6a0      	b.n	8005cbe <_printf_float+0xb6>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	f43f ae99 	beq.w	8005cbe <_printf_float+0xb6>
 8005f8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f8e:	f10b 0b01 	add.w	fp, fp, #1
 8005f92:	e7b9      	b.n	8005f08 <_printf_float+0x300>
 8005f94:	4631      	mov	r1, r6
 8005f96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d1bf      	bne.n	8005f22 <_printf_float+0x31a>
 8005fa2:	e68c      	b.n	8005cbe <_printf_float+0xb6>
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	eb08 020a 	add.w	r2, r8, sl
 8005fae:	47b8      	blx	r7
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d1c2      	bne.n	8005f3a <_printf_float+0x332>
 8005fb4:	e683      	b.n	8005cbe <_printf_float+0xb6>
 8005fb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fb8:	2a01      	cmp	r2, #1
 8005fba:	dc01      	bgt.n	8005fc0 <_printf_float+0x3b8>
 8005fbc:	07db      	lsls	r3, r3, #31
 8005fbe:	d537      	bpl.n	8006030 <_printf_float+0x428>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4642      	mov	r2, r8
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b8      	blx	r7
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f43f ae77 	beq.w	8005cbe <_printf_float+0xb6>
 8005fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b8      	blx	r7
 8005fda:	3001      	adds	r0, #1
 8005fdc:	f43f ae6f 	beq.w	8005cbe <_printf_float+0xb6>
 8005fe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f7fa fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8005fec:	b9d8      	cbnz	r0, 8006026 <_printf_float+0x41e>
 8005fee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ff0:	f108 0201 	add.w	r2, r8, #1
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d10e      	bne.n	800601e <_printf_float+0x416>
 8006000:	e65d      	b.n	8005cbe <_printf_float+0xb6>
 8006002:	2301      	movs	r3, #1
 8006004:	464a      	mov	r2, r9
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	f43f ae56 	beq.w	8005cbe <_printf_float+0xb6>
 8006012:	f108 0801 	add.w	r8, r8, #1
 8006016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006018:	3b01      	subs	r3, #1
 800601a:	4543      	cmp	r3, r8
 800601c:	dcf1      	bgt.n	8006002 <_printf_float+0x3fa>
 800601e:	4653      	mov	r3, sl
 8006020:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006024:	e6e0      	b.n	8005de8 <_printf_float+0x1e0>
 8006026:	f04f 0800 	mov.w	r8, #0
 800602a:	f104 091a 	add.w	r9, r4, #26
 800602e:	e7f2      	b.n	8006016 <_printf_float+0x40e>
 8006030:	2301      	movs	r3, #1
 8006032:	4642      	mov	r2, r8
 8006034:	e7df      	b.n	8005ff6 <_printf_float+0x3ee>
 8006036:	2301      	movs	r3, #1
 8006038:	464a      	mov	r2, r9
 800603a:	4631      	mov	r1, r6
 800603c:	4628      	mov	r0, r5
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	f43f ae3c 	beq.w	8005cbe <_printf_float+0xb6>
 8006046:	f108 0801 	add.w	r8, r8, #1
 800604a:	68e3      	ldr	r3, [r4, #12]
 800604c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800604e:	1a5b      	subs	r3, r3, r1
 8006050:	4543      	cmp	r3, r8
 8006052:	dcf0      	bgt.n	8006036 <_printf_float+0x42e>
 8006054:	e6fd      	b.n	8005e52 <_printf_float+0x24a>
 8006056:	f04f 0800 	mov.w	r8, #0
 800605a:	f104 0919 	add.w	r9, r4, #25
 800605e:	e7f4      	b.n	800604a <_printf_float+0x442>

08006060 <_printf_common>:
 8006060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	4616      	mov	r6, r2
 8006066:	4699      	mov	r9, r3
 8006068:	688a      	ldr	r2, [r1, #8]
 800606a:	690b      	ldr	r3, [r1, #16]
 800606c:	4607      	mov	r7, r0
 800606e:	4293      	cmp	r3, r2
 8006070:	bfb8      	it	lt
 8006072:	4613      	movlt	r3, r2
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800607a:	460c      	mov	r4, r1
 800607c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006080:	b10a      	cbz	r2, 8006086 <_printf_common+0x26>
 8006082:	3301      	adds	r3, #1
 8006084:	6033      	str	r3, [r6, #0]
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	0699      	lsls	r1, r3, #26
 800608a:	bf42      	ittt	mi
 800608c:	6833      	ldrmi	r3, [r6, #0]
 800608e:	3302      	addmi	r3, #2
 8006090:	6033      	strmi	r3, [r6, #0]
 8006092:	6825      	ldr	r5, [r4, #0]
 8006094:	f015 0506 	ands.w	r5, r5, #6
 8006098:	d106      	bne.n	80060a8 <_printf_common+0x48>
 800609a:	f104 0a19 	add.w	sl, r4, #25
 800609e:	68e3      	ldr	r3, [r4, #12]
 80060a0:	6832      	ldr	r2, [r6, #0]
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	42ab      	cmp	r3, r5
 80060a6:	dc28      	bgt.n	80060fa <_printf_common+0x9a>
 80060a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060ac:	1e13      	subs	r3, r2, #0
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	bf18      	it	ne
 80060b2:	2301      	movne	r3, #1
 80060b4:	0692      	lsls	r2, r2, #26
 80060b6:	d42d      	bmi.n	8006114 <_printf_common+0xb4>
 80060b8:	4649      	mov	r1, r9
 80060ba:	4638      	mov	r0, r7
 80060bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060c0:	47c0      	blx	r8
 80060c2:	3001      	adds	r0, #1
 80060c4:	d020      	beq.n	8006108 <_printf_common+0xa8>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	68e5      	ldr	r5, [r4, #12]
 80060ca:	f003 0306 	and.w	r3, r3, #6
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	bf18      	it	ne
 80060d2:	2500      	movne	r5, #0
 80060d4:	6832      	ldr	r2, [r6, #0]
 80060d6:	f04f 0600 	mov.w	r6, #0
 80060da:	68a3      	ldr	r3, [r4, #8]
 80060dc:	bf08      	it	eq
 80060de:	1aad      	subeq	r5, r5, r2
 80060e0:	6922      	ldr	r2, [r4, #16]
 80060e2:	bf08      	it	eq
 80060e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bfc4      	itt	gt
 80060ec:	1a9b      	subgt	r3, r3, r2
 80060ee:	18ed      	addgt	r5, r5, r3
 80060f0:	341a      	adds	r4, #26
 80060f2:	42b5      	cmp	r5, r6
 80060f4:	d11a      	bne.n	800612c <_printf_common+0xcc>
 80060f6:	2000      	movs	r0, #0
 80060f8:	e008      	b.n	800610c <_printf_common+0xac>
 80060fa:	2301      	movs	r3, #1
 80060fc:	4652      	mov	r2, sl
 80060fe:	4649      	mov	r1, r9
 8006100:	4638      	mov	r0, r7
 8006102:	47c0      	blx	r8
 8006104:	3001      	adds	r0, #1
 8006106:	d103      	bne.n	8006110 <_printf_common+0xb0>
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	3501      	adds	r5, #1
 8006112:	e7c4      	b.n	800609e <_printf_common+0x3e>
 8006114:	2030      	movs	r0, #48	; 0x30
 8006116:	18e1      	adds	r1, r4, r3
 8006118:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006122:	4422      	add	r2, r4
 8006124:	3302      	adds	r3, #2
 8006126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800612a:	e7c5      	b.n	80060b8 <_printf_common+0x58>
 800612c:	2301      	movs	r3, #1
 800612e:	4622      	mov	r2, r4
 8006130:	4649      	mov	r1, r9
 8006132:	4638      	mov	r0, r7
 8006134:	47c0      	blx	r8
 8006136:	3001      	adds	r0, #1
 8006138:	d0e6      	beq.n	8006108 <_printf_common+0xa8>
 800613a:	3601      	adds	r6, #1
 800613c:	e7d9      	b.n	80060f2 <_printf_common+0x92>
	...

08006140 <_printf_i>:
 8006140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	460c      	mov	r4, r1
 8006146:	7e27      	ldrb	r7, [r4, #24]
 8006148:	4691      	mov	r9, r2
 800614a:	2f78      	cmp	r7, #120	; 0x78
 800614c:	4680      	mov	r8, r0
 800614e:	469a      	mov	sl, r3
 8006150:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006156:	d807      	bhi.n	8006168 <_printf_i+0x28>
 8006158:	2f62      	cmp	r7, #98	; 0x62
 800615a:	d80a      	bhi.n	8006172 <_printf_i+0x32>
 800615c:	2f00      	cmp	r7, #0
 800615e:	f000 80d9 	beq.w	8006314 <_printf_i+0x1d4>
 8006162:	2f58      	cmp	r7, #88	; 0x58
 8006164:	f000 80a4 	beq.w	80062b0 <_printf_i+0x170>
 8006168:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800616c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006170:	e03a      	b.n	80061e8 <_printf_i+0xa8>
 8006172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006176:	2b15      	cmp	r3, #21
 8006178:	d8f6      	bhi.n	8006168 <_printf_i+0x28>
 800617a:	a001      	add	r0, pc, #4	; (adr r0, 8006180 <_printf_i+0x40>)
 800617c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006180:	080061d9 	.word	0x080061d9
 8006184:	080061ed 	.word	0x080061ed
 8006188:	08006169 	.word	0x08006169
 800618c:	08006169 	.word	0x08006169
 8006190:	08006169 	.word	0x08006169
 8006194:	08006169 	.word	0x08006169
 8006198:	080061ed 	.word	0x080061ed
 800619c:	08006169 	.word	0x08006169
 80061a0:	08006169 	.word	0x08006169
 80061a4:	08006169 	.word	0x08006169
 80061a8:	08006169 	.word	0x08006169
 80061ac:	080062fb 	.word	0x080062fb
 80061b0:	0800621d 	.word	0x0800621d
 80061b4:	080062dd 	.word	0x080062dd
 80061b8:	08006169 	.word	0x08006169
 80061bc:	08006169 	.word	0x08006169
 80061c0:	0800631d 	.word	0x0800631d
 80061c4:	08006169 	.word	0x08006169
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	08006169 	.word	0x08006169
 80061d0:	08006169 	.word	0x08006169
 80061d4:	080062e5 	.word	0x080062e5
 80061d8:	680b      	ldr	r3, [r1, #0]
 80061da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061de:	1d1a      	adds	r2, r3, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	600a      	str	r2, [r1, #0]
 80061e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0a4      	b.n	8006336 <_printf_i+0x1f6>
 80061ec:	6825      	ldr	r5, [r4, #0]
 80061ee:	6808      	ldr	r0, [r1, #0]
 80061f0:	062e      	lsls	r6, r5, #24
 80061f2:	f100 0304 	add.w	r3, r0, #4
 80061f6:	d50a      	bpl.n	800620e <_printf_i+0xce>
 80061f8:	6805      	ldr	r5, [r0, #0]
 80061fa:	600b      	str	r3, [r1, #0]
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	da03      	bge.n	8006208 <_printf_i+0xc8>
 8006200:	232d      	movs	r3, #45	; 0x2d
 8006202:	426d      	negs	r5, r5
 8006204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006208:	230a      	movs	r3, #10
 800620a:	485e      	ldr	r0, [pc, #376]	; (8006384 <_printf_i+0x244>)
 800620c:	e019      	b.n	8006242 <_printf_i+0x102>
 800620e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006212:	6805      	ldr	r5, [r0, #0]
 8006214:	600b      	str	r3, [r1, #0]
 8006216:	bf18      	it	ne
 8006218:	b22d      	sxthne	r5, r5
 800621a:	e7ef      	b.n	80061fc <_printf_i+0xbc>
 800621c:	680b      	ldr	r3, [r1, #0]
 800621e:	6825      	ldr	r5, [r4, #0]
 8006220:	1d18      	adds	r0, r3, #4
 8006222:	6008      	str	r0, [r1, #0]
 8006224:	0628      	lsls	r0, r5, #24
 8006226:	d501      	bpl.n	800622c <_printf_i+0xec>
 8006228:	681d      	ldr	r5, [r3, #0]
 800622a:	e002      	b.n	8006232 <_printf_i+0xf2>
 800622c:	0669      	lsls	r1, r5, #25
 800622e:	d5fb      	bpl.n	8006228 <_printf_i+0xe8>
 8006230:	881d      	ldrh	r5, [r3, #0]
 8006232:	2f6f      	cmp	r7, #111	; 0x6f
 8006234:	bf0c      	ite	eq
 8006236:	2308      	moveq	r3, #8
 8006238:	230a      	movne	r3, #10
 800623a:	4852      	ldr	r0, [pc, #328]	; (8006384 <_printf_i+0x244>)
 800623c:	2100      	movs	r1, #0
 800623e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006242:	6866      	ldr	r6, [r4, #4]
 8006244:	2e00      	cmp	r6, #0
 8006246:	bfa8      	it	ge
 8006248:	6821      	ldrge	r1, [r4, #0]
 800624a:	60a6      	str	r6, [r4, #8]
 800624c:	bfa4      	itt	ge
 800624e:	f021 0104 	bicge.w	r1, r1, #4
 8006252:	6021      	strge	r1, [r4, #0]
 8006254:	b90d      	cbnz	r5, 800625a <_printf_i+0x11a>
 8006256:	2e00      	cmp	r6, #0
 8006258:	d04d      	beq.n	80062f6 <_printf_i+0x1b6>
 800625a:	4616      	mov	r6, r2
 800625c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006260:	fb03 5711 	mls	r7, r3, r1, r5
 8006264:	5dc7      	ldrb	r7, [r0, r7]
 8006266:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800626a:	462f      	mov	r7, r5
 800626c:	42bb      	cmp	r3, r7
 800626e:	460d      	mov	r5, r1
 8006270:	d9f4      	bls.n	800625c <_printf_i+0x11c>
 8006272:	2b08      	cmp	r3, #8
 8006274:	d10b      	bne.n	800628e <_printf_i+0x14e>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	07df      	lsls	r7, r3, #31
 800627a:	d508      	bpl.n	800628e <_printf_i+0x14e>
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	6861      	ldr	r1, [r4, #4]
 8006280:	4299      	cmp	r1, r3
 8006282:	bfde      	ittt	le
 8006284:	2330      	movle	r3, #48	; 0x30
 8006286:	f806 3c01 	strble.w	r3, [r6, #-1]
 800628a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800628e:	1b92      	subs	r2, r2, r6
 8006290:	6122      	str	r2, [r4, #16]
 8006292:	464b      	mov	r3, r9
 8006294:	4621      	mov	r1, r4
 8006296:	4640      	mov	r0, r8
 8006298:	f8cd a000 	str.w	sl, [sp]
 800629c:	aa03      	add	r2, sp, #12
 800629e:	f7ff fedf 	bl	8006060 <_printf_common>
 80062a2:	3001      	adds	r0, #1
 80062a4:	d14c      	bne.n	8006340 <_printf_i+0x200>
 80062a6:	f04f 30ff 	mov.w	r0, #4294967295
 80062aa:	b004      	add	sp, #16
 80062ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b0:	4834      	ldr	r0, [pc, #208]	; (8006384 <_printf_i+0x244>)
 80062b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062b6:	680e      	ldr	r6, [r1, #0]
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80062be:	061f      	lsls	r7, r3, #24
 80062c0:	600e      	str	r6, [r1, #0]
 80062c2:	d514      	bpl.n	80062ee <_printf_i+0x1ae>
 80062c4:	07d9      	lsls	r1, r3, #31
 80062c6:	bf44      	itt	mi
 80062c8:	f043 0320 	orrmi.w	r3, r3, #32
 80062cc:	6023      	strmi	r3, [r4, #0]
 80062ce:	b91d      	cbnz	r5, 80062d8 <_printf_i+0x198>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	f023 0320 	bic.w	r3, r3, #32
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	2310      	movs	r3, #16
 80062da:	e7af      	b.n	800623c <_printf_i+0xfc>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	f043 0320 	orr.w	r3, r3, #32
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	2378      	movs	r3, #120	; 0x78
 80062e6:	4828      	ldr	r0, [pc, #160]	; (8006388 <_printf_i+0x248>)
 80062e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ec:	e7e3      	b.n	80062b6 <_printf_i+0x176>
 80062ee:	065e      	lsls	r6, r3, #25
 80062f0:	bf48      	it	mi
 80062f2:	b2ad      	uxthmi	r5, r5
 80062f4:	e7e6      	b.n	80062c4 <_printf_i+0x184>
 80062f6:	4616      	mov	r6, r2
 80062f8:	e7bb      	b.n	8006272 <_printf_i+0x132>
 80062fa:	680b      	ldr	r3, [r1, #0]
 80062fc:	6826      	ldr	r6, [r4, #0]
 80062fe:	1d1d      	adds	r5, r3, #4
 8006300:	6960      	ldr	r0, [r4, #20]
 8006302:	600d      	str	r5, [r1, #0]
 8006304:	0635      	lsls	r5, r6, #24
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	d501      	bpl.n	800630e <_printf_i+0x1ce>
 800630a:	6018      	str	r0, [r3, #0]
 800630c:	e002      	b.n	8006314 <_printf_i+0x1d4>
 800630e:	0671      	lsls	r1, r6, #25
 8006310:	d5fb      	bpl.n	800630a <_printf_i+0x1ca>
 8006312:	8018      	strh	r0, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	4616      	mov	r6, r2
 8006318:	6123      	str	r3, [r4, #16]
 800631a:	e7ba      	b.n	8006292 <_printf_i+0x152>
 800631c:	680b      	ldr	r3, [r1, #0]
 800631e:	1d1a      	adds	r2, r3, #4
 8006320:	600a      	str	r2, [r1, #0]
 8006322:	681e      	ldr	r6, [r3, #0]
 8006324:	2100      	movs	r1, #0
 8006326:	4630      	mov	r0, r6
 8006328:	6862      	ldr	r2, [r4, #4]
 800632a:	f000 ff13 	bl	8007154 <memchr>
 800632e:	b108      	cbz	r0, 8006334 <_printf_i+0x1f4>
 8006330:	1b80      	subs	r0, r0, r6
 8006332:	6060      	str	r0, [r4, #4]
 8006334:	6863      	ldr	r3, [r4, #4]
 8006336:	6123      	str	r3, [r4, #16]
 8006338:	2300      	movs	r3, #0
 800633a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800633e:	e7a8      	b.n	8006292 <_printf_i+0x152>
 8006340:	4632      	mov	r2, r6
 8006342:	4649      	mov	r1, r9
 8006344:	4640      	mov	r0, r8
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	47d0      	blx	sl
 800634a:	3001      	adds	r0, #1
 800634c:	d0ab      	beq.n	80062a6 <_printf_i+0x166>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	079b      	lsls	r3, r3, #30
 8006352:	d413      	bmi.n	800637c <_printf_i+0x23c>
 8006354:	68e0      	ldr	r0, [r4, #12]
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	4298      	cmp	r0, r3
 800635a:	bfb8      	it	lt
 800635c:	4618      	movlt	r0, r3
 800635e:	e7a4      	b.n	80062aa <_printf_i+0x16a>
 8006360:	2301      	movs	r3, #1
 8006362:	4632      	mov	r2, r6
 8006364:	4649      	mov	r1, r9
 8006366:	4640      	mov	r0, r8
 8006368:	47d0      	blx	sl
 800636a:	3001      	adds	r0, #1
 800636c:	d09b      	beq.n	80062a6 <_printf_i+0x166>
 800636e:	3501      	adds	r5, #1
 8006370:	68e3      	ldr	r3, [r4, #12]
 8006372:	9903      	ldr	r1, [sp, #12]
 8006374:	1a5b      	subs	r3, r3, r1
 8006376:	42ab      	cmp	r3, r5
 8006378:	dcf2      	bgt.n	8006360 <_printf_i+0x220>
 800637a:	e7eb      	b.n	8006354 <_printf_i+0x214>
 800637c:	2500      	movs	r5, #0
 800637e:	f104 0619 	add.w	r6, r4, #25
 8006382:	e7f5      	b.n	8006370 <_printf_i+0x230>
 8006384:	0800b486 	.word	0x0800b486
 8006388:	0800b497 	.word	0x0800b497

0800638c <siprintf>:
 800638c:	b40e      	push	{r1, r2, r3}
 800638e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006392:	b500      	push	{lr}
 8006394:	b09c      	sub	sp, #112	; 0x70
 8006396:	ab1d      	add	r3, sp, #116	; 0x74
 8006398:	9002      	str	r0, [sp, #8]
 800639a:	9006      	str	r0, [sp, #24]
 800639c:	9107      	str	r1, [sp, #28]
 800639e:	9104      	str	r1, [sp, #16]
 80063a0:	4808      	ldr	r0, [pc, #32]	; (80063c4 <siprintf+0x38>)
 80063a2:	4909      	ldr	r1, [pc, #36]	; (80063c8 <siprintf+0x3c>)
 80063a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a8:	9105      	str	r1, [sp, #20]
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	a902      	add	r1, sp, #8
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	f001 fb7e 	bl	8007ab0 <_svfiprintf_r>
 80063b4:	2200      	movs	r2, #0
 80063b6:	9b02      	ldr	r3, [sp, #8]
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	b01c      	add	sp, #112	; 0x70
 80063bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c0:	b003      	add	sp, #12
 80063c2:	4770      	bx	lr
 80063c4:	20000030 	.word	0x20000030
 80063c8:	ffff0208 	.word	0xffff0208

080063cc <_vsniprintf_r>:
 80063cc:	b530      	push	{r4, r5, lr}
 80063ce:	1e14      	subs	r4, r2, #0
 80063d0:	4605      	mov	r5, r0
 80063d2:	b09b      	sub	sp, #108	; 0x6c
 80063d4:	4618      	mov	r0, r3
 80063d6:	da05      	bge.n	80063e4 <_vsniprintf_r+0x18>
 80063d8:	238b      	movs	r3, #139	; 0x8b
 80063da:	f04f 30ff 	mov.w	r0, #4294967295
 80063de:	602b      	str	r3, [r5, #0]
 80063e0:	b01b      	add	sp, #108	; 0x6c
 80063e2:	bd30      	pop	{r4, r5, pc}
 80063e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80063e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80063ec:	bf0c      	ite	eq
 80063ee:	4623      	moveq	r3, r4
 80063f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80063f4:	9302      	str	r3, [sp, #8]
 80063f6:	9305      	str	r3, [sp, #20]
 80063f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063fc:	4602      	mov	r2, r0
 80063fe:	9100      	str	r1, [sp, #0]
 8006400:	9104      	str	r1, [sp, #16]
 8006402:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006406:	4669      	mov	r1, sp
 8006408:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800640a:	4628      	mov	r0, r5
 800640c:	f001 fb50 	bl	8007ab0 <_svfiprintf_r>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	bfbc      	itt	lt
 8006414:	238b      	movlt	r3, #139	; 0x8b
 8006416:	602b      	strlt	r3, [r5, #0]
 8006418:	2c00      	cmp	r4, #0
 800641a:	d0e1      	beq.n	80063e0 <_vsniprintf_r+0x14>
 800641c:	2200      	movs	r2, #0
 800641e:	9b00      	ldr	r3, [sp, #0]
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e7dd      	b.n	80063e0 <_vsniprintf_r+0x14>

08006424 <vsniprintf>:
 8006424:	b507      	push	{r0, r1, r2, lr}
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	460a      	mov	r2, r1
 800642c:	4601      	mov	r1, r0
 800642e:	4803      	ldr	r0, [pc, #12]	; (800643c <vsniprintf+0x18>)
 8006430:	6800      	ldr	r0, [r0, #0]
 8006432:	f7ff ffcb 	bl	80063cc <_vsniprintf_r>
 8006436:	b003      	add	sp, #12
 8006438:	f85d fb04 	ldr.w	pc, [sp], #4
 800643c:	20000030 	.word	0x20000030

08006440 <quorem>:
 8006440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	6903      	ldr	r3, [r0, #16]
 8006446:	690c      	ldr	r4, [r1, #16]
 8006448:	4607      	mov	r7, r0
 800644a:	42a3      	cmp	r3, r4
 800644c:	f2c0 8083 	blt.w	8006556 <quorem+0x116>
 8006450:	3c01      	subs	r4, #1
 8006452:	f100 0514 	add.w	r5, r0, #20
 8006456:	f101 0814 	add.w	r8, r1, #20
 800645a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006468:	3301      	adds	r3, #1
 800646a:	429a      	cmp	r2, r3
 800646c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006470:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006478:	d332      	bcc.n	80064e0 <quorem+0xa0>
 800647a:	f04f 0e00 	mov.w	lr, #0
 800647e:	4640      	mov	r0, r8
 8006480:	46ac      	mov	ip, r5
 8006482:	46f2      	mov	sl, lr
 8006484:	f850 2b04 	ldr.w	r2, [r0], #4
 8006488:	b293      	uxth	r3, r2
 800648a:	fb06 e303 	mla	r3, r6, r3, lr
 800648e:	0c12      	lsrs	r2, r2, #16
 8006490:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006494:	fb06 e202 	mla	r2, r6, r2, lr
 8006498:	b29b      	uxth	r3, r3
 800649a:	ebaa 0303 	sub.w	r3, sl, r3
 800649e:	f8dc a000 	ldr.w	sl, [ip]
 80064a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064a6:	fa1f fa8a 	uxth.w	sl, sl
 80064aa:	4453      	add	r3, sl
 80064ac:	fa1f fa82 	uxth.w	sl, r2
 80064b0:	f8dc 2000 	ldr.w	r2, [ip]
 80064b4:	4581      	cmp	r9, r0
 80064b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80064ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064c8:	f84c 3b04 	str.w	r3, [ip], #4
 80064cc:	d2da      	bcs.n	8006484 <quorem+0x44>
 80064ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80064d2:	b92b      	cbnz	r3, 80064e0 <quorem+0xa0>
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	3b04      	subs	r3, #4
 80064d8:	429d      	cmp	r5, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	d32f      	bcc.n	800653e <quorem+0xfe>
 80064de:	613c      	str	r4, [r7, #16]
 80064e0:	4638      	mov	r0, r7
 80064e2:	f001 f8cd 	bl	8007680 <__mcmp>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	db25      	blt.n	8006536 <quorem+0xf6>
 80064ea:	4628      	mov	r0, r5
 80064ec:	f04f 0c00 	mov.w	ip, #0
 80064f0:	3601      	adds	r6, #1
 80064f2:	f858 1b04 	ldr.w	r1, [r8], #4
 80064f6:	f8d0 e000 	ldr.w	lr, [r0]
 80064fa:	b28b      	uxth	r3, r1
 80064fc:	ebac 0303 	sub.w	r3, ip, r3
 8006500:	fa1f f28e 	uxth.w	r2, lr
 8006504:	4413      	add	r3, r2
 8006506:	0c0a      	lsrs	r2, r1, #16
 8006508:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800650c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006516:	45c1      	cmp	r9, r8
 8006518:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800651c:	f840 3b04 	str.w	r3, [r0], #4
 8006520:	d2e7      	bcs.n	80064f2 <quorem+0xb2>
 8006522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800652a:	b922      	cbnz	r2, 8006536 <quorem+0xf6>
 800652c:	3b04      	subs	r3, #4
 800652e:	429d      	cmp	r5, r3
 8006530:	461a      	mov	r2, r3
 8006532:	d30a      	bcc.n	800654a <quorem+0x10a>
 8006534:	613c      	str	r4, [r7, #16]
 8006536:	4630      	mov	r0, r6
 8006538:	b003      	add	sp, #12
 800653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	3b04      	subs	r3, #4
 8006542:	2a00      	cmp	r2, #0
 8006544:	d1cb      	bne.n	80064de <quorem+0x9e>
 8006546:	3c01      	subs	r4, #1
 8006548:	e7c6      	b.n	80064d8 <quorem+0x98>
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	3b04      	subs	r3, #4
 800654e:	2a00      	cmp	r2, #0
 8006550:	d1f0      	bne.n	8006534 <quorem+0xf4>
 8006552:	3c01      	subs	r4, #1
 8006554:	e7eb      	b.n	800652e <quorem+0xee>
 8006556:	2000      	movs	r0, #0
 8006558:	e7ee      	b.n	8006538 <quorem+0xf8>
 800655a:	0000      	movs	r0, r0
 800655c:	0000      	movs	r0, r0
	...

08006560 <_dtoa_r>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	4616      	mov	r6, r2
 8006566:	461f      	mov	r7, r3
 8006568:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800656a:	b099      	sub	sp, #100	; 0x64
 800656c:	4605      	mov	r5, r0
 800656e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006572:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006576:	b974      	cbnz	r4, 8006596 <_dtoa_r+0x36>
 8006578:	2010      	movs	r0, #16
 800657a:	f000 fde3 	bl	8007144 <malloc>
 800657e:	4602      	mov	r2, r0
 8006580:	6268      	str	r0, [r5, #36]	; 0x24
 8006582:	b920      	cbnz	r0, 800658e <_dtoa_r+0x2e>
 8006584:	21ea      	movs	r1, #234	; 0xea
 8006586:	4bae      	ldr	r3, [pc, #696]	; (8006840 <_dtoa_r+0x2e0>)
 8006588:	48ae      	ldr	r0, [pc, #696]	; (8006844 <_dtoa_r+0x2e4>)
 800658a:	f001 fba1 	bl	8007cd0 <__assert_func>
 800658e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006592:	6004      	str	r4, [r0, #0]
 8006594:	60c4      	str	r4, [r0, #12]
 8006596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006598:	6819      	ldr	r1, [r3, #0]
 800659a:	b151      	cbz	r1, 80065b2 <_dtoa_r+0x52>
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	2301      	movs	r3, #1
 80065a0:	4093      	lsls	r3, r2
 80065a2:	604a      	str	r2, [r1, #4]
 80065a4:	608b      	str	r3, [r1, #8]
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 fe30 	bl	800720c <_Bfree>
 80065ac:	2200      	movs	r2, #0
 80065ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	1e3b      	subs	r3, r7, #0
 80065b4:	bfaf      	iteee	ge
 80065b6:	2300      	movge	r3, #0
 80065b8:	2201      	movlt	r2, #1
 80065ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065be:	9305      	strlt	r3, [sp, #20]
 80065c0:	bfa8      	it	ge
 80065c2:	f8c8 3000 	strge.w	r3, [r8]
 80065c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80065ca:	4b9f      	ldr	r3, [pc, #636]	; (8006848 <_dtoa_r+0x2e8>)
 80065cc:	bfb8      	it	lt
 80065ce:	f8c8 2000 	strlt.w	r2, [r8]
 80065d2:	ea33 0309 	bics.w	r3, r3, r9
 80065d6:	d119      	bne.n	800660c <_dtoa_r+0xac>
 80065d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80065dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065e4:	4333      	orrs	r3, r6
 80065e6:	f000 8580 	beq.w	80070ea <_dtoa_r+0xb8a>
 80065ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065ec:	b953      	cbnz	r3, 8006604 <_dtoa_r+0xa4>
 80065ee:	4b97      	ldr	r3, [pc, #604]	; (800684c <_dtoa_r+0x2ec>)
 80065f0:	e022      	b.n	8006638 <_dtoa_r+0xd8>
 80065f2:	4b97      	ldr	r3, [pc, #604]	; (8006850 <_dtoa_r+0x2f0>)
 80065f4:	9308      	str	r3, [sp, #32]
 80065f6:	3308      	adds	r3, #8
 80065f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	9808      	ldr	r0, [sp, #32]
 80065fe:	b019      	add	sp, #100	; 0x64
 8006600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006604:	4b91      	ldr	r3, [pc, #580]	; (800684c <_dtoa_r+0x2ec>)
 8006606:	9308      	str	r3, [sp, #32]
 8006608:	3303      	adds	r3, #3
 800660a:	e7f5      	b.n	80065f8 <_dtoa_r+0x98>
 800660c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006610:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	f7fa f9c4 	bl	80009a8 <__aeabi_dcmpeq>
 8006620:	4680      	mov	r8, r0
 8006622:	b158      	cbz	r0, 800663c <_dtoa_r+0xdc>
 8006624:	2301      	movs	r3, #1
 8006626:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8559 	beq.w	80070e4 <_dtoa_r+0xb84>
 8006632:	4888      	ldr	r0, [pc, #544]	; (8006854 <_dtoa_r+0x2f4>)
 8006634:	6018      	str	r0, [r3, #0]
 8006636:	1e43      	subs	r3, r0, #1
 8006638:	9308      	str	r3, [sp, #32]
 800663a:	e7df      	b.n	80065fc <_dtoa_r+0x9c>
 800663c:	ab16      	add	r3, sp, #88	; 0x58
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	ab17      	add	r3, sp, #92	; 0x5c
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	4628      	mov	r0, r5
 8006646:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800664a:	f001 f8c5 	bl	80077d8 <__d2b>
 800664e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006652:	4682      	mov	sl, r0
 8006654:	2c00      	cmp	r4, #0
 8006656:	d07e      	beq.n	8006756 <_dtoa_r+0x1f6>
 8006658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800665c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800665e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006666:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800666a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800666e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006672:	2200      	movs	r2, #0
 8006674:	4b78      	ldr	r3, [pc, #480]	; (8006858 <_dtoa_r+0x2f8>)
 8006676:	f7f9 fd77 	bl	8000168 <__aeabi_dsub>
 800667a:	a36b      	add	r3, pc, #428	; (adr r3, 8006828 <_dtoa_r+0x2c8>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f7f9 ff2a 	bl	80004d8 <__aeabi_dmul>
 8006684:	a36a      	add	r3, pc, #424	; (adr r3, 8006830 <_dtoa_r+0x2d0>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f7f9 fd6f 	bl	800016c <__adddf3>
 800668e:	4606      	mov	r6, r0
 8006690:	4620      	mov	r0, r4
 8006692:	460f      	mov	r7, r1
 8006694:	f7f9 feb6 	bl	8000404 <__aeabi_i2d>
 8006698:	a367      	add	r3, pc, #412	; (adr r3, 8006838 <_dtoa_r+0x2d8>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7f9 ff1b 	bl	80004d8 <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4630      	mov	r0, r6
 80066a8:	4639      	mov	r1, r7
 80066aa:	f7f9 fd5f 	bl	800016c <__adddf3>
 80066ae:	4606      	mov	r6, r0
 80066b0:	460f      	mov	r7, r1
 80066b2:	f7fa f9c1 	bl	8000a38 <__aeabi_d2iz>
 80066b6:	2200      	movs	r2, #0
 80066b8:	4681      	mov	r9, r0
 80066ba:	2300      	movs	r3, #0
 80066bc:	4630      	mov	r0, r6
 80066be:	4639      	mov	r1, r7
 80066c0:	f7fa f97c 	bl	80009bc <__aeabi_dcmplt>
 80066c4:	b148      	cbz	r0, 80066da <_dtoa_r+0x17a>
 80066c6:	4648      	mov	r0, r9
 80066c8:	f7f9 fe9c 	bl	8000404 <__aeabi_i2d>
 80066cc:	4632      	mov	r2, r6
 80066ce:	463b      	mov	r3, r7
 80066d0:	f7fa f96a 	bl	80009a8 <__aeabi_dcmpeq>
 80066d4:	b908      	cbnz	r0, 80066da <_dtoa_r+0x17a>
 80066d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80066da:	f1b9 0f16 	cmp.w	r9, #22
 80066de:	d857      	bhi.n	8006790 <_dtoa_r+0x230>
 80066e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066e4:	4b5d      	ldr	r3, [pc, #372]	; (800685c <_dtoa_r+0x2fc>)
 80066e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f7fa f965 	bl	80009bc <__aeabi_dcmplt>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d04e      	beq.n	8006794 <_dtoa_r+0x234>
 80066f6:	2300      	movs	r3, #0
 80066f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80066fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80066fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006700:	1b1c      	subs	r4, r3, r4
 8006702:	1e63      	subs	r3, r4, #1
 8006704:	9309      	str	r3, [sp, #36]	; 0x24
 8006706:	bf49      	itett	mi
 8006708:	f1c4 0301 	rsbmi	r3, r4, #1
 800670c:	2300      	movpl	r3, #0
 800670e:	9306      	strmi	r3, [sp, #24]
 8006710:	2300      	movmi	r3, #0
 8006712:	bf54      	ite	pl
 8006714:	9306      	strpl	r3, [sp, #24]
 8006716:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006718:	f1b9 0f00 	cmp.w	r9, #0
 800671c:	db3c      	blt.n	8006798 <_dtoa_r+0x238>
 800671e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006720:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006724:	444b      	add	r3, r9
 8006726:	9309      	str	r3, [sp, #36]	; 0x24
 8006728:	2300      	movs	r3, #0
 800672a:	930a      	str	r3, [sp, #40]	; 0x28
 800672c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800672e:	2b09      	cmp	r3, #9
 8006730:	d86c      	bhi.n	800680c <_dtoa_r+0x2ac>
 8006732:	2b05      	cmp	r3, #5
 8006734:	bfc4      	itt	gt
 8006736:	3b04      	subgt	r3, #4
 8006738:	9322      	strgt	r3, [sp, #136]	; 0x88
 800673a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800673c:	bfc8      	it	gt
 800673e:	2400      	movgt	r4, #0
 8006740:	f1a3 0302 	sub.w	r3, r3, #2
 8006744:	bfd8      	it	le
 8006746:	2401      	movle	r4, #1
 8006748:	2b03      	cmp	r3, #3
 800674a:	f200 808b 	bhi.w	8006864 <_dtoa_r+0x304>
 800674e:	e8df f003 	tbb	[pc, r3]
 8006752:	4f2d      	.short	0x4f2d
 8006754:	5b4d      	.short	0x5b4d
 8006756:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800675a:	441c      	add	r4, r3
 800675c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006760:	2b20      	cmp	r3, #32
 8006762:	bfc3      	ittte	gt
 8006764:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006768:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800676c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006770:	f1c3 0320 	rsble	r3, r3, #32
 8006774:	bfc6      	itte	gt
 8006776:	fa26 f000 	lsrgt.w	r0, r6, r0
 800677a:	4318      	orrgt	r0, r3
 800677c:	fa06 f003 	lslle.w	r0, r6, r3
 8006780:	f7f9 fe30 	bl	80003e4 <__aeabi_ui2d>
 8006784:	2301      	movs	r3, #1
 8006786:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800678a:	3c01      	subs	r4, #1
 800678c:	9313      	str	r3, [sp, #76]	; 0x4c
 800678e:	e770      	b.n	8006672 <_dtoa_r+0x112>
 8006790:	2301      	movs	r3, #1
 8006792:	e7b3      	b.n	80066fc <_dtoa_r+0x19c>
 8006794:	900f      	str	r0, [sp, #60]	; 0x3c
 8006796:	e7b2      	b.n	80066fe <_dtoa_r+0x19e>
 8006798:	9b06      	ldr	r3, [sp, #24]
 800679a:	eba3 0309 	sub.w	r3, r3, r9
 800679e:	9306      	str	r3, [sp, #24]
 80067a0:	f1c9 0300 	rsb	r3, r9, #0
 80067a4:	930a      	str	r3, [sp, #40]	; 0x28
 80067a6:	2300      	movs	r3, #0
 80067a8:	930e      	str	r3, [sp, #56]	; 0x38
 80067aa:	e7bf      	b.n	800672c <_dtoa_r+0x1cc>
 80067ac:	2300      	movs	r3, #0
 80067ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80067b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dc59      	bgt.n	800686a <_dtoa_r+0x30a>
 80067b6:	f04f 0b01 	mov.w	fp, #1
 80067ba:	465b      	mov	r3, fp
 80067bc:	f8cd b008 	str.w	fp, [sp, #8]
 80067c0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80067c4:	2200      	movs	r2, #0
 80067c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80067c8:	6042      	str	r2, [r0, #4]
 80067ca:	2204      	movs	r2, #4
 80067cc:	f102 0614 	add.w	r6, r2, #20
 80067d0:	429e      	cmp	r6, r3
 80067d2:	6841      	ldr	r1, [r0, #4]
 80067d4:	d94f      	bls.n	8006876 <_dtoa_r+0x316>
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 fcd8 	bl	800718c <_Balloc>
 80067dc:	9008      	str	r0, [sp, #32]
 80067de:	2800      	cmp	r0, #0
 80067e0:	d14d      	bne.n	800687e <_dtoa_r+0x31e>
 80067e2:	4602      	mov	r2, r0
 80067e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <_dtoa_r+0x300>)
 80067ea:	e6cd      	b.n	8006588 <_dtoa_r+0x28>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e7de      	b.n	80067ae <_dtoa_r+0x24e>
 80067f0:	2300      	movs	r3, #0
 80067f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067f6:	eb09 0b03 	add.w	fp, r9, r3
 80067fa:	f10b 0301 	add.w	r3, fp, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	9302      	str	r3, [sp, #8]
 8006802:	bfb8      	it	lt
 8006804:	2301      	movlt	r3, #1
 8006806:	e7dd      	b.n	80067c4 <_dtoa_r+0x264>
 8006808:	2301      	movs	r3, #1
 800680a:	e7f2      	b.n	80067f2 <_dtoa_r+0x292>
 800680c:	2401      	movs	r4, #1
 800680e:	2300      	movs	r3, #0
 8006810:	940b      	str	r4, [sp, #44]	; 0x2c
 8006812:	9322      	str	r3, [sp, #136]	; 0x88
 8006814:	f04f 3bff 	mov.w	fp, #4294967295
 8006818:	2200      	movs	r2, #0
 800681a:	2312      	movs	r3, #18
 800681c:	f8cd b008 	str.w	fp, [sp, #8]
 8006820:	9223      	str	r2, [sp, #140]	; 0x8c
 8006822:	e7cf      	b.n	80067c4 <_dtoa_r+0x264>
 8006824:	f3af 8000 	nop.w
 8006828:	636f4361 	.word	0x636f4361
 800682c:	3fd287a7 	.word	0x3fd287a7
 8006830:	8b60c8b3 	.word	0x8b60c8b3
 8006834:	3fc68a28 	.word	0x3fc68a28
 8006838:	509f79fb 	.word	0x509f79fb
 800683c:	3fd34413 	.word	0x3fd34413
 8006840:	0800b4b5 	.word	0x0800b4b5
 8006844:	0800b4cc 	.word	0x0800b4cc
 8006848:	7ff00000 	.word	0x7ff00000
 800684c:	0800b4b1 	.word	0x0800b4b1
 8006850:	0800b4a8 	.word	0x0800b4a8
 8006854:	0800b485 	.word	0x0800b485
 8006858:	3ff80000 	.word	0x3ff80000
 800685c:	0800b5c8 	.word	0x0800b5c8
 8006860:	0800b52b 	.word	0x0800b52b
 8006864:	2301      	movs	r3, #1
 8006866:	930b      	str	r3, [sp, #44]	; 0x2c
 8006868:	e7d4      	b.n	8006814 <_dtoa_r+0x2b4>
 800686a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800686e:	465b      	mov	r3, fp
 8006870:	f8cd b008 	str.w	fp, [sp, #8]
 8006874:	e7a6      	b.n	80067c4 <_dtoa_r+0x264>
 8006876:	3101      	adds	r1, #1
 8006878:	6041      	str	r1, [r0, #4]
 800687a:	0052      	lsls	r2, r2, #1
 800687c:	e7a6      	b.n	80067cc <_dtoa_r+0x26c>
 800687e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006880:	9a08      	ldr	r2, [sp, #32]
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	2b0e      	cmp	r3, #14
 8006888:	f200 80a8 	bhi.w	80069dc <_dtoa_r+0x47c>
 800688c:	2c00      	cmp	r4, #0
 800688e:	f000 80a5 	beq.w	80069dc <_dtoa_r+0x47c>
 8006892:	f1b9 0f00 	cmp.w	r9, #0
 8006896:	dd34      	ble.n	8006902 <_dtoa_r+0x3a2>
 8006898:	4a9a      	ldr	r2, [pc, #616]	; (8006b04 <_dtoa_r+0x5a4>)
 800689a:	f009 030f 	and.w	r3, r9, #15
 800689e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068a2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80068a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068ae:	ea4f 1429 	mov.w	r4, r9, asr #4
 80068b2:	d016      	beq.n	80068e2 <_dtoa_r+0x382>
 80068b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068b8:	4b93      	ldr	r3, [pc, #588]	; (8006b08 <_dtoa_r+0x5a8>)
 80068ba:	2703      	movs	r7, #3
 80068bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068c0:	f7f9 ff34 	bl	800072c <__aeabi_ddiv>
 80068c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068c8:	f004 040f 	and.w	r4, r4, #15
 80068cc:	4e8e      	ldr	r6, [pc, #568]	; (8006b08 <_dtoa_r+0x5a8>)
 80068ce:	b954      	cbnz	r4, 80068e6 <_dtoa_r+0x386>
 80068d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068d8:	f7f9 ff28 	bl	800072c <__aeabi_ddiv>
 80068dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068e0:	e029      	b.n	8006936 <_dtoa_r+0x3d6>
 80068e2:	2702      	movs	r7, #2
 80068e4:	e7f2      	b.n	80068cc <_dtoa_r+0x36c>
 80068e6:	07e1      	lsls	r1, r4, #31
 80068e8:	d508      	bpl.n	80068fc <_dtoa_r+0x39c>
 80068ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068f2:	f7f9 fdf1 	bl	80004d8 <__aeabi_dmul>
 80068f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068fa:	3701      	adds	r7, #1
 80068fc:	1064      	asrs	r4, r4, #1
 80068fe:	3608      	adds	r6, #8
 8006900:	e7e5      	b.n	80068ce <_dtoa_r+0x36e>
 8006902:	f000 80a5 	beq.w	8006a50 <_dtoa_r+0x4f0>
 8006906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800690a:	f1c9 0400 	rsb	r4, r9, #0
 800690e:	4b7d      	ldr	r3, [pc, #500]	; (8006b04 <_dtoa_r+0x5a4>)
 8006910:	f004 020f 	and.w	r2, r4, #15
 8006914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f7f9 fddc 	bl	80004d8 <__aeabi_dmul>
 8006920:	2702      	movs	r7, #2
 8006922:	2300      	movs	r3, #0
 8006924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006928:	4e77      	ldr	r6, [pc, #476]	; (8006b08 <_dtoa_r+0x5a8>)
 800692a:	1124      	asrs	r4, r4, #4
 800692c:	2c00      	cmp	r4, #0
 800692e:	f040 8084 	bne.w	8006a3a <_dtoa_r+0x4da>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1d2      	bne.n	80068dc <_dtoa_r+0x37c>
 8006936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 808b 	beq.w	8006a54 <_dtoa_r+0x4f4>
 800693e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006942:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006946:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800694a:	2200      	movs	r2, #0
 800694c:	4b6f      	ldr	r3, [pc, #444]	; (8006b0c <_dtoa_r+0x5ac>)
 800694e:	f7fa f835 	bl	80009bc <__aeabi_dcmplt>
 8006952:	2800      	cmp	r0, #0
 8006954:	d07e      	beq.n	8006a54 <_dtoa_r+0x4f4>
 8006956:	9b02      	ldr	r3, [sp, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d07b      	beq.n	8006a54 <_dtoa_r+0x4f4>
 800695c:	f1bb 0f00 	cmp.w	fp, #0
 8006960:	dd38      	ble.n	80069d4 <_dtoa_r+0x474>
 8006962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006966:	2200      	movs	r2, #0
 8006968:	4b69      	ldr	r3, [pc, #420]	; (8006b10 <_dtoa_r+0x5b0>)
 800696a:	f7f9 fdb5 	bl	80004d8 <__aeabi_dmul>
 800696e:	465c      	mov	r4, fp
 8006970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006974:	f109 38ff 	add.w	r8, r9, #4294967295
 8006978:	3701      	adds	r7, #1
 800697a:	4638      	mov	r0, r7
 800697c:	f7f9 fd42 	bl	8000404 <__aeabi_i2d>
 8006980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006984:	f7f9 fda8 	bl	80004d8 <__aeabi_dmul>
 8006988:	2200      	movs	r2, #0
 800698a:	4b62      	ldr	r3, [pc, #392]	; (8006b14 <_dtoa_r+0x5b4>)
 800698c:	f7f9 fbee 	bl	800016c <__adddf3>
 8006990:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006994:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006998:	9611      	str	r6, [sp, #68]	; 0x44
 800699a:	2c00      	cmp	r4, #0
 800699c:	d15d      	bne.n	8006a5a <_dtoa_r+0x4fa>
 800699e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a2:	2200      	movs	r2, #0
 80069a4:	4b5c      	ldr	r3, [pc, #368]	; (8006b18 <_dtoa_r+0x5b8>)
 80069a6:	f7f9 fbdf 	bl	8000168 <__aeabi_dsub>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069b2:	4633      	mov	r3, r6
 80069b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069b6:	f7fa f81f 	bl	80009f8 <__aeabi_dcmpgt>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f040 829e 	bne.w	8006efc <_dtoa_r+0x99c>
 80069c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80069ca:	f7f9 fff7 	bl	80009bc <__aeabi_dcmplt>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f040 8292 	bne.w	8006ef8 <_dtoa_r+0x998>
 80069d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80069d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80069dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f2c0 8153 	blt.w	8006c8a <_dtoa_r+0x72a>
 80069e4:	f1b9 0f0e 	cmp.w	r9, #14
 80069e8:	f300 814f 	bgt.w	8006c8a <_dtoa_r+0x72a>
 80069ec:	4b45      	ldr	r3, [pc, #276]	; (8006b04 <_dtoa_r+0x5a4>)
 80069ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80069f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80069fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f280 80db 	bge.w	8006bb8 <_dtoa_r+0x658>
 8006a02:	9b02      	ldr	r3, [sp, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f300 80d7 	bgt.w	8006bb8 <_dtoa_r+0x658>
 8006a0a:	f040 8274 	bne.w	8006ef6 <_dtoa_r+0x996>
 8006a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a12:	2200      	movs	r2, #0
 8006a14:	4b40      	ldr	r3, [pc, #256]	; (8006b18 <_dtoa_r+0x5b8>)
 8006a16:	f7f9 fd5f 	bl	80004d8 <__aeabi_dmul>
 8006a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a1e:	f7f9 ffe1 	bl	80009e4 <__aeabi_dcmpge>
 8006a22:	9c02      	ldr	r4, [sp, #8]
 8006a24:	4626      	mov	r6, r4
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f040 824a 	bne.w	8006ec0 <_dtoa_r+0x960>
 8006a2c:	2331      	movs	r3, #49	; 0x31
 8006a2e:	9f08      	ldr	r7, [sp, #32]
 8006a30:	f109 0901 	add.w	r9, r9, #1
 8006a34:	f807 3b01 	strb.w	r3, [r7], #1
 8006a38:	e246      	b.n	8006ec8 <_dtoa_r+0x968>
 8006a3a:	07e2      	lsls	r2, r4, #31
 8006a3c:	d505      	bpl.n	8006a4a <_dtoa_r+0x4ea>
 8006a3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a42:	f7f9 fd49 	bl	80004d8 <__aeabi_dmul>
 8006a46:	2301      	movs	r3, #1
 8006a48:	3701      	adds	r7, #1
 8006a4a:	1064      	asrs	r4, r4, #1
 8006a4c:	3608      	adds	r6, #8
 8006a4e:	e76d      	b.n	800692c <_dtoa_r+0x3cc>
 8006a50:	2702      	movs	r7, #2
 8006a52:	e770      	b.n	8006936 <_dtoa_r+0x3d6>
 8006a54:	46c8      	mov	r8, r9
 8006a56:	9c02      	ldr	r4, [sp, #8]
 8006a58:	e78f      	b.n	800697a <_dtoa_r+0x41a>
 8006a5a:	9908      	ldr	r1, [sp, #32]
 8006a5c:	4b29      	ldr	r3, [pc, #164]	; (8006b04 <_dtoa_r+0x5a4>)
 8006a5e:	4421      	add	r1, r4
 8006a60:	9112      	str	r1, [sp, #72]	; 0x48
 8006a62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a70:	2900      	cmp	r1, #0
 8006a72:	d055      	beq.n	8006b20 <_dtoa_r+0x5c0>
 8006a74:	2000      	movs	r0, #0
 8006a76:	4929      	ldr	r1, [pc, #164]	; (8006b1c <_dtoa_r+0x5bc>)
 8006a78:	f7f9 fe58 	bl	800072c <__aeabi_ddiv>
 8006a7c:	463b      	mov	r3, r7
 8006a7e:	4632      	mov	r2, r6
 8006a80:	f7f9 fb72 	bl	8000168 <__aeabi_dsub>
 8006a84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a88:	9f08      	ldr	r7, [sp, #32]
 8006a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a8e:	f7f9 ffd3 	bl	8000a38 <__aeabi_d2iz>
 8006a92:	4604      	mov	r4, r0
 8006a94:	f7f9 fcb6 	bl	8000404 <__aeabi_i2d>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aa0:	f7f9 fb62 	bl	8000168 <__aeabi_dsub>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	3430      	adds	r4, #48	; 0x30
 8006aaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ab2:	f807 4b01 	strb.w	r4, [r7], #1
 8006ab6:	f7f9 ff81 	bl	80009bc <__aeabi_dcmplt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d174      	bne.n	8006ba8 <_dtoa_r+0x648>
 8006abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	4911      	ldr	r1, [pc, #68]	; (8006b0c <_dtoa_r+0x5ac>)
 8006ac6:	f7f9 fb4f 	bl	8000168 <__aeabi_dsub>
 8006aca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ace:	f7f9 ff75 	bl	80009bc <__aeabi_dcmplt>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f040 80b6 	bne.w	8006c44 <_dtoa_r+0x6e4>
 8006ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ada:	429f      	cmp	r7, r3
 8006adc:	f43f af7a 	beq.w	80069d4 <_dtoa_r+0x474>
 8006ae0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <_dtoa_r+0x5b0>)
 8006ae8:	f7f9 fcf6 	bl	80004d8 <__aeabi_dmul>
 8006aec:	2200      	movs	r2, #0
 8006aee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006af2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006af6:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <_dtoa_r+0x5b0>)
 8006af8:	f7f9 fcee 	bl	80004d8 <__aeabi_dmul>
 8006afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b00:	e7c3      	b.n	8006a8a <_dtoa_r+0x52a>
 8006b02:	bf00      	nop
 8006b04:	0800b5c8 	.word	0x0800b5c8
 8006b08:	0800b5a0 	.word	0x0800b5a0
 8006b0c:	3ff00000 	.word	0x3ff00000
 8006b10:	40240000 	.word	0x40240000
 8006b14:	401c0000 	.word	0x401c0000
 8006b18:	40140000 	.word	0x40140000
 8006b1c:	3fe00000 	.word	0x3fe00000
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	f7f9 fcd8 	bl	80004d8 <__aeabi_dmul>
 8006b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b2e:	9c08      	ldr	r4, [sp, #32]
 8006b30:	9314      	str	r3, [sp, #80]	; 0x50
 8006b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b36:	f7f9 ff7f 	bl	8000a38 <__aeabi_d2iz>
 8006b3a:	9015      	str	r0, [sp, #84]	; 0x54
 8006b3c:	f7f9 fc62 	bl	8000404 <__aeabi_i2d>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b48:	f7f9 fb0e 	bl	8000168 <__aeabi_dsub>
 8006b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b4e:	4606      	mov	r6, r0
 8006b50:	3330      	adds	r3, #48	; 0x30
 8006b52:	f804 3b01 	strb.w	r3, [r4], #1
 8006b56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b58:	460f      	mov	r7, r1
 8006b5a:	429c      	cmp	r4, r3
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	d124      	bne.n	8006bac <_dtoa_r+0x64c>
 8006b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b66:	4bb3      	ldr	r3, [pc, #716]	; (8006e34 <_dtoa_r+0x8d4>)
 8006b68:	f7f9 fb00 	bl	800016c <__adddf3>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 ff40 	bl	80009f8 <__aeabi_dcmpgt>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d162      	bne.n	8006c42 <_dtoa_r+0x6e2>
 8006b7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b80:	2000      	movs	r0, #0
 8006b82:	49ac      	ldr	r1, [pc, #688]	; (8006e34 <_dtoa_r+0x8d4>)
 8006b84:	f7f9 faf0 	bl	8000168 <__aeabi_dsub>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	4639      	mov	r1, r7
 8006b90:	f7f9 ff14 	bl	80009bc <__aeabi_dcmplt>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f43f af1d 	beq.w	80069d4 <_dtoa_r+0x474>
 8006b9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006b9c:	1e7b      	subs	r3, r7, #1
 8006b9e:	9314      	str	r3, [sp, #80]	; 0x50
 8006ba0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006ba4:	2b30      	cmp	r3, #48	; 0x30
 8006ba6:	d0f8      	beq.n	8006b9a <_dtoa_r+0x63a>
 8006ba8:	46c1      	mov	r9, r8
 8006baa:	e03a      	b.n	8006c22 <_dtoa_r+0x6c2>
 8006bac:	4ba2      	ldr	r3, [pc, #648]	; (8006e38 <_dtoa_r+0x8d8>)
 8006bae:	f7f9 fc93 	bl	80004d8 <__aeabi_dmul>
 8006bb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bb6:	e7bc      	b.n	8006b32 <_dtoa_r+0x5d2>
 8006bb8:	9f08      	ldr	r7, [sp, #32]
 8006bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc2:	f7f9 fdb3 	bl	800072c <__aeabi_ddiv>
 8006bc6:	f7f9 ff37 	bl	8000a38 <__aeabi_d2iz>
 8006bca:	4604      	mov	r4, r0
 8006bcc:	f7f9 fc1a 	bl	8000404 <__aeabi_i2d>
 8006bd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bd4:	f7f9 fc80 	bl	80004d8 <__aeabi_dmul>
 8006bd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4602      	mov	r2, r0
 8006be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006be4:	f7f9 fac0 	bl	8000168 <__aeabi_dsub>
 8006be8:	f807 6b01 	strb.w	r6, [r7], #1
 8006bec:	9e08      	ldr	r6, [sp, #32]
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	1bbe      	subs	r6, r7, r6
 8006bf2:	42b3      	cmp	r3, r6
 8006bf4:	d13a      	bne.n	8006c6c <_dtoa_r+0x70c>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	f7f9 fab7 	bl	800016c <__adddf3>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c0a:	f7f9 fef5 	bl	80009f8 <__aeabi_dcmpgt>
 8006c0e:	bb58      	cbnz	r0, 8006c68 <_dtoa_r+0x708>
 8006c10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c18:	f7f9 fec6 	bl	80009a8 <__aeabi_dcmpeq>
 8006c1c:	b108      	cbz	r0, 8006c22 <_dtoa_r+0x6c2>
 8006c1e:	07e1      	lsls	r1, r4, #31
 8006c20:	d422      	bmi.n	8006c68 <_dtoa_r+0x708>
 8006c22:	4628      	mov	r0, r5
 8006c24:	4651      	mov	r1, sl
 8006c26:	f000 faf1 	bl	800720c <_Bfree>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	703b      	strb	r3, [r7, #0]
 8006c2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c30:	f109 0001 	add.w	r0, r9, #1
 8006c34:	6018      	str	r0, [r3, #0]
 8006c36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f43f acdf 	beq.w	80065fc <_dtoa_r+0x9c>
 8006c3e:	601f      	str	r7, [r3, #0]
 8006c40:	e4dc      	b.n	80065fc <_dtoa_r+0x9c>
 8006c42:	4627      	mov	r7, r4
 8006c44:	463b      	mov	r3, r7
 8006c46:	461f      	mov	r7, r3
 8006c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c4c:	2a39      	cmp	r2, #57	; 0x39
 8006c4e:	d107      	bne.n	8006c60 <_dtoa_r+0x700>
 8006c50:	9a08      	ldr	r2, [sp, #32]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d1f7      	bne.n	8006c46 <_dtoa_r+0x6e6>
 8006c56:	2230      	movs	r2, #48	; 0x30
 8006c58:	9908      	ldr	r1, [sp, #32]
 8006c5a:	f108 0801 	add.w	r8, r8, #1
 8006c5e:	700a      	strb	r2, [r1, #0]
 8006c60:	781a      	ldrb	r2, [r3, #0]
 8006c62:	3201      	adds	r2, #1
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	e79f      	b.n	8006ba8 <_dtoa_r+0x648>
 8006c68:	46c8      	mov	r8, r9
 8006c6a:	e7eb      	b.n	8006c44 <_dtoa_r+0x6e4>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4b72      	ldr	r3, [pc, #456]	; (8006e38 <_dtoa_r+0x8d8>)
 8006c70:	f7f9 fc32 	bl	80004d8 <__aeabi_dmul>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f7f9 fe92 	bl	80009a8 <__aeabi_dcmpeq>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d098      	beq.n	8006bba <_dtoa_r+0x65a>
 8006c88:	e7cb      	b.n	8006c22 <_dtoa_r+0x6c2>
 8006c8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	f000 80cd 	beq.w	8006e2c <_dtoa_r+0x8cc>
 8006c92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c94:	2a01      	cmp	r2, #1
 8006c96:	f300 80af 	bgt.w	8006df8 <_dtoa_r+0x898>
 8006c9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	f000 80a7 	beq.w	8006df0 <_dtoa_r+0x890>
 8006ca2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ca6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ca8:	9f06      	ldr	r7, [sp, #24]
 8006caa:	9a06      	ldr	r2, [sp, #24]
 8006cac:	2101      	movs	r1, #1
 8006cae:	441a      	add	r2, r3
 8006cb0:	9206      	str	r2, [sp, #24]
 8006cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	441a      	add	r2, r3
 8006cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8006cba:	f000 fb61 	bl	8007380 <__i2b>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	2f00      	cmp	r7, #0
 8006cc2:	dd0c      	ble.n	8006cde <_dtoa_r+0x77e>
 8006cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dd09      	ble.n	8006cde <_dtoa_r+0x77e>
 8006cca:	42bb      	cmp	r3, r7
 8006ccc:	bfa8      	it	ge
 8006cce:	463b      	movge	r3, r7
 8006cd0:	9a06      	ldr	r2, [sp, #24]
 8006cd2:	1aff      	subs	r7, r7, r3
 8006cd4:	1ad2      	subs	r2, r2, r3
 8006cd6:	9206      	str	r2, [sp, #24]
 8006cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce0:	b1f3      	cbz	r3, 8006d20 <_dtoa_r+0x7c0>
 8006ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80a9 	beq.w	8006e3c <_dtoa_r+0x8dc>
 8006cea:	2c00      	cmp	r4, #0
 8006cec:	dd10      	ble.n	8006d10 <_dtoa_r+0x7b0>
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 fbfe 	bl	80074f4 <__pow5mult>
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 fb54 	bl	80073ac <__multiply>
 8006d04:	4680      	mov	r8, r0
 8006d06:	4651      	mov	r1, sl
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f000 fa7f 	bl	800720c <_Bfree>
 8006d0e:	46c2      	mov	sl, r8
 8006d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d12:	1b1a      	subs	r2, r3, r4
 8006d14:	d004      	beq.n	8006d20 <_dtoa_r+0x7c0>
 8006d16:	4651      	mov	r1, sl
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 fbeb 	bl	80074f4 <__pow5mult>
 8006d1e:	4682      	mov	sl, r0
 8006d20:	2101      	movs	r1, #1
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 fb2c 	bl	8007380 <__i2b>
 8006d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f340 8087 	ble.w	8006e40 <_dtoa_r+0x8e0>
 8006d32:	461a      	mov	r2, r3
 8006d34:	4601      	mov	r1, r0
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 fbdc 	bl	80074f4 <__pow5mult>
 8006d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d3e:	4604      	mov	r4, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	f340 8080 	ble.w	8006e46 <_dtoa_r+0x8e6>
 8006d46:	f04f 0800 	mov.w	r8, #0
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d50:	6918      	ldr	r0, [r3, #16]
 8006d52:	f000 fac7 	bl	80072e4 <__hi0bits>
 8006d56:	f1c0 0020 	rsb	r0, r0, #32
 8006d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5c:	4418      	add	r0, r3
 8006d5e:	f010 001f 	ands.w	r0, r0, #31
 8006d62:	f000 8092 	beq.w	8006e8a <_dtoa_r+0x92a>
 8006d66:	f1c0 0320 	rsb	r3, r0, #32
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	f340 808a 	ble.w	8006e84 <_dtoa_r+0x924>
 8006d70:	f1c0 001c 	rsb	r0, r0, #28
 8006d74:	9b06      	ldr	r3, [sp, #24]
 8006d76:	4407      	add	r7, r0
 8006d78:	4403      	add	r3, r0
 8006d7a:	9306      	str	r3, [sp, #24]
 8006d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7e:	4403      	add	r3, r0
 8006d80:	9309      	str	r3, [sp, #36]	; 0x24
 8006d82:	9b06      	ldr	r3, [sp, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dd05      	ble.n	8006d94 <_dtoa_r+0x834>
 8006d88:	4651      	mov	r1, sl
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 fc0b 	bl	80075a8 <__lshift>
 8006d92:	4682      	mov	sl, r0
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dd05      	ble.n	8006da6 <_dtoa_r+0x846>
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 fc02 	bl	80075a8 <__lshift>
 8006da4:	4604      	mov	r4, r0
 8006da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d070      	beq.n	8006e8e <_dtoa_r+0x92e>
 8006dac:	4621      	mov	r1, r4
 8006dae:	4650      	mov	r0, sl
 8006db0:	f000 fc66 	bl	8007680 <__mcmp>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	da6a      	bge.n	8006e8e <_dtoa_r+0x92e>
 8006db8:	2300      	movs	r3, #0
 8006dba:	4651      	mov	r1, sl
 8006dbc:	220a      	movs	r2, #10
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 fa46 	bl	8007250 <__multadd>
 8006dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8193 	beq.w	80070f8 <_dtoa_r+0xb98>
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	220a      	movs	r2, #10
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 fa39 	bl	8007250 <__multadd>
 8006dde:	f1bb 0f00 	cmp.w	fp, #0
 8006de2:	4606      	mov	r6, r0
 8006de4:	f300 8093 	bgt.w	8006f0e <_dtoa_r+0x9ae>
 8006de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	dc57      	bgt.n	8006e9e <_dtoa_r+0x93e>
 8006dee:	e08e      	b.n	8006f0e <_dtoa_r+0x9ae>
 8006df0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006df2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006df6:	e756      	b.n	8006ca6 <_dtoa_r+0x746>
 8006df8:	9b02      	ldr	r3, [sp, #8]
 8006dfa:	1e5c      	subs	r4, r3, #1
 8006dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfe:	42a3      	cmp	r3, r4
 8006e00:	bfb7      	itett	lt
 8006e02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e04:	1b1c      	subge	r4, r3, r4
 8006e06:	1ae2      	sublt	r2, r4, r3
 8006e08:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006e0a:	bfbe      	ittt	lt
 8006e0c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e0e:	189b      	addlt	r3, r3, r2
 8006e10:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006e12:	9b02      	ldr	r3, [sp, #8]
 8006e14:	bfb8      	it	lt
 8006e16:	2400      	movlt	r4, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bfbb      	ittet	lt
 8006e1c:	9b06      	ldrlt	r3, [sp, #24]
 8006e1e:	9a02      	ldrlt	r2, [sp, #8]
 8006e20:	9f06      	ldrge	r7, [sp, #24]
 8006e22:	1a9f      	sublt	r7, r3, r2
 8006e24:	bfac      	ite	ge
 8006e26:	9b02      	ldrge	r3, [sp, #8]
 8006e28:	2300      	movlt	r3, #0
 8006e2a:	e73e      	b.n	8006caa <_dtoa_r+0x74a>
 8006e2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e2e:	9f06      	ldr	r7, [sp, #24]
 8006e30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e32:	e745      	b.n	8006cc0 <_dtoa_r+0x760>
 8006e34:	3fe00000 	.word	0x3fe00000
 8006e38:	40240000 	.word	0x40240000
 8006e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e3e:	e76a      	b.n	8006d16 <_dtoa_r+0x7b6>
 8006e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	dc19      	bgt.n	8006e7a <_dtoa_r+0x91a>
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	b9bb      	cbnz	r3, 8006e7a <_dtoa_r+0x91a>
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e50:	b99b      	cbnz	r3, 8006e7a <_dtoa_r+0x91a>
 8006e52:	9b05      	ldr	r3, [sp, #20]
 8006e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e58:	0d1b      	lsrs	r3, r3, #20
 8006e5a:	051b      	lsls	r3, r3, #20
 8006e5c:	b183      	cbz	r3, 8006e80 <_dtoa_r+0x920>
 8006e5e:	f04f 0801 	mov.w	r8, #1
 8006e62:	9b06      	ldr	r3, [sp, #24]
 8006e64:	3301      	adds	r3, #1
 8006e66:	9306      	str	r3, [sp, #24]
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f47f af6a 	bne.w	8006d4a <_dtoa_r+0x7ea>
 8006e76:	2001      	movs	r0, #1
 8006e78:	e76f      	b.n	8006d5a <_dtoa_r+0x7fa>
 8006e7a:	f04f 0800 	mov.w	r8, #0
 8006e7e:	e7f6      	b.n	8006e6e <_dtoa_r+0x90e>
 8006e80:	4698      	mov	r8, r3
 8006e82:	e7f4      	b.n	8006e6e <_dtoa_r+0x90e>
 8006e84:	f43f af7d 	beq.w	8006d82 <_dtoa_r+0x822>
 8006e88:	4618      	mov	r0, r3
 8006e8a:	301c      	adds	r0, #28
 8006e8c:	e772      	b.n	8006d74 <_dtoa_r+0x814>
 8006e8e:	9b02      	ldr	r3, [sp, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dc36      	bgt.n	8006f02 <_dtoa_r+0x9a2>
 8006e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	dd33      	ble.n	8006f02 <_dtoa_r+0x9a2>
 8006e9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ea2:	d10d      	bne.n	8006ec0 <_dtoa_r+0x960>
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	465b      	mov	r3, fp
 8006ea8:	2205      	movs	r2, #5
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 f9d0 	bl	8007250 <__multadd>
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	f000 fbe3 	bl	8007680 <__mcmp>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f73f adb6 	bgt.w	8006a2c <_dtoa_r+0x4cc>
 8006ec0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ec2:	9f08      	ldr	r7, [sp, #32]
 8006ec4:	ea6f 0903 	mvn.w	r9, r3
 8006ec8:	f04f 0800 	mov.w	r8, #0
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 f99c 	bl	800720c <_Bfree>
 8006ed4:	2e00      	cmp	r6, #0
 8006ed6:	f43f aea4 	beq.w	8006c22 <_dtoa_r+0x6c2>
 8006eda:	f1b8 0f00 	cmp.w	r8, #0
 8006ede:	d005      	beq.n	8006eec <_dtoa_r+0x98c>
 8006ee0:	45b0      	cmp	r8, r6
 8006ee2:	d003      	beq.n	8006eec <_dtoa_r+0x98c>
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f990 	bl	800720c <_Bfree>
 8006eec:	4631      	mov	r1, r6
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 f98c 	bl	800720c <_Bfree>
 8006ef4:	e695      	b.n	8006c22 <_dtoa_r+0x6c2>
 8006ef6:	2400      	movs	r4, #0
 8006ef8:	4626      	mov	r6, r4
 8006efa:	e7e1      	b.n	8006ec0 <_dtoa_r+0x960>
 8006efc:	46c1      	mov	r9, r8
 8006efe:	4626      	mov	r6, r4
 8006f00:	e594      	b.n	8006a2c <_dtoa_r+0x4cc>
 8006f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f04:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 80fc 	beq.w	8007106 <_dtoa_r+0xba6>
 8006f0e:	2f00      	cmp	r7, #0
 8006f10:	dd05      	ble.n	8006f1e <_dtoa_r+0x9be>
 8006f12:	4631      	mov	r1, r6
 8006f14:	463a      	mov	r2, r7
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 fb46 	bl	80075a8 <__lshift>
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	f1b8 0f00 	cmp.w	r8, #0
 8006f22:	d05c      	beq.n	8006fde <_dtoa_r+0xa7e>
 8006f24:	4628      	mov	r0, r5
 8006f26:	6871      	ldr	r1, [r6, #4]
 8006f28:	f000 f930 	bl	800718c <_Balloc>
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	b928      	cbnz	r0, 8006f3c <_dtoa_r+0x9dc>
 8006f30:	4602      	mov	r2, r0
 8006f32:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f36:	4b7e      	ldr	r3, [pc, #504]	; (8007130 <_dtoa_r+0xbd0>)
 8006f38:	f7ff bb26 	b.w	8006588 <_dtoa_r+0x28>
 8006f3c:	6932      	ldr	r2, [r6, #16]
 8006f3e:	f106 010c 	add.w	r1, r6, #12
 8006f42:	3202      	adds	r2, #2
 8006f44:	0092      	lsls	r2, r2, #2
 8006f46:	300c      	adds	r0, #12
 8006f48:	f000 f912 	bl	8007170 <memcpy>
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4628      	mov	r0, r5
 8006f52:	f000 fb29 	bl	80075a8 <__lshift>
 8006f56:	46b0      	mov	r8, r6
 8006f58:	4606      	mov	r6, r0
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	9302      	str	r3, [sp, #8]
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	445b      	add	r3, fp
 8006f64:	930a      	str	r3, [sp, #40]	; 0x28
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	4621      	mov	r1, r4
 8006f72:	4650      	mov	r0, sl
 8006f74:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f78:	f7ff fa62 	bl	8006440 <quorem>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	4641      	mov	r1, r8
 8006f80:	3330      	adds	r3, #48	; 0x30
 8006f82:	9004      	str	r0, [sp, #16]
 8006f84:	4650      	mov	r0, sl
 8006f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f88:	f000 fb7a 	bl	8007680 <__mcmp>
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	9006      	str	r0, [sp, #24]
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 fb90 	bl	80076b8 <__mdiff>
 8006f98:	68c2      	ldr	r2, [r0, #12]
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f9e:	bb02      	cbnz	r2, 8006fe2 <_dtoa_r+0xa82>
 8006fa0:	4601      	mov	r1, r0
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	f000 fb6c 	bl	8007680 <__mcmp>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fac:	4639      	mov	r1, r7
 8006fae:	4628      	mov	r0, r5
 8006fb0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006fb4:	f000 f92a 	bl	800720c <_Bfree>
 8006fb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fbc:	9f02      	ldr	r7, [sp, #8]
 8006fbe:	ea43 0102 	orr.w	r1, r3, r2
 8006fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc8:	d10d      	bne.n	8006fe6 <_dtoa_r+0xa86>
 8006fca:	2b39      	cmp	r3, #57	; 0x39
 8006fcc:	d027      	beq.n	800701e <_dtoa_r+0xabe>
 8006fce:	9a06      	ldr	r2, [sp, #24]
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	dd01      	ble.n	8006fd8 <_dtoa_r+0xa78>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	3331      	adds	r3, #49	; 0x31
 8006fd8:	f88b 3000 	strb.w	r3, [fp]
 8006fdc:	e776      	b.n	8006ecc <_dtoa_r+0x96c>
 8006fde:	4630      	mov	r0, r6
 8006fe0:	e7b9      	b.n	8006f56 <_dtoa_r+0x9f6>
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	e7e2      	b.n	8006fac <_dtoa_r+0xa4c>
 8006fe6:	9906      	ldr	r1, [sp, #24]
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	db04      	blt.n	8006ff6 <_dtoa_r+0xa96>
 8006fec:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006fee:	4301      	orrs	r1, r0
 8006ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff2:	4301      	orrs	r1, r0
 8006ff4:	d120      	bne.n	8007038 <_dtoa_r+0xad8>
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	ddee      	ble.n	8006fd8 <_dtoa_r+0xa78>
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	4628      	mov	r0, r5
 8007000:	9302      	str	r3, [sp, #8]
 8007002:	f000 fad1 	bl	80075a8 <__lshift>
 8007006:	4621      	mov	r1, r4
 8007008:	4682      	mov	sl, r0
 800700a:	f000 fb39 	bl	8007680 <__mcmp>
 800700e:	2800      	cmp	r0, #0
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	dc02      	bgt.n	800701a <_dtoa_r+0xaba>
 8007014:	d1e0      	bne.n	8006fd8 <_dtoa_r+0xa78>
 8007016:	07da      	lsls	r2, r3, #31
 8007018:	d5de      	bpl.n	8006fd8 <_dtoa_r+0xa78>
 800701a:	2b39      	cmp	r3, #57	; 0x39
 800701c:	d1da      	bne.n	8006fd4 <_dtoa_r+0xa74>
 800701e:	2339      	movs	r3, #57	; 0x39
 8007020:	f88b 3000 	strb.w	r3, [fp]
 8007024:	463b      	mov	r3, r7
 8007026:	461f      	mov	r7, r3
 8007028:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800702c:	3b01      	subs	r3, #1
 800702e:	2a39      	cmp	r2, #57	; 0x39
 8007030:	d050      	beq.n	80070d4 <_dtoa_r+0xb74>
 8007032:	3201      	adds	r2, #1
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e749      	b.n	8006ecc <_dtoa_r+0x96c>
 8007038:	2a00      	cmp	r2, #0
 800703a:	dd03      	ble.n	8007044 <_dtoa_r+0xae4>
 800703c:	2b39      	cmp	r3, #57	; 0x39
 800703e:	d0ee      	beq.n	800701e <_dtoa_r+0xabe>
 8007040:	3301      	adds	r3, #1
 8007042:	e7c9      	b.n	8006fd8 <_dtoa_r+0xa78>
 8007044:	9a02      	ldr	r2, [sp, #8]
 8007046:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007048:	f802 3c01 	strb.w	r3, [r2, #-1]
 800704c:	428a      	cmp	r2, r1
 800704e:	d02a      	beq.n	80070a6 <_dtoa_r+0xb46>
 8007050:	4651      	mov	r1, sl
 8007052:	2300      	movs	r3, #0
 8007054:	220a      	movs	r2, #10
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f8fa 	bl	8007250 <__multadd>
 800705c:	45b0      	cmp	r8, r6
 800705e:	4682      	mov	sl, r0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	f04f 020a 	mov.w	r2, #10
 8007068:	4641      	mov	r1, r8
 800706a:	4628      	mov	r0, r5
 800706c:	d107      	bne.n	800707e <_dtoa_r+0xb1e>
 800706e:	f000 f8ef 	bl	8007250 <__multadd>
 8007072:	4680      	mov	r8, r0
 8007074:	4606      	mov	r6, r0
 8007076:	9b02      	ldr	r3, [sp, #8]
 8007078:	3301      	adds	r3, #1
 800707a:	9302      	str	r3, [sp, #8]
 800707c:	e777      	b.n	8006f6e <_dtoa_r+0xa0e>
 800707e:	f000 f8e7 	bl	8007250 <__multadd>
 8007082:	4631      	mov	r1, r6
 8007084:	4680      	mov	r8, r0
 8007086:	2300      	movs	r3, #0
 8007088:	220a      	movs	r2, #10
 800708a:	4628      	mov	r0, r5
 800708c:	f000 f8e0 	bl	8007250 <__multadd>
 8007090:	4606      	mov	r6, r0
 8007092:	e7f0      	b.n	8007076 <_dtoa_r+0xb16>
 8007094:	f1bb 0f00 	cmp.w	fp, #0
 8007098:	bfcc      	ite	gt
 800709a:	465f      	movgt	r7, fp
 800709c:	2701      	movle	r7, #1
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	9a08      	ldr	r2, [sp, #32]
 80070a4:	4417      	add	r7, r2
 80070a6:	4651      	mov	r1, sl
 80070a8:	2201      	movs	r2, #1
 80070aa:	4628      	mov	r0, r5
 80070ac:	9302      	str	r3, [sp, #8]
 80070ae:	f000 fa7b 	bl	80075a8 <__lshift>
 80070b2:	4621      	mov	r1, r4
 80070b4:	4682      	mov	sl, r0
 80070b6:	f000 fae3 	bl	8007680 <__mcmp>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	dcb2      	bgt.n	8007024 <_dtoa_r+0xac4>
 80070be:	d102      	bne.n	80070c6 <_dtoa_r+0xb66>
 80070c0:	9b02      	ldr	r3, [sp, #8]
 80070c2:	07db      	lsls	r3, r3, #31
 80070c4:	d4ae      	bmi.n	8007024 <_dtoa_r+0xac4>
 80070c6:	463b      	mov	r3, r7
 80070c8:	461f      	mov	r7, r3
 80070ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ce:	2a30      	cmp	r2, #48	; 0x30
 80070d0:	d0fa      	beq.n	80070c8 <_dtoa_r+0xb68>
 80070d2:	e6fb      	b.n	8006ecc <_dtoa_r+0x96c>
 80070d4:	9a08      	ldr	r2, [sp, #32]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d1a5      	bne.n	8007026 <_dtoa_r+0xac6>
 80070da:	2331      	movs	r3, #49	; 0x31
 80070dc:	f109 0901 	add.w	r9, r9, #1
 80070e0:	7013      	strb	r3, [r2, #0]
 80070e2:	e6f3      	b.n	8006ecc <_dtoa_r+0x96c>
 80070e4:	4b13      	ldr	r3, [pc, #76]	; (8007134 <_dtoa_r+0xbd4>)
 80070e6:	f7ff baa7 	b.w	8006638 <_dtoa_r+0xd8>
 80070ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f47f aa80 	bne.w	80065f2 <_dtoa_r+0x92>
 80070f2:	4b11      	ldr	r3, [pc, #68]	; (8007138 <_dtoa_r+0xbd8>)
 80070f4:	f7ff baa0 	b.w	8006638 <_dtoa_r+0xd8>
 80070f8:	f1bb 0f00 	cmp.w	fp, #0
 80070fc:	dc03      	bgt.n	8007106 <_dtoa_r+0xba6>
 80070fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007100:	2b02      	cmp	r3, #2
 8007102:	f73f aecc 	bgt.w	8006e9e <_dtoa_r+0x93e>
 8007106:	9f08      	ldr	r7, [sp, #32]
 8007108:	4621      	mov	r1, r4
 800710a:	4650      	mov	r0, sl
 800710c:	f7ff f998 	bl	8006440 <quorem>
 8007110:	9a08      	ldr	r2, [sp, #32]
 8007112:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007116:	f807 3b01 	strb.w	r3, [r7], #1
 800711a:	1aba      	subs	r2, r7, r2
 800711c:	4593      	cmp	fp, r2
 800711e:	ddb9      	ble.n	8007094 <_dtoa_r+0xb34>
 8007120:	4651      	mov	r1, sl
 8007122:	2300      	movs	r3, #0
 8007124:	220a      	movs	r2, #10
 8007126:	4628      	mov	r0, r5
 8007128:	f000 f892 	bl	8007250 <__multadd>
 800712c:	4682      	mov	sl, r0
 800712e:	e7eb      	b.n	8007108 <_dtoa_r+0xba8>
 8007130:	0800b52b 	.word	0x0800b52b
 8007134:	0800b484 	.word	0x0800b484
 8007138:	0800b4a8 	.word	0x0800b4a8

0800713c <_localeconv_r>:
 800713c:	4800      	ldr	r0, [pc, #0]	; (8007140 <_localeconv_r+0x4>)
 800713e:	4770      	bx	lr
 8007140:	20000184 	.word	0x20000184

08007144 <malloc>:
 8007144:	4b02      	ldr	r3, [pc, #8]	; (8007150 <malloc+0xc>)
 8007146:	4601      	mov	r1, r0
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	f000 bbfb 	b.w	8007944 <_malloc_r>
 800714e:	bf00      	nop
 8007150:	20000030 	.word	0x20000030

08007154 <memchr>:
 8007154:	4603      	mov	r3, r0
 8007156:	b510      	push	{r4, lr}
 8007158:	b2c9      	uxtb	r1, r1
 800715a:	4402      	add	r2, r0
 800715c:	4293      	cmp	r3, r2
 800715e:	4618      	mov	r0, r3
 8007160:	d101      	bne.n	8007166 <memchr+0x12>
 8007162:	2000      	movs	r0, #0
 8007164:	e003      	b.n	800716e <memchr+0x1a>
 8007166:	7804      	ldrb	r4, [r0, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	428c      	cmp	r4, r1
 800716c:	d1f6      	bne.n	800715c <memchr+0x8>
 800716e:	bd10      	pop	{r4, pc}

08007170 <memcpy>:
 8007170:	440a      	add	r2, r1
 8007172:	4291      	cmp	r1, r2
 8007174:	f100 33ff 	add.w	r3, r0, #4294967295
 8007178:	d100      	bne.n	800717c <memcpy+0xc>
 800717a:	4770      	bx	lr
 800717c:	b510      	push	{r4, lr}
 800717e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007182:	4291      	cmp	r1, r2
 8007184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007188:	d1f9      	bne.n	800717e <memcpy+0xe>
 800718a:	bd10      	pop	{r4, pc}

0800718c <_Balloc>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007190:	4604      	mov	r4, r0
 8007192:	460d      	mov	r5, r1
 8007194:	b976      	cbnz	r6, 80071b4 <_Balloc+0x28>
 8007196:	2010      	movs	r0, #16
 8007198:	f7ff ffd4 	bl	8007144 <malloc>
 800719c:	4602      	mov	r2, r0
 800719e:	6260      	str	r0, [r4, #36]	; 0x24
 80071a0:	b920      	cbnz	r0, 80071ac <_Balloc+0x20>
 80071a2:	2166      	movs	r1, #102	; 0x66
 80071a4:	4b17      	ldr	r3, [pc, #92]	; (8007204 <_Balloc+0x78>)
 80071a6:	4818      	ldr	r0, [pc, #96]	; (8007208 <_Balloc+0x7c>)
 80071a8:	f000 fd92 	bl	8007cd0 <__assert_func>
 80071ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071b0:	6006      	str	r6, [r0, #0]
 80071b2:	60c6      	str	r6, [r0, #12]
 80071b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071b6:	68f3      	ldr	r3, [r6, #12]
 80071b8:	b183      	cbz	r3, 80071dc <_Balloc+0x50>
 80071ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071c2:	b9b8      	cbnz	r0, 80071f4 <_Balloc+0x68>
 80071c4:	2101      	movs	r1, #1
 80071c6:	fa01 f605 	lsl.w	r6, r1, r5
 80071ca:	1d72      	adds	r2, r6, #5
 80071cc:	4620      	mov	r0, r4
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	f000 fb5e 	bl	8007890 <_calloc_r>
 80071d4:	b160      	cbz	r0, 80071f0 <_Balloc+0x64>
 80071d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071da:	e00e      	b.n	80071fa <_Balloc+0x6e>
 80071dc:	2221      	movs	r2, #33	; 0x21
 80071de:	2104      	movs	r1, #4
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fb55 	bl	8007890 <_calloc_r>
 80071e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e8:	60f0      	str	r0, [r6, #12]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e4      	bne.n	80071ba <_Balloc+0x2e>
 80071f0:	2000      	movs	r0, #0
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	6802      	ldr	r2, [r0, #0]
 80071f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071fa:	2300      	movs	r3, #0
 80071fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007200:	e7f7      	b.n	80071f2 <_Balloc+0x66>
 8007202:	bf00      	nop
 8007204:	0800b4b5 	.word	0x0800b4b5
 8007208:	0800b53c 	.word	0x0800b53c

0800720c <_Bfree>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007210:	4605      	mov	r5, r0
 8007212:	460c      	mov	r4, r1
 8007214:	b976      	cbnz	r6, 8007234 <_Bfree+0x28>
 8007216:	2010      	movs	r0, #16
 8007218:	f7ff ff94 	bl	8007144 <malloc>
 800721c:	4602      	mov	r2, r0
 800721e:	6268      	str	r0, [r5, #36]	; 0x24
 8007220:	b920      	cbnz	r0, 800722c <_Bfree+0x20>
 8007222:	218a      	movs	r1, #138	; 0x8a
 8007224:	4b08      	ldr	r3, [pc, #32]	; (8007248 <_Bfree+0x3c>)
 8007226:	4809      	ldr	r0, [pc, #36]	; (800724c <_Bfree+0x40>)
 8007228:	f000 fd52 	bl	8007cd0 <__assert_func>
 800722c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007230:	6006      	str	r6, [r0, #0]
 8007232:	60c6      	str	r6, [r0, #12]
 8007234:	b13c      	cbz	r4, 8007246 <_Bfree+0x3a>
 8007236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007238:	6862      	ldr	r2, [r4, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007240:	6021      	str	r1, [r4, #0]
 8007242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	0800b4b5 	.word	0x0800b4b5
 800724c:	0800b53c 	.word	0x0800b53c

08007250 <__multadd>:
 8007250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007254:	4698      	mov	r8, r3
 8007256:	460c      	mov	r4, r1
 8007258:	2300      	movs	r3, #0
 800725a:	690e      	ldr	r6, [r1, #16]
 800725c:	4607      	mov	r7, r0
 800725e:	f101 0014 	add.w	r0, r1, #20
 8007262:	6805      	ldr	r5, [r0, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	b2a9      	uxth	r1, r5
 8007268:	fb02 8101 	mla	r1, r2, r1, r8
 800726c:	0c2d      	lsrs	r5, r5, #16
 800726e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007272:	fb02 c505 	mla	r5, r2, r5, ip
 8007276:	b289      	uxth	r1, r1
 8007278:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800727c:	429e      	cmp	r6, r3
 800727e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007282:	f840 1b04 	str.w	r1, [r0], #4
 8007286:	dcec      	bgt.n	8007262 <__multadd+0x12>
 8007288:	f1b8 0f00 	cmp.w	r8, #0
 800728c:	d022      	beq.n	80072d4 <__multadd+0x84>
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	42b3      	cmp	r3, r6
 8007292:	dc19      	bgt.n	80072c8 <__multadd+0x78>
 8007294:	6861      	ldr	r1, [r4, #4]
 8007296:	4638      	mov	r0, r7
 8007298:	3101      	adds	r1, #1
 800729a:	f7ff ff77 	bl	800718c <_Balloc>
 800729e:	4605      	mov	r5, r0
 80072a0:	b928      	cbnz	r0, 80072ae <__multadd+0x5e>
 80072a2:	4602      	mov	r2, r0
 80072a4:	21b5      	movs	r1, #181	; 0xb5
 80072a6:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <__multadd+0x8c>)
 80072a8:	480d      	ldr	r0, [pc, #52]	; (80072e0 <__multadd+0x90>)
 80072aa:	f000 fd11 	bl	8007cd0 <__assert_func>
 80072ae:	6922      	ldr	r2, [r4, #16]
 80072b0:	f104 010c 	add.w	r1, r4, #12
 80072b4:	3202      	adds	r2, #2
 80072b6:	0092      	lsls	r2, r2, #2
 80072b8:	300c      	adds	r0, #12
 80072ba:	f7ff ff59 	bl	8007170 <memcpy>
 80072be:	4621      	mov	r1, r4
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7ff ffa3 	bl	800720c <_Bfree>
 80072c6:	462c      	mov	r4, r5
 80072c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80072cc:	3601      	adds	r6, #1
 80072ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80072d2:	6126      	str	r6, [r4, #16]
 80072d4:	4620      	mov	r0, r4
 80072d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072da:	bf00      	nop
 80072dc:	0800b52b 	.word	0x0800b52b
 80072e0:	0800b53c 	.word	0x0800b53c

080072e4 <__hi0bits>:
 80072e4:	0c02      	lsrs	r2, r0, #16
 80072e6:	0412      	lsls	r2, r2, #16
 80072e8:	4603      	mov	r3, r0
 80072ea:	b9ca      	cbnz	r2, 8007320 <__hi0bits+0x3c>
 80072ec:	0403      	lsls	r3, r0, #16
 80072ee:	2010      	movs	r0, #16
 80072f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072f4:	bf04      	itt	eq
 80072f6:	021b      	lsleq	r3, r3, #8
 80072f8:	3008      	addeq	r0, #8
 80072fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072fe:	bf04      	itt	eq
 8007300:	011b      	lsleq	r3, r3, #4
 8007302:	3004      	addeq	r0, #4
 8007304:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007308:	bf04      	itt	eq
 800730a:	009b      	lsleq	r3, r3, #2
 800730c:	3002      	addeq	r0, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	db05      	blt.n	800731e <__hi0bits+0x3a>
 8007312:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007316:	f100 0001 	add.w	r0, r0, #1
 800731a:	bf08      	it	eq
 800731c:	2020      	moveq	r0, #32
 800731e:	4770      	bx	lr
 8007320:	2000      	movs	r0, #0
 8007322:	e7e5      	b.n	80072f0 <__hi0bits+0xc>

08007324 <__lo0bits>:
 8007324:	6803      	ldr	r3, [r0, #0]
 8007326:	4602      	mov	r2, r0
 8007328:	f013 0007 	ands.w	r0, r3, #7
 800732c:	d00b      	beq.n	8007346 <__lo0bits+0x22>
 800732e:	07d9      	lsls	r1, r3, #31
 8007330:	d422      	bmi.n	8007378 <__lo0bits+0x54>
 8007332:	0798      	lsls	r0, r3, #30
 8007334:	bf49      	itett	mi
 8007336:	085b      	lsrmi	r3, r3, #1
 8007338:	089b      	lsrpl	r3, r3, #2
 800733a:	2001      	movmi	r0, #1
 800733c:	6013      	strmi	r3, [r2, #0]
 800733e:	bf5c      	itt	pl
 8007340:	2002      	movpl	r0, #2
 8007342:	6013      	strpl	r3, [r2, #0]
 8007344:	4770      	bx	lr
 8007346:	b299      	uxth	r1, r3
 8007348:	b909      	cbnz	r1, 800734e <__lo0bits+0x2a>
 800734a:	2010      	movs	r0, #16
 800734c:	0c1b      	lsrs	r3, r3, #16
 800734e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007352:	bf04      	itt	eq
 8007354:	0a1b      	lsreq	r3, r3, #8
 8007356:	3008      	addeq	r0, #8
 8007358:	0719      	lsls	r1, r3, #28
 800735a:	bf04      	itt	eq
 800735c:	091b      	lsreq	r3, r3, #4
 800735e:	3004      	addeq	r0, #4
 8007360:	0799      	lsls	r1, r3, #30
 8007362:	bf04      	itt	eq
 8007364:	089b      	lsreq	r3, r3, #2
 8007366:	3002      	addeq	r0, #2
 8007368:	07d9      	lsls	r1, r3, #31
 800736a:	d403      	bmi.n	8007374 <__lo0bits+0x50>
 800736c:	085b      	lsrs	r3, r3, #1
 800736e:	f100 0001 	add.w	r0, r0, #1
 8007372:	d003      	beq.n	800737c <__lo0bits+0x58>
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4770      	bx	lr
 8007378:	2000      	movs	r0, #0
 800737a:	4770      	bx	lr
 800737c:	2020      	movs	r0, #32
 800737e:	4770      	bx	lr

08007380 <__i2b>:
 8007380:	b510      	push	{r4, lr}
 8007382:	460c      	mov	r4, r1
 8007384:	2101      	movs	r1, #1
 8007386:	f7ff ff01 	bl	800718c <_Balloc>
 800738a:	4602      	mov	r2, r0
 800738c:	b928      	cbnz	r0, 800739a <__i2b+0x1a>
 800738e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007392:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <__i2b+0x24>)
 8007394:	4804      	ldr	r0, [pc, #16]	; (80073a8 <__i2b+0x28>)
 8007396:	f000 fc9b 	bl	8007cd0 <__assert_func>
 800739a:	2301      	movs	r3, #1
 800739c:	6144      	str	r4, [r0, #20]
 800739e:	6103      	str	r3, [r0, #16]
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	bf00      	nop
 80073a4:	0800b52b 	.word	0x0800b52b
 80073a8:	0800b53c 	.word	0x0800b53c

080073ac <__multiply>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4614      	mov	r4, r2
 80073b2:	690a      	ldr	r2, [r1, #16]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	460d      	mov	r5, r1
 80073b8:	429a      	cmp	r2, r3
 80073ba:	bfbe      	ittt	lt
 80073bc:	460b      	movlt	r3, r1
 80073be:	4625      	movlt	r5, r4
 80073c0:	461c      	movlt	r4, r3
 80073c2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80073c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073ca:	68ab      	ldr	r3, [r5, #8]
 80073cc:	6869      	ldr	r1, [r5, #4]
 80073ce:	eb0a 0709 	add.w	r7, sl, r9
 80073d2:	42bb      	cmp	r3, r7
 80073d4:	b085      	sub	sp, #20
 80073d6:	bfb8      	it	lt
 80073d8:	3101      	addlt	r1, #1
 80073da:	f7ff fed7 	bl	800718c <_Balloc>
 80073de:	b930      	cbnz	r0, 80073ee <__multiply+0x42>
 80073e0:	4602      	mov	r2, r0
 80073e2:	f240 115d 	movw	r1, #349	; 0x15d
 80073e6:	4b41      	ldr	r3, [pc, #260]	; (80074ec <__multiply+0x140>)
 80073e8:	4841      	ldr	r0, [pc, #260]	; (80074f0 <__multiply+0x144>)
 80073ea:	f000 fc71 	bl	8007cd0 <__assert_func>
 80073ee:	f100 0614 	add.w	r6, r0, #20
 80073f2:	4633      	mov	r3, r6
 80073f4:	2200      	movs	r2, #0
 80073f6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80073fa:	4543      	cmp	r3, r8
 80073fc:	d31e      	bcc.n	800743c <__multiply+0x90>
 80073fe:	f105 0c14 	add.w	ip, r5, #20
 8007402:	f104 0314 	add.w	r3, r4, #20
 8007406:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800740a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800740e:	9202      	str	r2, [sp, #8]
 8007410:	ebac 0205 	sub.w	r2, ip, r5
 8007414:	3a15      	subs	r2, #21
 8007416:	f022 0203 	bic.w	r2, r2, #3
 800741a:	3204      	adds	r2, #4
 800741c:	f105 0115 	add.w	r1, r5, #21
 8007420:	458c      	cmp	ip, r1
 8007422:	bf38      	it	cc
 8007424:	2204      	movcc	r2, #4
 8007426:	9201      	str	r2, [sp, #4]
 8007428:	9a02      	ldr	r2, [sp, #8]
 800742a:	9303      	str	r3, [sp, #12]
 800742c:	429a      	cmp	r2, r3
 800742e:	d808      	bhi.n	8007442 <__multiply+0x96>
 8007430:	2f00      	cmp	r7, #0
 8007432:	dc55      	bgt.n	80074e0 <__multiply+0x134>
 8007434:	6107      	str	r7, [r0, #16]
 8007436:	b005      	add	sp, #20
 8007438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743c:	f843 2b04 	str.w	r2, [r3], #4
 8007440:	e7db      	b.n	80073fa <__multiply+0x4e>
 8007442:	f8b3 a000 	ldrh.w	sl, [r3]
 8007446:	f1ba 0f00 	cmp.w	sl, #0
 800744a:	d020      	beq.n	800748e <__multiply+0xe2>
 800744c:	46b1      	mov	r9, r6
 800744e:	2200      	movs	r2, #0
 8007450:	f105 0e14 	add.w	lr, r5, #20
 8007454:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007458:	f8d9 b000 	ldr.w	fp, [r9]
 800745c:	b2a1      	uxth	r1, r4
 800745e:	fa1f fb8b 	uxth.w	fp, fp
 8007462:	fb0a b101 	mla	r1, sl, r1, fp
 8007466:	4411      	add	r1, r2
 8007468:	f8d9 2000 	ldr.w	r2, [r9]
 800746c:	0c24      	lsrs	r4, r4, #16
 800746e:	0c12      	lsrs	r2, r2, #16
 8007470:	fb0a 2404 	mla	r4, sl, r4, r2
 8007474:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007478:	b289      	uxth	r1, r1
 800747a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800747e:	45f4      	cmp	ip, lr
 8007480:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007484:	f849 1b04 	str.w	r1, [r9], #4
 8007488:	d8e4      	bhi.n	8007454 <__multiply+0xa8>
 800748a:	9901      	ldr	r1, [sp, #4]
 800748c:	5072      	str	r2, [r6, r1]
 800748e:	9a03      	ldr	r2, [sp, #12]
 8007490:	3304      	adds	r3, #4
 8007492:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007496:	f1b9 0f00 	cmp.w	r9, #0
 800749a:	d01f      	beq.n	80074dc <__multiply+0x130>
 800749c:	46b6      	mov	lr, r6
 800749e:	f04f 0a00 	mov.w	sl, #0
 80074a2:	6834      	ldr	r4, [r6, #0]
 80074a4:	f105 0114 	add.w	r1, r5, #20
 80074a8:	880a      	ldrh	r2, [r1, #0]
 80074aa:	f8be b002 	ldrh.w	fp, [lr, #2]
 80074ae:	b2a4      	uxth	r4, r4
 80074b0:	fb09 b202 	mla	r2, r9, r2, fp
 80074b4:	4492      	add	sl, r2
 80074b6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80074ba:	f84e 4b04 	str.w	r4, [lr], #4
 80074be:	f851 4b04 	ldr.w	r4, [r1], #4
 80074c2:	f8be 2000 	ldrh.w	r2, [lr]
 80074c6:	0c24      	lsrs	r4, r4, #16
 80074c8:	fb09 2404 	mla	r4, r9, r4, r2
 80074cc:	458c      	cmp	ip, r1
 80074ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80074d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074d6:	d8e7      	bhi.n	80074a8 <__multiply+0xfc>
 80074d8:	9a01      	ldr	r2, [sp, #4]
 80074da:	50b4      	str	r4, [r6, r2]
 80074dc:	3604      	adds	r6, #4
 80074de:	e7a3      	b.n	8007428 <__multiply+0x7c>
 80074e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1a5      	bne.n	8007434 <__multiply+0x88>
 80074e8:	3f01      	subs	r7, #1
 80074ea:	e7a1      	b.n	8007430 <__multiply+0x84>
 80074ec:	0800b52b 	.word	0x0800b52b
 80074f0:	0800b53c 	.word	0x0800b53c

080074f4 <__pow5mult>:
 80074f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f8:	4615      	mov	r5, r2
 80074fa:	f012 0203 	ands.w	r2, r2, #3
 80074fe:	4606      	mov	r6, r0
 8007500:	460f      	mov	r7, r1
 8007502:	d007      	beq.n	8007514 <__pow5mult+0x20>
 8007504:	4c25      	ldr	r4, [pc, #148]	; (800759c <__pow5mult+0xa8>)
 8007506:	3a01      	subs	r2, #1
 8007508:	2300      	movs	r3, #0
 800750a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800750e:	f7ff fe9f 	bl	8007250 <__multadd>
 8007512:	4607      	mov	r7, r0
 8007514:	10ad      	asrs	r5, r5, #2
 8007516:	d03d      	beq.n	8007594 <__pow5mult+0xa0>
 8007518:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800751a:	b97c      	cbnz	r4, 800753c <__pow5mult+0x48>
 800751c:	2010      	movs	r0, #16
 800751e:	f7ff fe11 	bl	8007144 <malloc>
 8007522:	4602      	mov	r2, r0
 8007524:	6270      	str	r0, [r6, #36]	; 0x24
 8007526:	b928      	cbnz	r0, 8007534 <__pow5mult+0x40>
 8007528:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800752c:	4b1c      	ldr	r3, [pc, #112]	; (80075a0 <__pow5mult+0xac>)
 800752e:	481d      	ldr	r0, [pc, #116]	; (80075a4 <__pow5mult+0xb0>)
 8007530:	f000 fbce 	bl	8007cd0 <__assert_func>
 8007534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007538:	6004      	str	r4, [r0, #0]
 800753a:	60c4      	str	r4, [r0, #12]
 800753c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007544:	b94c      	cbnz	r4, 800755a <__pow5mult+0x66>
 8007546:	f240 2171 	movw	r1, #625	; 0x271
 800754a:	4630      	mov	r0, r6
 800754c:	f7ff ff18 	bl	8007380 <__i2b>
 8007550:	2300      	movs	r3, #0
 8007552:	4604      	mov	r4, r0
 8007554:	f8c8 0008 	str.w	r0, [r8, #8]
 8007558:	6003      	str	r3, [r0, #0]
 800755a:	f04f 0900 	mov.w	r9, #0
 800755e:	07eb      	lsls	r3, r5, #31
 8007560:	d50a      	bpl.n	8007578 <__pow5mult+0x84>
 8007562:	4639      	mov	r1, r7
 8007564:	4622      	mov	r2, r4
 8007566:	4630      	mov	r0, r6
 8007568:	f7ff ff20 	bl	80073ac <__multiply>
 800756c:	4680      	mov	r8, r0
 800756e:	4639      	mov	r1, r7
 8007570:	4630      	mov	r0, r6
 8007572:	f7ff fe4b 	bl	800720c <_Bfree>
 8007576:	4647      	mov	r7, r8
 8007578:	106d      	asrs	r5, r5, #1
 800757a:	d00b      	beq.n	8007594 <__pow5mult+0xa0>
 800757c:	6820      	ldr	r0, [r4, #0]
 800757e:	b938      	cbnz	r0, 8007590 <__pow5mult+0x9c>
 8007580:	4622      	mov	r2, r4
 8007582:	4621      	mov	r1, r4
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff ff11 	bl	80073ac <__multiply>
 800758a:	6020      	str	r0, [r4, #0]
 800758c:	f8c0 9000 	str.w	r9, [r0]
 8007590:	4604      	mov	r4, r0
 8007592:	e7e4      	b.n	800755e <__pow5mult+0x6a>
 8007594:	4638      	mov	r0, r7
 8007596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800759a:	bf00      	nop
 800759c:	0800b690 	.word	0x0800b690
 80075a0:	0800b4b5 	.word	0x0800b4b5
 80075a4:	0800b53c 	.word	0x0800b53c

080075a8 <__lshift>:
 80075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	460c      	mov	r4, r1
 80075ae:	4607      	mov	r7, r0
 80075b0:	4691      	mov	r9, r2
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	6849      	ldr	r1, [r1, #4]
 80075b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075c0:	f108 0601 	add.w	r6, r8, #1
 80075c4:	42b3      	cmp	r3, r6
 80075c6:	db0b      	blt.n	80075e0 <__lshift+0x38>
 80075c8:	4638      	mov	r0, r7
 80075ca:	f7ff fddf 	bl	800718c <_Balloc>
 80075ce:	4605      	mov	r5, r0
 80075d0:	b948      	cbnz	r0, 80075e6 <__lshift+0x3e>
 80075d2:	4602      	mov	r2, r0
 80075d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075d8:	4b27      	ldr	r3, [pc, #156]	; (8007678 <__lshift+0xd0>)
 80075da:	4828      	ldr	r0, [pc, #160]	; (800767c <__lshift+0xd4>)
 80075dc:	f000 fb78 	bl	8007cd0 <__assert_func>
 80075e0:	3101      	adds	r1, #1
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	e7ee      	b.n	80075c4 <__lshift+0x1c>
 80075e6:	2300      	movs	r3, #0
 80075e8:	f100 0114 	add.w	r1, r0, #20
 80075ec:	f100 0210 	add.w	r2, r0, #16
 80075f0:	4618      	mov	r0, r3
 80075f2:	4553      	cmp	r3, sl
 80075f4:	db33      	blt.n	800765e <__lshift+0xb6>
 80075f6:	6920      	ldr	r0, [r4, #16]
 80075f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075fc:	f104 0314 	add.w	r3, r4, #20
 8007600:	f019 091f 	ands.w	r9, r9, #31
 8007604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800760c:	d02b      	beq.n	8007666 <__lshift+0xbe>
 800760e:	468a      	mov	sl, r1
 8007610:	2200      	movs	r2, #0
 8007612:	f1c9 0e20 	rsb	lr, r9, #32
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	fa00 f009 	lsl.w	r0, r0, r9
 800761c:	4302      	orrs	r2, r0
 800761e:	f84a 2b04 	str.w	r2, [sl], #4
 8007622:	f853 2b04 	ldr.w	r2, [r3], #4
 8007626:	459c      	cmp	ip, r3
 8007628:	fa22 f20e 	lsr.w	r2, r2, lr
 800762c:	d8f3      	bhi.n	8007616 <__lshift+0x6e>
 800762e:	ebac 0304 	sub.w	r3, ip, r4
 8007632:	3b15      	subs	r3, #21
 8007634:	f023 0303 	bic.w	r3, r3, #3
 8007638:	3304      	adds	r3, #4
 800763a:	f104 0015 	add.w	r0, r4, #21
 800763e:	4584      	cmp	ip, r0
 8007640:	bf38      	it	cc
 8007642:	2304      	movcc	r3, #4
 8007644:	50ca      	str	r2, [r1, r3]
 8007646:	b10a      	cbz	r2, 800764c <__lshift+0xa4>
 8007648:	f108 0602 	add.w	r6, r8, #2
 800764c:	3e01      	subs	r6, #1
 800764e:	4638      	mov	r0, r7
 8007650:	4621      	mov	r1, r4
 8007652:	612e      	str	r6, [r5, #16]
 8007654:	f7ff fdda 	bl	800720c <_Bfree>
 8007658:	4628      	mov	r0, r5
 800765a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007662:	3301      	adds	r3, #1
 8007664:	e7c5      	b.n	80075f2 <__lshift+0x4a>
 8007666:	3904      	subs	r1, #4
 8007668:	f853 2b04 	ldr.w	r2, [r3], #4
 800766c:	459c      	cmp	ip, r3
 800766e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007672:	d8f9      	bhi.n	8007668 <__lshift+0xc0>
 8007674:	e7ea      	b.n	800764c <__lshift+0xa4>
 8007676:	bf00      	nop
 8007678:	0800b52b 	.word	0x0800b52b
 800767c:	0800b53c 	.word	0x0800b53c

08007680 <__mcmp>:
 8007680:	4603      	mov	r3, r0
 8007682:	690a      	ldr	r2, [r1, #16]
 8007684:	6900      	ldr	r0, [r0, #16]
 8007686:	b530      	push	{r4, r5, lr}
 8007688:	1a80      	subs	r0, r0, r2
 800768a:	d10d      	bne.n	80076a8 <__mcmp+0x28>
 800768c:	3314      	adds	r3, #20
 800768e:	3114      	adds	r1, #20
 8007690:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007694:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007698:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800769c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076a0:	4295      	cmp	r5, r2
 80076a2:	d002      	beq.n	80076aa <__mcmp+0x2a>
 80076a4:	d304      	bcc.n	80076b0 <__mcmp+0x30>
 80076a6:	2001      	movs	r0, #1
 80076a8:	bd30      	pop	{r4, r5, pc}
 80076aa:	42a3      	cmp	r3, r4
 80076ac:	d3f4      	bcc.n	8007698 <__mcmp+0x18>
 80076ae:	e7fb      	b.n	80076a8 <__mcmp+0x28>
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	e7f8      	b.n	80076a8 <__mcmp+0x28>
	...

080076b8 <__mdiff>:
 80076b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	460c      	mov	r4, r1
 80076be:	4606      	mov	r6, r0
 80076c0:	4611      	mov	r1, r2
 80076c2:	4620      	mov	r0, r4
 80076c4:	4692      	mov	sl, r2
 80076c6:	f7ff ffdb 	bl	8007680 <__mcmp>
 80076ca:	1e05      	subs	r5, r0, #0
 80076cc:	d111      	bne.n	80076f2 <__mdiff+0x3a>
 80076ce:	4629      	mov	r1, r5
 80076d0:	4630      	mov	r0, r6
 80076d2:	f7ff fd5b 	bl	800718c <_Balloc>
 80076d6:	4602      	mov	r2, r0
 80076d8:	b928      	cbnz	r0, 80076e6 <__mdiff+0x2e>
 80076da:	f240 2132 	movw	r1, #562	; 0x232
 80076de:	4b3c      	ldr	r3, [pc, #240]	; (80077d0 <__mdiff+0x118>)
 80076e0:	483c      	ldr	r0, [pc, #240]	; (80077d4 <__mdiff+0x11c>)
 80076e2:	f000 faf5 	bl	8007cd0 <__assert_func>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076ec:	4610      	mov	r0, r2
 80076ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f2:	bfa4      	itt	ge
 80076f4:	4653      	movge	r3, sl
 80076f6:	46a2      	movge	sl, r4
 80076f8:	4630      	mov	r0, r6
 80076fa:	f8da 1004 	ldr.w	r1, [sl, #4]
 80076fe:	bfa6      	itte	ge
 8007700:	461c      	movge	r4, r3
 8007702:	2500      	movge	r5, #0
 8007704:	2501      	movlt	r5, #1
 8007706:	f7ff fd41 	bl	800718c <_Balloc>
 800770a:	4602      	mov	r2, r0
 800770c:	b918      	cbnz	r0, 8007716 <__mdiff+0x5e>
 800770e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007712:	4b2f      	ldr	r3, [pc, #188]	; (80077d0 <__mdiff+0x118>)
 8007714:	e7e4      	b.n	80076e0 <__mdiff+0x28>
 8007716:	f100 0814 	add.w	r8, r0, #20
 800771a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800771e:	60c5      	str	r5, [r0, #12]
 8007720:	f04f 0c00 	mov.w	ip, #0
 8007724:	f10a 0514 	add.w	r5, sl, #20
 8007728:	f10a 0010 	add.w	r0, sl, #16
 800772c:	46c2      	mov	sl, r8
 800772e:	6926      	ldr	r6, [r4, #16]
 8007730:	f104 0914 	add.w	r9, r4, #20
 8007734:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007738:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800773c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007740:	f859 3b04 	ldr.w	r3, [r9], #4
 8007744:	fa1f f18b 	uxth.w	r1, fp
 8007748:	4461      	add	r1, ip
 800774a:	fa1f fc83 	uxth.w	ip, r3
 800774e:	0c1b      	lsrs	r3, r3, #16
 8007750:	eba1 010c 	sub.w	r1, r1, ip
 8007754:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007758:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800775c:	b289      	uxth	r1, r1
 800775e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007762:	454e      	cmp	r6, r9
 8007764:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007768:	f84a 3b04 	str.w	r3, [sl], #4
 800776c:	d8e6      	bhi.n	800773c <__mdiff+0x84>
 800776e:	1b33      	subs	r3, r6, r4
 8007770:	3b15      	subs	r3, #21
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	3415      	adds	r4, #21
 8007778:	3304      	adds	r3, #4
 800777a:	42a6      	cmp	r6, r4
 800777c:	bf38      	it	cc
 800777e:	2304      	movcc	r3, #4
 8007780:	441d      	add	r5, r3
 8007782:	4443      	add	r3, r8
 8007784:	461e      	mov	r6, r3
 8007786:	462c      	mov	r4, r5
 8007788:	4574      	cmp	r4, lr
 800778a:	d30e      	bcc.n	80077aa <__mdiff+0xf2>
 800778c:	f10e 0103 	add.w	r1, lr, #3
 8007790:	1b49      	subs	r1, r1, r5
 8007792:	f021 0103 	bic.w	r1, r1, #3
 8007796:	3d03      	subs	r5, #3
 8007798:	45ae      	cmp	lr, r5
 800779a:	bf38      	it	cc
 800779c:	2100      	movcc	r1, #0
 800779e:	4419      	add	r1, r3
 80077a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80077a4:	b18b      	cbz	r3, 80077ca <__mdiff+0x112>
 80077a6:	6117      	str	r7, [r2, #16]
 80077a8:	e7a0      	b.n	80076ec <__mdiff+0x34>
 80077aa:	f854 8b04 	ldr.w	r8, [r4], #4
 80077ae:	fa1f f188 	uxth.w	r1, r8
 80077b2:	4461      	add	r1, ip
 80077b4:	1408      	asrs	r0, r1, #16
 80077b6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80077ba:	b289      	uxth	r1, r1
 80077bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077c4:	f846 1b04 	str.w	r1, [r6], #4
 80077c8:	e7de      	b.n	8007788 <__mdiff+0xd0>
 80077ca:	3f01      	subs	r7, #1
 80077cc:	e7e8      	b.n	80077a0 <__mdiff+0xe8>
 80077ce:	bf00      	nop
 80077d0:	0800b52b 	.word	0x0800b52b
 80077d4:	0800b53c 	.word	0x0800b53c

080077d8 <__d2b>:
 80077d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80077dc:	2101      	movs	r1, #1
 80077de:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80077e2:	4690      	mov	r8, r2
 80077e4:	461d      	mov	r5, r3
 80077e6:	f7ff fcd1 	bl	800718c <_Balloc>
 80077ea:	4604      	mov	r4, r0
 80077ec:	b930      	cbnz	r0, 80077fc <__d2b+0x24>
 80077ee:	4602      	mov	r2, r0
 80077f0:	f240 310a 	movw	r1, #778	; 0x30a
 80077f4:	4b24      	ldr	r3, [pc, #144]	; (8007888 <__d2b+0xb0>)
 80077f6:	4825      	ldr	r0, [pc, #148]	; (800788c <__d2b+0xb4>)
 80077f8:	f000 fa6a 	bl	8007cd0 <__assert_func>
 80077fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007800:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007804:	bb2d      	cbnz	r5, 8007852 <__d2b+0x7a>
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	f1b8 0300 	subs.w	r3, r8, #0
 800780c:	d026      	beq.n	800785c <__d2b+0x84>
 800780e:	4668      	mov	r0, sp
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	f7ff fd87 	bl	8007324 <__lo0bits>
 8007816:	9900      	ldr	r1, [sp, #0]
 8007818:	b1f0      	cbz	r0, 8007858 <__d2b+0x80>
 800781a:	9a01      	ldr	r2, [sp, #4]
 800781c:	f1c0 0320 	rsb	r3, r0, #32
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	430b      	orrs	r3, r1
 8007826:	40c2      	lsrs	r2, r0
 8007828:	6163      	str	r3, [r4, #20]
 800782a:	9201      	str	r2, [sp, #4]
 800782c:	9b01      	ldr	r3, [sp, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	bf14      	ite	ne
 8007832:	2102      	movne	r1, #2
 8007834:	2101      	moveq	r1, #1
 8007836:	61a3      	str	r3, [r4, #24]
 8007838:	6121      	str	r1, [r4, #16]
 800783a:	b1c5      	cbz	r5, 800786e <__d2b+0x96>
 800783c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007840:	4405      	add	r5, r0
 8007842:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007846:	603d      	str	r5, [r7, #0]
 8007848:	6030      	str	r0, [r6, #0]
 800784a:	4620      	mov	r0, r4
 800784c:	b002      	add	sp, #8
 800784e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007856:	e7d6      	b.n	8007806 <__d2b+0x2e>
 8007858:	6161      	str	r1, [r4, #20]
 800785a:	e7e7      	b.n	800782c <__d2b+0x54>
 800785c:	a801      	add	r0, sp, #4
 800785e:	f7ff fd61 	bl	8007324 <__lo0bits>
 8007862:	2101      	movs	r1, #1
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	6121      	str	r1, [r4, #16]
 8007868:	6163      	str	r3, [r4, #20]
 800786a:	3020      	adds	r0, #32
 800786c:	e7e5      	b.n	800783a <__d2b+0x62>
 800786e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007872:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007876:	6038      	str	r0, [r7, #0]
 8007878:	6918      	ldr	r0, [r3, #16]
 800787a:	f7ff fd33 	bl	80072e4 <__hi0bits>
 800787e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007882:	6031      	str	r1, [r6, #0]
 8007884:	e7e1      	b.n	800784a <__d2b+0x72>
 8007886:	bf00      	nop
 8007888:	0800b52b 	.word	0x0800b52b
 800788c:	0800b53c 	.word	0x0800b53c

08007890 <_calloc_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	fb02 f501 	mul.w	r5, r2, r1
 8007896:	4629      	mov	r1, r5
 8007898:	f000 f854 	bl	8007944 <_malloc_r>
 800789c:	4604      	mov	r4, r0
 800789e:	b118      	cbz	r0, 80078a8 <_calloc_r+0x18>
 80078a0:	462a      	mov	r2, r5
 80078a2:	2100      	movs	r1, #0
 80078a4:	f7fe f90a 	bl	8005abc <memset>
 80078a8:	4620      	mov	r0, r4
 80078aa:	bd38      	pop	{r3, r4, r5, pc}

080078ac <_free_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4605      	mov	r5, r0
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d043      	beq.n	800793c <_free_r+0x90>
 80078b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b8:	1f0c      	subs	r4, r1, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfb8      	it	lt
 80078be:	18e4      	addlt	r4, r4, r3
 80078c0:	f000 fa62 	bl	8007d88 <__malloc_lock>
 80078c4:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <_free_r+0x94>)
 80078c6:	6813      	ldr	r3, [r2, #0]
 80078c8:	4610      	mov	r0, r2
 80078ca:	b933      	cbnz	r3, 80078da <_free_r+0x2e>
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	6014      	str	r4, [r2, #0]
 80078d0:	4628      	mov	r0, r5
 80078d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d6:	f000 ba5d 	b.w	8007d94 <__malloc_unlock>
 80078da:	42a3      	cmp	r3, r4
 80078dc:	d90a      	bls.n	80078f4 <_free_r+0x48>
 80078de:	6821      	ldr	r1, [r4, #0]
 80078e0:	1862      	adds	r2, r4, r1
 80078e2:	4293      	cmp	r3, r2
 80078e4:	bf01      	itttt	eq
 80078e6:	681a      	ldreq	r2, [r3, #0]
 80078e8:	685b      	ldreq	r3, [r3, #4]
 80078ea:	1852      	addeq	r2, r2, r1
 80078ec:	6022      	streq	r2, [r4, #0]
 80078ee:	6063      	str	r3, [r4, #4]
 80078f0:	6004      	str	r4, [r0, #0]
 80078f2:	e7ed      	b.n	80078d0 <_free_r+0x24>
 80078f4:	461a      	mov	r2, r3
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	b10b      	cbz	r3, 80078fe <_free_r+0x52>
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	d9fa      	bls.n	80078f4 <_free_r+0x48>
 80078fe:	6811      	ldr	r1, [r2, #0]
 8007900:	1850      	adds	r0, r2, r1
 8007902:	42a0      	cmp	r0, r4
 8007904:	d10b      	bne.n	800791e <_free_r+0x72>
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	4401      	add	r1, r0
 800790a:	1850      	adds	r0, r2, r1
 800790c:	4283      	cmp	r3, r0
 800790e:	6011      	str	r1, [r2, #0]
 8007910:	d1de      	bne.n	80078d0 <_free_r+0x24>
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	4401      	add	r1, r0
 8007918:	6011      	str	r1, [r2, #0]
 800791a:	6053      	str	r3, [r2, #4]
 800791c:	e7d8      	b.n	80078d0 <_free_r+0x24>
 800791e:	d902      	bls.n	8007926 <_free_r+0x7a>
 8007920:	230c      	movs	r3, #12
 8007922:	602b      	str	r3, [r5, #0]
 8007924:	e7d4      	b.n	80078d0 <_free_r+0x24>
 8007926:	6820      	ldr	r0, [r4, #0]
 8007928:	1821      	adds	r1, r4, r0
 800792a:	428b      	cmp	r3, r1
 800792c:	bf01      	itttt	eq
 800792e:	6819      	ldreq	r1, [r3, #0]
 8007930:	685b      	ldreq	r3, [r3, #4]
 8007932:	1809      	addeq	r1, r1, r0
 8007934:	6021      	streq	r1, [r4, #0]
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	6054      	str	r4, [r2, #4]
 800793a:	e7c9      	b.n	80078d0 <_free_r+0x24>
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	200002ac 	.word	0x200002ac

08007944 <_malloc_r>:
 8007944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007946:	1ccd      	adds	r5, r1, #3
 8007948:	f025 0503 	bic.w	r5, r5, #3
 800794c:	3508      	adds	r5, #8
 800794e:	2d0c      	cmp	r5, #12
 8007950:	bf38      	it	cc
 8007952:	250c      	movcc	r5, #12
 8007954:	2d00      	cmp	r5, #0
 8007956:	4606      	mov	r6, r0
 8007958:	db01      	blt.n	800795e <_malloc_r+0x1a>
 800795a:	42a9      	cmp	r1, r5
 800795c:	d903      	bls.n	8007966 <_malloc_r+0x22>
 800795e:	230c      	movs	r3, #12
 8007960:	6033      	str	r3, [r6, #0]
 8007962:	2000      	movs	r0, #0
 8007964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007966:	f000 fa0f 	bl	8007d88 <__malloc_lock>
 800796a:	4921      	ldr	r1, [pc, #132]	; (80079f0 <_malloc_r+0xac>)
 800796c:	680a      	ldr	r2, [r1, #0]
 800796e:	4614      	mov	r4, r2
 8007970:	b99c      	cbnz	r4, 800799a <_malloc_r+0x56>
 8007972:	4f20      	ldr	r7, [pc, #128]	; (80079f4 <_malloc_r+0xb0>)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	b923      	cbnz	r3, 8007982 <_malloc_r+0x3e>
 8007978:	4621      	mov	r1, r4
 800797a:	4630      	mov	r0, r6
 800797c:	f000 f998 	bl	8007cb0 <_sbrk_r>
 8007980:	6038      	str	r0, [r7, #0]
 8007982:	4629      	mov	r1, r5
 8007984:	4630      	mov	r0, r6
 8007986:	f000 f993 	bl	8007cb0 <_sbrk_r>
 800798a:	1c43      	adds	r3, r0, #1
 800798c:	d123      	bne.n	80079d6 <_malloc_r+0x92>
 800798e:	230c      	movs	r3, #12
 8007990:	4630      	mov	r0, r6
 8007992:	6033      	str	r3, [r6, #0]
 8007994:	f000 f9fe 	bl	8007d94 <__malloc_unlock>
 8007998:	e7e3      	b.n	8007962 <_malloc_r+0x1e>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	1b5b      	subs	r3, r3, r5
 800799e:	d417      	bmi.n	80079d0 <_malloc_r+0x8c>
 80079a0:	2b0b      	cmp	r3, #11
 80079a2:	d903      	bls.n	80079ac <_malloc_r+0x68>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	441c      	add	r4, r3
 80079a8:	6025      	str	r5, [r4, #0]
 80079aa:	e004      	b.n	80079b6 <_malloc_r+0x72>
 80079ac:	6863      	ldr	r3, [r4, #4]
 80079ae:	42a2      	cmp	r2, r4
 80079b0:	bf0c      	ite	eq
 80079b2:	600b      	streq	r3, [r1, #0]
 80079b4:	6053      	strne	r3, [r2, #4]
 80079b6:	4630      	mov	r0, r6
 80079b8:	f000 f9ec 	bl	8007d94 <__malloc_unlock>
 80079bc:	f104 000b 	add.w	r0, r4, #11
 80079c0:	1d23      	adds	r3, r4, #4
 80079c2:	f020 0007 	bic.w	r0, r0, #7
 80079c6:	1ac2      	subs	r2, r0, r3
 80079c8:	d0cc      	beq.n	8007964 <_malloc_r+0x20>
 80079ca:	1a1b      	subs	r3, r3, r0
 80079cc:	50a3      	str	r3, [r4, r2]
 80079ce:	e7c9      	b.n	8007964 <_malloc_r+0x20>
 80079d0:	4622      	mov	r2, r4
 80079d2:	6864      	ldr	r4, [r4, #4]
 80079d4:	e7cc      	b.n	8007970 <_malloc_r+0x2c>
 80079d6:	1cc4      	adds	r4, r0, #3
 80079d8:	f024 0403 	bic.w	r4, r4, #3
 80079dc:	42a0      	cmp	r0, r4
 80079de:	d0e3      	beq.n	80079a8 <_malloc_r+0x64>
 80079e0:	1a21      	subs	r1, r4, r0
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 f964 	bl	8007cb0 <_sbrk_r>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d1dd      	bne.n	80079a8 <_malloc_r+0x64>
 80079ec:	e7cf      	b.n	800798e <_malloc_r+0x4a>
 80079ee:	bf00      	nop
 80079f0:	200002ac 	.word	0x200002ac
 80079f4:	200002b0 	.word	0x200002b0

080079f8 <__ssputs_r>:
 80079f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079fc:	688e      	ldr	r6, [r1, #8]
 80079fe:	4682      	mov	sl, r0
 8007a00:	429e      	cmp	r6, r3
 8007a02:	460c      	mov	r4, r1
 8007a04:	4690      	mov	r8, r2
 8007a06:	461f      	mov	r7, r3
 8007a08:	d838      	bhi.n	8007a7c <__ssputs_r+0x84>
 8007a0a:	898a      	ldrh	r2, [r1, #12]
 8007a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a10:	d032      	beq.n	8007a78 <__ssputs_r+0x80>
 8007a12:	6825      	ldr	r5, [r4, #0]
 8007a14:	6909      	ldr	r1, [r1, #16]
 8007a16:	3301      	adds	r3, #1
 8007a18:	eba5 0901 	sub.w	r9, r5, r1
 8007a1c:	6965      	ldr	r5, [r4, #20]
 8007a1e:	444b      	add	r3, r9
 8007a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a28:	106d      	asrs	r5, r5, #1
 8007a2a:	429d      	cmp	r5, r3
 8007a2c:	bf38      	it	cc
 8007a2e:	461d      	movcc	r5, r3
 8007a30:	0553      	lsls	r3, r2, #21
 8007a32:	d531      	bpl.n	8007a98 <__ssputs_r+0xa0>
 8007a34:	4629      	mov	r1, r5
 8007a36:	f7ff ff85 	bl	8007944 <_malloc_r>
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	b950      	cbnz	r0, 8007a54 <__ssputs_r+0x5c>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	f8ca 3000 	str.w	r3, [sl]
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a54:	464a      	mov	r2, r9
 8007a56:	6921      	ldr	r1, [r4, #16]
 8007a58:	f7ff fb8a 	bl	8007170 <memcpy>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	6126      	str	r6, [r4, #16]
 8007a6a:	444e      	add	r6, r9
 8007a6c:	6026      	str	r6, [r4, #0]
 8007a6e:	463e      	mov	r6, r7
 8007a70:	6165      	str	r5, [r4, #20]
 8007a72:	eba5 0509 	sub.w	r5, r5, r9
 8007a76:	60a5      	str	r5, [r4, #8]
 8007a78:	42be      	cmp	r6, r7
 8007a7a:	d900      	bls.n	8007a7e <__ssputs_r+0x86>
 8007a7c:	463e      	mov	r6, r7
 8007a7e:	4632      	mov	r2, r6
 8007a80:	4641      	mov	r1, r8
 8007a82:	6820      	ldr	r0, [r4, #0]
 8007a84:	f000 f966 	bl	8007d54 <memmove>
 8007a88:	68a3      	ldr	r3, [r4, #8]
 8007a8a:	6822      	ldr	r2, [r4, #0]
 8007a8c:	1b9b      	subs	r3, r3, r6
 8007a8e:	4432      	add	r2, r6
 8007a90:	2000      	movs	r0, #0
 8007a92:	60a3      	str	r3, [r4, #8]
 8007a94:	6022      	str	r2, [r4, #0]
 8007a96:	e7db      	b.n	8007a50 <__ssputs_r+0x58>
 8007a98:	462a      	mov	r2, r5
 8007a9a:	f000 f981 	bl	8007da0 <_realloc_r>
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d1e1      	bne.n	8007a68 <__ssputs_r+0x70>
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	6921      	ldr	r1, [r4, #16]
 8007aa8:	f7ff ff00 	bl	80078ac <_free_r>
 8007aac:	e7c7      	b.n	8007a3e <__ssputs_r+0x46>
	...

08007ab0 <_svfiprintf_r>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	4698      	mov	r8, r3
 8007ab6:	898b      	ldrh	r3, [r1, #12]
 8007ab8:	4607      	mov	r7, r0
 8007aba:	061b      	lsls	r3, r3, #24
 8007abc:	460d      	mov	r5, r1
 8007abe:	4614      	mov	r4, r2
 8007ac0:	b09d      	sub	sp, #116	; 0x74
 8007ac2:	d50e      	bpl.n	8007ae2 <_svfiprintf_r+0x32>
 8007ac4:	690b      	ldr	r3, [r1, #16]
 8007ac6:	b963      	cbnz	r3, 8007ae2 <_svfiprintf_r+0x32>
 8007ac8:	2140      	movs	r1, #64	; 0x40
 8007aca:	f7ff ff3b 	bl	8007944 <_malloc_r>
 8007ace:	6028      	str	r0, [r5, #0]
 8007ad0:	6128      	str	r0, [r5, #16]
 8007ad2:	b920      	cbnz	r0, 8007ade <_svfiprintf_r+0x2e>
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8007adc:	e0d1      	b.n	8007c82 <_svfiprintf_r+0x1d2>
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	616b      	str	r3, [r5, #20]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae6:	2320      	movs	r3, #32
 8007ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aec:	2330      	movs	r3, #48	; 0x30
 8007aee:	f04f 0901 	mov.w	r9, #1
 8007af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007af6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c9c <_svfiprintf_r+0x1ec>
 8007afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007afe:	4623      	mov	r3, r4
 8007b00:	469a      	mov	sl, r3
 8007b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b06:	b10a      	cbz	r2, 8007b0c <_svfiprintf_r+0x5c>
 8007b08:	2a25      	cmp	r2, #37	; 0x25
 8007b0a:	d1f9      	bne.n	8007b00 <_svfiprintf_r+0x50>
 8007b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b10:	d00b      	beq.n	8007b2a <_svfiprintf_r+0x7a>
 8007b12:	465b      	mov	r3, fp
 8007b14:	4622      	mov	r2, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f7ff ff6d 	bl	80079f8 <__ssputs_r>
 8007b1e:	3001      	adds	r0, #1
 8007b20:	f000 80aa 	beq.w	8007c78 <_svfiprintf_r+0x1c8>
 8007b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b26:	445a      	add	r2, fp
 8007b28:	9209      	str	r2, [sp, #36]	; 0x24
 8007b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80a2 	beq.w	8007c78 <_svfiprintf_r+0x1c8>
 8007b34:	2300      	movs	r3, #0
 8007b36:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b3e:	f10a 0a01 	add.w	sl, sl, #1
 8007b42:	9304      	str	r3, [sp, #16]
 8007b44:	9307      	str	r3, [sp, #28]
 8007b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b4c:	4654      	mov	r4, sl
 8007b4e:	2205      	movs	r2, #5
 8007b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b54:	4851      	ldr	r0, [pc, #324]	; (8007c9c <_svfiprintf_r+0x1ec>)
 8007b56:	f7ff fafd 	bl	8007154 <memchr>
 8007b5a:	9a04      	ldr	r2, [sp, #16]
 8007b5c:	b9d8      	cbnz	r0, 8007b96 <_svfiprintf_r+0xe6>
 8007b5e:	06d0      	lsls	r0, r2, #27
 8007b60:	bf44      	itt	mi
 8007b62:	2320      	movmi	r3, #32
 8007b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b68:	0711      	lsls	r1, r2, #28
 8007b6a:	bf44      	itt	mi
 8007b6c:	232b      	movmi	r3, #43	; 0x2b
 8007b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b72:	f89a 3000 	ldrb.w	r3, [sl]
 8007b76:	2b2a      	cmp	r3, #42	; 0x2a
 8007b78:	d015      	beq.n	8007ba6 <_svfiprintf_r+0xf6>
 8007b7a:	4654      	mov	r4, sl
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	f04f 0c0a 	mov.w	ip, #10
 8007b82:	9a07      	ldr	r2, [sp, #28]
 8007b84:	4621      	mov	r1, r4
 8007b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b8a:	3b30      	subs	r3, #48	; 0x30
 8007b8c:	2b09      	cmp	r3, #9
 8007b8e:	d94e      	bls.n	8007c2e <_svfiprintf_r+0x17e>
 8007b90:	b1b0      	cbz	r0, 8007bc0 <_svfiprintf_r+0x110>
 8007b92:	9207      	str	r2, [sp, #28]
 8007b94:	e014      	b.n	8007bc0 <_svfiprintf_r+0x110>
 8007b96:	eba0 0308 	sub.w	r3, r0, r8
 8007b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	46a2      	mov	sl, r4
 8007ba2:	9304      	str	r3, [sp, #16]
 8007ba4:	e7d2      	b.n	8007b4c <_svfiprintf_r+0x9c>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	1d19      	adds	r1, r3, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	9103      	str	r1, [sp, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bfbb      	ittet	lt
 8007bb2:	425b      	neglt	r3, r3
 8007bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007bb8:	9307      	strge	r3, [sp, #28]
 8007bba:	9307      	strlt	r3, [sp, #28]
 8007bbc:	bfb8      	it	lt
 8007bbe:	9204      	strlt	r2, [sp, #16]
 8007bc0:	7823      	ldrb	r3, [r4, #0]
 8007bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8007bc4:	d10c      	bne.n	8007be0 <_svfiprintf_r+0x130>
 8007bc6:	7863      	ldrb	r3, [r4, #1]
 8007bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bca:	d135      	bne.n	8007c38 <_svfiprintf_r+0x188>
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	3402      	adds	r4, #2
 8007bd0:	1d1a      	adds	r2, r3, #4
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	9203      	str	r2, [sp, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bfb8      	it	lt
 8007bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bde:	9305      	str	r3, [sp, #20]
 8007be0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cac <_svfiprintf_r+0x1fc>
 8007be4:	2203      	movs	r2, #3
 8007be6:	4650      	mov	r0, sl
 8007be8:	7821      	ldrb	r1, [r4, #0]
 8007bea:	f7ff fab3 	bl	8007154 <memchr>
 8007bee:	b140      	cbz	r0, 8007c02 <_svfiprintf_r+0x152>
 8007bf0:	2340      	movs	r3, #64	; 0x40
 8007bf2:	eba0 000a 	sub.w	r0, r0, sl
 8007bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	3401      	adds	r4, #1
 8007bfe:	4303      	orrs	r3, r0
 8007c00:	9304      	str	r3, [sp, #16]
 8007c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c06:	2206      	movs	r2, #6
 8007c08:	4825      	ldr	r0, [pc, #148]	; (8007ca0 <_svfiprintf_r+0x1f0>)
 8007c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c0e:	f7ff faa1 	bl	8007154 <memchr>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d038      	beq.n	8007c88 <_svfiprintf_r+0x1d8>
 8007c16:	4b23      	ldr	r3, [pc, #140]	; (8007ca4 <_svfiprintf_r+0x1f4>)
 8007c18:	bb1b      	cbnz	r3, 8007c62 <_svfiprintf_r+0x1b2>
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	3307      	adds	r3, #7
 8007c1e:	f023 0307 	bic.w	r3, r3, #7
 8007c22:	3308      	adds	r3, #8
 8007c24:	9303      	str	r3, [sp, #12]
 8007c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c28:	4433      	add	r3, r6
 8007c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c2c:	e767      	b.n	8007afe <_svfiprintf_r+0x4e>
 8007c2e:	460c      	mov	r4, r1
 8007c30:	2001      	movs	r0, #1
 8007c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c36:	e7a5      	b.n	8007b84 <_svfiprintf_r+0xd4>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f04f 0c0a 	mov.w	ip, #10
 8007c3e:	4619      	mov	r1, r3
 8007c40:	3401      	adds	r4, #1
 8007c42:	9305      	str	r3, [sp, #20]
 8007c44:	4620      	mov	r0, r4
 8007c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c4a:	3a30      	subs	r2, #48	; 0x30
 8007c4c:	2a09      	cmp	r2, #9
 8007c4e:	d903      	bls.n	8007c58 <_svfiprintf_r+0x1a8>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0c5      	beq.n	8007be0 <_svfiprintf_r+0x130>
 8007c54:	9105      	str	r1, [sp, #20]
 8007c56:	e7c3      	b.n	8007be0 <_svfiprintf_r+0x130>
 8007c58:	4604      	mov	r4, r0
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c60:	e7f0      	b.n	8007c44 <_svfiprintf_r+0x194>
 8007c62:	ab03      	add	r3, sp, #12
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	462a      	mov	r2, r5
 8007c68:	4638      	mov	r0, r7
 8007c6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <_svfiprintf_r+0x1f8>)
 8007c6c:	a904      	add	r1, sp, #16
 8007c6e:	f7fd ffcb 	bl	8005c08 <_printf_float>
 8007c72:	1c42      	adds	r2, r0, #1
 8007c74:	4606      	mov	r6, r0
 8007c76:	d1d6      	bne.n	8007c26 <_svfiprintf_r+0x176>
 8007c78:	89ab      	ldrh	r3, [r5, #12]
 8007c7a:	065b      	lsls	r3, r3, #25
 8007c7c:	f53f af2c 	bmi.w	8007ad8 <_svfiprintf_r+0x28>
 8007c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c82:	b01d      	add	sp, #116	; 0x74
 8007c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c88:	ab03      	add	r3, sp, #12
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	4638      	mov	r0, r7
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <_svfiprintf_r+0x1f8>)
 8007c92:	a904      	add	r1, sp, #16
 8007c94:	f7fe fa54 	bl	8006140 <_printf_i>
 8007c98:	e7eb      	b.n	8007c72 <_svfiprintf_r+0x1c2>
 8007c9a:	bf00      	nop
 8007c9c:	0800b69c 	.word	0x0800b69c
 8007ca0:	0800b6a6 	.word	0x0800b6a6
 8007ca4:	08005c09 	.word	0x08005c09
 8007ca8:	080079f9 	.word	0x080079f9
 8007cac:	0800b6a2 	.word	0x0800b6a2

08007cb0 <_sbrk_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4d05      	ldr	r5, [pc, #20]	; (8007ccc <_sbrk_r+0x1c>)
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	602b      	str	r3, [r5, #0]
 8007cbc:	f7fb fe60 	bl	8003980 <_sbrk>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d102      	bne.n	8007cca <_sbrk_r+0x1a>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	b103      	cbz	r3, 8007cca <_sbrk_r+0x1a>
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	20000598 	.word	0x20000598

08007cd0 <__assert_func>:
 8007cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cd2:	4614      	mov	r4, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <__assert_func+0x2c>)
 8007cd8:	4605      	mov	r5, r0
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68d8      	ldr	r0, [r3, #12]
 8007cde:	b14c      	cbz	r4, 8007cf4 <__assert_func+0x24>
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <__assert_func+0x30>)
 8007ce2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ce6:	9100      	str	r1, [sp, #0]
 8007ce8:	462b      	mov	r3, r5
 8007cea:	4906      	ldr	r1, [pc, #24]	; (8007d04 <__assert_func+0x34>)
 8007cec:	f000 f80e 	bl	8007d0c <fiprintf>
 8007cf0:	f000 faa2 	bl	8008238 <abort>
 8007cf4:	4b04      	ldr	r3, [pc, #16]	; (8007d08 <__assert_func+0x38>)
 8007cf6:	461c      	mov	r4, r3
 8007cf8:	e7f3      	b.n	8007ce2 <__assert_func+0x12>
 8007cfa:	bf00      	nop
 8007cfc:	20000030 	.word	0x20000030
 8007d00:	0800b6ad 	.word	0x0800b6ad
 8007d04:	0800b6ba 	.word	0x0800b6ba
 8007d08:	0800b6e8 	.word	0x0800b6e8

08007d0c <fiprintf>:
 8007d0c:	b40e      	push	{r1, r2, r3}
 8007d0e:	b503      	push	{r0, r1, lr}
 8007d10:	4601      	mov	r1, r0
 8007d12:	ab03      	add	r3, sp, #12
 8007d14:	4805      	ldr	r0, [pc, #20]	; (8007d2c <fiprintf+0x20>)
 8007d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	f000 f88d 	bl	8007e3c <_vfiprintf_r>
 8007d22:	b002      	add	sp, #8
 8007d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d28:	b003      	add	sp, #12
 8007d2a:	4770      	bx	lr
 8007d2c:	20000030 	.word	0x20000030

08007d30 <__ascii_mbtowc>:
 8007d30:	b082      	sub	sp, #8
 8007d32:	b901      	cbnz	r1, 8007d36 <__ascii_mbtowc+0x6>
 8007d34:	a901      	add	r1, sp, #4
 8007d36:	b142      	cbz	r2, 8007d4a <__ascii_mbtowc+0x1a>
 8007d38:	b14b      	cbz	r3, 8007d4e <__ascii_mbtowc+0x1e>
 8007d3a:	7813      	ldrb	r3, [r2, #0]
 8007d3c:	600b      	str	r3, [r1, #0]
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	1e10      	subs	r0, r2, #0
 8007d42:	bf18      	it	ne
 8007d44:	2001      	movne	r0, #1
 8007d46:	b002      	add	sp, #8
 8007d48:	4770      	bx	lr
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	e7fb      	b.n	8007d46 <__ascii_mbtowc+0x16>
 8007d4e:	f06f 0001 	mvn.w	r0, #1
 8007d52:	e7f8      	b.n	8007d46 <__ascii_mbtowc+0x16>

08007d54 <memmove>:
 8007d54:	4288      	cmp	r0, r1
 8007d56:	b510      	push	{r4, lr}
 8007d58:	eb01 0402 	add.w	r4, r1, r2
 8007d5c:	d902      	bls.n	8007d64 <memmove+0x10>
 8007d5e:	4284      	cmp	r4, r0
 8007d60:	4623      	mov	r3, r4
 8007d62:	d807      	bhi.n	8007d74 <memmove+0x20>
 8007d64:	1e43      	subs	r3, r0, #1
 8007d66:	42a1      	cmp	r1, r4
 8007d68:	d008      	beq.n	8007d7c <memmove+0x28>
 8007d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d72:	e7f8      	b.n	8007d66 <memmove+0x12>
 8007d74:	4601      	mov	r1, r0
 8007d76:	4402      	add	r2, r0
 8007d78:	428a      	cmp	r2, r1
 8007d7a:	d100      	bne.n	8007d7e <memmove+0x2a>
 8007d7c:	bd10      	pop	{r4, pc}
 8007d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d86:	e7f7      	b.n	8007d78 <memmove+0x24>

08007d88 <__malloc_lock>:
 8007d88:	4801      	ldr	r0, [pc, #4]	; (8007d90 <__malloc_lock+0x8>)
 8007d8a:	f000 bc15 	b.w	80085b8 <__retarget_lock_acquire_recursive>
 8007d8e:	bf00      	nop
 8007d90:	200005a0 	.word	0x200005a0

08007d94 <__malloc_unlock>:
 8007d94:	4801      	ldr	r0, [pc, #4]	; (8007d9c <__malloc_unlock+0x8>)
 8007d96:	f000 bc10 	b.w	80085ba <__retarget_lock_release_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	200005a0 	.word	0x200005a0

08007da0 <_realloc_r>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	4607      	mov	r7, r0
 8007da4:	4614      	mov	r4, r2
 8007da6:	460e      	mov	r6, r1
 8007da8:	b921      	cbnz	r1, 8007db4 <_realloc_r+0x14>
 8007daa:	4611      	mov	r1, r2
 8007dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007db0:	f7ff bdc8 	b.w	8007944 <_malloc_r>
 8007db4:	b922      	cbnz	r2, 8007dc0 <_realloc_r+0x20>
 8007db6:	f7ff fd79 	bl	80078ac <_free_r>
 8007dba:	4625      	mov	r5, r4
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc0:	f000 fc60 	bl	8008684 <_malloc_usable_size_r>
 8007dc4:	42a0      	cmp	r0, r4
 8007dc6:	d20f      	bcs.n	8007de8 <_realloc_r+0x48>
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4638      	mov	r0, r7
 8007dcc:	f7ff fdba 	bl	8007944 <_malloc_r>
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d0f2      	beq.n	8007dbc <_realloc_r+0x1c>
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4622      	mov	r2, r4
 8007dda:	f7ff f9c9 	bl	8007170 <memcpy>
 8007dde:	4631      	mov	r1, r6
 8007de0:	4638      	mov	r0, r7
 8007de2:	f7ff fd63 	bl	80078ac <_free_r>
 8007de6:	e7e9      	b.n	8007dbc <_realloc_r+0x1c>
 8007de8:	4635      	mov	r5, r6
 8007dea:	e7e7      	b.n	8007dbc <_realloc_r+0x1c>

08007dec <__sfputc_r>:
 8007dec:	6893      	ldr	r3, [r2, #8]
 8007dee:	b410      	push	{r4}
 8007df0:	3b01      	subs	r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	6093      	str	r3, [r2, #8]
 8007df6:	da07      	bge.n	8007e08 <__sfputc_r+0x1c>
 8007df8:	6994      	ldr	r4, [r2, #24]
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	db01      	blt.n	8007e02 <__sfputc_r+0x16>
 8007dfe:	290a      	cmp	r1, #10
 8007e00:	d102      	bne.n	8007e08 <__sfputc_r+0x1c>
 8007e02:	bc10      	pop	{r4}
 8007e04:	f000 b94a 	b.w	800809c <__swbuf_r>
 8007e08:	6813      	ldr	r3, [r2, #0]
 8007e0a:	1c58      	adds	r0, r3, #1
 8007e0c:	6010      	str	r0, [r2, #0]
 8007e0e:	7019      	strb	r1, [r3, #0]
 8007e10:	4608      	mov	r0, r1
 8007e12:	bc10      	pop	{r4}
 8007e14:	4770      	bx	lr

08007e16 <__sfputs_r>:
 8007e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e18:	4606      	mov	r6, r0
 8007e1a:	460f      	mov	r7, r1
 8007e1c:	4614      	mov	r4, r2
 8007e1e:	18d5      	adds	r5, r2, r3
 8007e20:	42ac      	cmp	r4, r5
 8007e22:	d101      	bne.n	8007e28 <__sfputs_r+0x12>
 8007e24:	2000      	movs	r0, #0
 8007e26:	e007      	b.n	8007e38 <__sfputs_r+0x22>
 8007e28:	463a      	mov	r2, r7
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e30:	f7ff ffdc 	bl	8007dec <__sfputc_r>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d1f3      	bne.n	8007e20 <__sfputs_r+0xa>
 8007e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e3c <_vfiprintf_r>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	460d      	mov	r5, r1
 8007e42:	4614      	mov	r4, r2
 8007e44:	4698      	mov	r8, r3
 8007e46:	4606      	mov	r6, r0
 8007e48:	b09d      	sub	sp, #116	; 0x74
 8007e4a:	b118      	cbz	r0, 8007e54 <_vfiprintf_r+0x18>
 8007e4c:	6983      	ldr	r3, [r0, #24]
 8007e4e:	b90b      	cbnz	r3, 8007e54 <_vfiprintf_r+0x18>
 8007e50:	f000 fb14 	bl	800847c <__sinit>
 8007e54:	4b89      	ldr	r3, [pc, #548]	; (800807c <_vfiprintf_r+0x240>)
 8007e56:	429d      	cmp	r5, r3
 8007e58:	d11b      	bne.n	8007e92 <_vfiprintf_r+0x56>
 8007e5a:	6875      	ldr	r5, [r6, #4]
 8007e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e5e:	07d9      	lsls	r1, r3, #31
 8007e60:	d405      	bmi.n	8007e6e <_vfiprintf_r+0x32>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	059a      	lsls	r2, r3, #22
 8007e66:	d402      	bmi.n	8007e6e <_vfiprintf_r+0x32>
 8007e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e6a:	f000 fba5 	bl	80085b8 <__retarget_lock_acquire_recursive>
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	071b      	lsls	r3, r3, #28
 8007e72:	d501      	bpl.n	8007e78 <_vfiprintf_r+0x3c>
 8007e74:	692b      	ldr	r3, [r5, #16]
 8007e76:	b9eb      	cbnz	r3, 8007eb4 <_vfiprintf_r+0x78>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f000 f96e 	bl	800815c <__swsetup_r>
 8007e80:	b1c0      	cbz	r0, 8007eb4 <_vfiprintf_r+0x78>
 8007e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e84:	07dc      	lsls	r4, r3, #31
 8007e86:	d50e      	bpl.n	8007ea6 <_vfiprintf_r+0x6a>
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	b01d      	add	sp, #116	; 0x74
 8007e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e92:	4b7b      	ldr	r3, [pc, #492]	; (8008080 <_vfiprintf_r+0x244>)
 8007e94:	429d      	cmp	r5, r3
 8007e96:	d101      	bne.n	8007e9c <_vfiprintf_r+0x60>
 8007e98:	68b5      	ldr	r5, [r6, #8]
 8007e9a:	e7df      	b.n	8007e5c <_vfiprintf_r+0x20>
 8007e9c:	4b79      	ldr	r3, [pc, #484]	; (8008084 <_vfiprintf_r+0x248>)
 8007e9e:	429d      	cmp	r5, r3
 8007ea0:	bf08      	it	eq
 8007ea2:	68f5      	ldreq	r5, [r6, #12]
 8007ea4:	e7da      	b.n	8007e5c <_vfiprintf_r+0x20>
 8007ea6:	89ab      	ldrh	r3, [r5, #12]
 8007ea8:	0598      	lsls	r0, r3, #22
 8007eaa:	d4ed      	bmi.n	8007e88 <_vfiprintf_r+0x4c>
 8007eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eae:	f000 fb84 	bl	80085ba <__retarget_lock_release_recursive>
 8007eb2:	e7e9      	b.n	8007e88 <_vfiprintf_r+0x4c>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb8:	2320      	movs	r3, #32
 8007eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ebe:	2330      	movs	r3, #48	; 0x30
 8007ec0:	f04f 0901 	mov.w	r9, #1
 8007ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ec8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008088 <_vfiprintf_r+0x24c>
 8007ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ed0:	4623      	mov	r3, r4
 8007ed2:	469a      	mov	sl, r3
 8007ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ed8:	b10a      	cbz	r2, 8007ede <_vfiprintf_r+0xa2>
 8007eda:	2a25      	cmp	r2, #37	; 0x25
 8007edc:	d1f9      	bne.n	8007ed2 <_vfiprintf_r+0x96>
 8007ede:	ebba 0b04 	subs.w	fp, sl, r4
 8007ee2:	d00b      	beq.n	8007efc <_vfiprintf_r+0xc0>
 8007ee4:	465b      	mov	r3, fp
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4630      	mov	r0, r6
 8007eec:	f7ff ff93 	bl	8007e16 <__sfputs_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	f000 80aa 	beq.w	800804a <_vfiprintf_r+0x20e>
 8007ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ef8:	445a      	add	r2, fp
 8007efa:	9209      	str	r2, [sp, #36]	; 0x24
 8007efc:	f89a 3000 	ldrb.w	r3, [sl]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 80a2 	beq.w	800804a <_vfiprintf_r+0x20e>
 8007f06:	2300      	movs	r3, #0
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f10:	f10a 0a01 	add.w	sl, sl, #1
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	9307      	str	r3, [sp, #28]
 8007f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8007f1e:	4654      	mov	r4, sl
 8007f20:	2205      	movs	r2, #5
 8007f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f26:	4858      	ldr	r0, [pc, #352]	; (8008088 <_vfiprintf_r+0x24c>)
 8007f28:	f7ff f914 	bl	8007154 <memchr>
 8007f2c:	9a04      	ldr	r2, [sp, #16]
 8007f2e:	b9d8      	cbnz	r0, 8007f68 <_vfiprintf_r+0x12c>
 8007f30:	06d1      	lsls	r1, r2, #27
 8007f32:	bf44      	itt	mi
 8007f34:	2320      	movmi	r3, #32
 8007f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f3a:	0713      	lsls	r3, r2, #28
 8007f3c:	bf44      	itt	mi
 8007f3e:	232b      	movmi	r3, #43	; 0x2b
 8007f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f44:	f89a 3000 	ldrb.w	r3, [sl]
 8007f48:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4a:	d015      	beq.n	8007f78 <_vfiprintf_r+0x13c>
 8007f4c:	4654      	mov	r4, sl
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f04f 0c0a 	mov.w	ip, #10
 8007f54:	9a07      	ldr	r2, [sp, #28]
 8007f56:	4621      	mov	r1, r4
 8007f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f5c:	3b30      	subs	r3, #48	; 0x30
 8007f5e:	2b09      	cmp	r3, #9
 8007f60:	d94e      	bls.n	8008000 <_vfiprintf_r+0x1c4>
 8007f62:	b1b0      	cbz	r0, 8007f92 <_vfiprintf_r+0x156>
 8007f64:	9207      	str	r2, [sp, #28]
 8007f66:	e014      	b.n	8007f92 <_vfiprintf_r+0x156>
 8007f68:	eba0 0308 	sub.w	r3, r0, r8
 8007f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f70:	4313      	orrs	r3, r2
 8007f72:	46a2      	mov	sl, r4
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	e7d2      	b.n	8007f1e <_vfiprintf_r+0xe2>
 8007f78:	9b03      	ldr	r3, [sp, #12]
 8007f7a:	1d19      	adds	r1, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	9103      	str	r1, [sp, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	bfbb      	ittet	lt
 8007f84:	425b      	neglt	r3, r3
 8007f86:	f042 0202 	orrlt.w	r2, r2, #2
 8007f8a:	9307      	strge	r3, [sp, #28]
 8007f8c:	9307      	strlt	r3, [sp, #28]
 8007f8e:	bfb8      	it	lt
 8007f90:	9204      	strlt	r2, [sp, #16]
 8007f92:	7823      	ldrb	r3, [r4, #0]
 8007f94:	2b2e      	cmp	r3, #46	; 0x2e
 8007f96:	d10c      	bne.n	8007fb2 <_vfiprintf_r+0x176>
 8007f98:	7863      	ldrb	r3, [r4, #1]
 8007f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f9c:	d135      	bne.n	800800a <_vfiprintf_r+0x1ce>
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	3402      	adds	r4, #2
 8007fa2:	1d1a      	adds	r2, r3, #4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	9203      	str	r2, [sp, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bfb8      	it	lt
 8007fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fb0:	9305      	str	r3, [sp, #20]
 8007fb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008098 <_vfiprintf_r+0x25c>
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	4650      	mov	r0, sl
 8007fba:	7821      	ldrb	r1, [r4, #0]
 8007fbc:	f7ff f8ca 	bl	8007154 <memchr>
 8007fc0:	b140      	cbz	r0, 8007fd4 <_vfiprintf_r+0x198>
 8007fc2:	2340      	movs	r3, #64	; 0x40
 8007fc4:	eba0 000a 	sub.w	r0, r0, sl
 8007fc8:	fa03 f000 	lsl.w	r0, r3, r0
 8007fcc:	9b04      	ldr	r3, [sp, #16]
 8007fce:	3401      	adds	r4, #1
 8007fd0:	4303      	orrs	r3, r0
 8007fd2:	9304      	str	r3, [sp, #16]
 8007fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd8:	2206      	movs	r2, #6
 8007fda:	482c      	ldr	r0, [pc, #176]	; (800808c <_vfiprintf_r+0x250>)
 8007fdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fe0:	f7ff f8b8 	bl	8007154 <memchr>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d03f      	beq.n	8008068 <_vfiprintf_r+0x22c>
 8007fe8:	4b29      	ldr	r3, [pc, #164]	; (8008090 <_vfiprintf_r+0x254>)
 8007fea:	bb1b      	cbnz	r3, 8008034 <_vfiprintf_r+0x1f8>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	3307      	adds	r3, #7
 8007ff0:	f023 0307 	bic.w	r3, r3, #7
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	9303      	str	r3, [sp, #12]
 8007ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffa:	443b      	add	r3, r7
 8007ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ffe:	e767      	b.n	8007ed0 <_vfiprintf_r+0x94>
 8008000:	460c      	mov	r4, r1
 8008002:	2001      	movs	r0, #1
 8008004:	fb0c 3202 	mla	r2, ip, r2, r3
 8008008:	e7a5      	b.n	8007f56 <_vfiprintf_r+0x11a>
 800800a:	2300      	movs	r3, #0
 800800c:	f04f 0c0a 	mov.w	ip, #10
 8008010:	4619      	mov	r1, r3
 8008012:	3401      	adds	r4, #1
 8008014:	9305      	str	r3, [sp, #20]
 8008016:	4620      	mov	r0, r4
 8008018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800801c:	3a30      	subs	r2, #48	; 0x30
 800801e:	2a09      	cmp	r2, #9
 8008020:	d903      	bls.n	800802a <_vfiprintf_r+0x1ee>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0c5      	beq.n	8007fb2 <_vfiprintf_r+0x176>
 8008026:	9105      	str	r1, [sp, #20]
 8008028:	e7c3      	b.n	8007fb2 <_vfiprintf_r+0x176>
 800802a:	4604      	mov	r4, r0
 800802c:	2301      	movs	r3, #1
 800802e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008032:	e7f0      	b.n	8008016 <_vfiprintf_r+0x1da>
 8008034:	ab03      	add	r3, sp, #12
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	462a      	mov	r2, r5
 800803a:	4630      	mov	r0, r6
 800803c:	4b15      	ldr	r3, [pc, #84]	; (8008094 <_vfiprintf_r+0x258>)
 800803e:	a904      	add	r1, sp, #16
 8008040:	f7fd fde2 	bl	8005c08 <_printf_float>
 8008044:	4607      	mov	r7, r0
 8008046:	1c78      	adds	r0, r7, #1
 8008048:	d1d6      	bne.n	8007ff8 <_vfiprintf_r+0x1bc>
 800804a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800804c:	07d9      	lsls	r1, r3, #31
 800804e:	d405      	bmi.n	800805c <_vfiprintf_r+0x220>
 8008050:	89ab      	ldrh	r3, [r5, #12]
 8008052:	059a      	lsls	r2, r3, #22
 8008054:	d402      	bmi.n	800805c <_vfiprintf_r+0x220>
 8008056:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008058:	f000 faaf 	bl	80085ba <__retarget_lock_release_recursive>
 800805c:	89ab      	ldrh	r3, [r5, #12]
 800805e:	065b      	lsls	r3, r3, #25
 8008060:	f53f af12 	bmi.w	8007e88 <_vfiprintf_r+0x4c>
 8008064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008066:	e711      	b.n	8007e8c <_vfiprintf_r+0x50>
 8008068:	ab03      	add	r3, sp, #12
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	462a      	mov	r2, r5
 800806e:	4630      	mov	r0, r6
 8008070:	4b08      	ldr	r3, [pc, #32]	; (8008094 <_vfiprintf_r+0x258>)
 8008072:	a904      	add	r1, sp, #16
 8008074:	f7fe f864 	bl	8006140 <_printf_i>
 8008078:	e7e4      	b.n	8008044 <_vfiprintf_r+0x208>
 800807a:	bf00      	nop
 800807c:	0800b814 	.word	0x0800b814
 8008080:	0800b834 	.word	0x0800b834
 8008084:	0800b7f4 	.word	0x0800b7f4
 8008088:	0800b69c 	.word	0x0800b69c
 800808c:	0800b6a6 	.word	0x0800b6a6
 8008090:	08005c09 	.word	0x08005c09
 8008094:	08007e17 	.word	0x08007e17
 8008098:	0800b6a2 	.word	0x0800b6a2

0800809c <__swbuf_r>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	460e      	mov	r6, r1
 80080a0:	4614      	mov	r4, r2
 80080a2:	4605      	mov	r5, r0
 80080a4:	b118      	cbz	r0, 80080ae <__swbuf_r+0x12>
 80080a6:	6983      	ldr	r3, [r0, #24]
 80080a8:	b90b      	cbnz	r3, 80080ae <__swbuf_r+0x12>
 80080aa:	f000 f9e7 	bl	800847c <__sinit>
 80080ae:	4b21      	ldr	r3, [pc, #132]	; (8008134 <__swbuf_r+0x98>)
 80080b0:	429c      	cmp	r4, r3
 80080b2:	d12b      	bne.n	800810c <__swbuf_r+0x70>
 80080b4:	686c      	ldr	r4, [r5, #4]
 80080b6:	69a3      	ldr	r3, [r4, #24]
 80080b8:	60a3      	str	r3, [r4, #8]
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	071a      	lsls	r2, r3, #28
 80080be:	d52f      	bpl.n	8008120 <__swbuf_r+0x84>
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	b36b      	cbz	r3, 8008120 <__swbuf_r+0x84>
 80080c4:	6923      	ldr	r3, [r4, #16]
 80080c6:	6820      	ldr	r0, [r4, #0]
 80080c8:	b2f6      	uxtb	r6, r6
 80080ca:	1ac0      	subs	r0, r0, r3
 80080cc:	6963      	ldr	r3, [r4, #20]
 80080ce:	4637      	mov	r7, r6
 80080d0:	4283      	cmp	r3, r0
 80080d2:	dc04      	bgt.n	80080de <__swbuf_r+0x42>
 80080d4:	4621      	mov	r1, r4
 80080d6:	4628      	mov	r0, r5
 80080d8:	f000 f93c 	bl	8008354 <_fflush_r>
 80080dc:	bb30      	cbnz	r0, 800812c <__swbuf_r+0x90>
 80080de:	68a3      	ldr	r3, [r4, #8]
 80080e0:	3001      	adds	r0, #1
 80080e2:	3b01      	subs	r3, #1
 80080e4:	60a3      	str	r3, [r4, #8]
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	6022      	str	r2, [r4, #0]
 80080ec:	701e      	strb	r6, [r3, #0]
 80080ee:	6963      	ldr	r3, [r4, #20]
 80080f0:	4283      	cmp	r3, r0
 80080f2:	d004      	beq.n	80080fe <__swbuf_r+0x62>
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	07db      	lsls	r3, r3, #31
 80080f8:	d506      	bpl.n	8008108 <__swbuf_r+0x6c>
 80080fa:	2e0a      	cmp	r6, #10
 80080fc:	d104      	bne.n	8008108 <__swbuf_r+0x6c>
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f000 f927 	bl	8008354 <_fflush_r>
 8008106:	b988      	cbnz	r0, 800812c <__swbuf_r+0x90>
 8008108:	4638      	mov	r0, r7
 800810a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <__swbuf_r+0x9c>)
 800810e:	429c      	cmp	r4, r3
 8008110:	d101      	bne.n	8008116 <__swbuf_r+0x7a>
 8008112:	68ac      	ldr	r4, [r5, #8]
 8008114:	e7cf      	b.n	80080b6 <__swbuf_r+0x1a>
 8008116:	4b09      	ldr	r3, [pc, #36]	; (800813c <__swbuf_r+0xa0>)
 8008118:	429c      	cmp	r4, r3
 800811a:	bf08      	it	eq
 800811c:	68ec      	ldreq	r4, [r5, #12]
 800811e:	e7ca      	b.n	80080b6 <__swbuf_r+0x1a>
 8008120:	4621      	mov	r1, r4
 8008122:	4628      	mov	r0, r5
 8008124:	f000 f81a 	bl	800815c <__swsetup_r>
 8008128:	2800      	cmp	r0, #0
 800812a:	d0cb      	beq.n	80080c4 <__swbuf_r+0x28>
 800812c:	f04f 37ff 	mov.w	r7, #4294967295
 8008130:	e7ea      	b.n	8008108 <__swbuf_r+0x6c>
 8008132:	bf00      	nop
 8008134:	0800b814 	.word	0x0800b814
 8008138:	0800b834 	.word	0x0800b834
 800813c:	0800b7f4 	.word	0x0800b7f4

08008140 <__ascii_wctomb>:
 8008140:	4603      	mov	r3, r0
 8008142:	4608      	mov	r0, r1
 8008144:	b141      	cbz	r1, 8008158 <__ascii_wctomb+0x18>
 8008146:	2aff      	cmp	r2, #255	; 0xff
 8008148:	d904      	bls.n	8008154 <__ascii_wctomb+0x14>
 800814a:	228a      	movs	r2, #138	; 0x8a
 800814c:	f04f 30ff 	mov.w	r0, #4294967295
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	4770      	bx	lr
 8008154:	2001      	movs	r0, #1
 8008156:	700a      	strb	r2, [r1, #0]
 8008158:	4770      	bx	lr
	...

0800815c <__swsetup_r>:
 800815c:	4b32      	ldr	r3, [pc, #200]	; (8008228 <__swsetup_r+0xcc>)
 800815e:	b570      	push	{r4, r5, r6, lr}
 8008160:	681d      	ldr	r5, [r3, #0]
 8008162:	4606      	mov	r6, r0
 8008164:	460c      	mov	r4, r1
 8008166:	b125      	cbz	r5, 8008172 <__swsetup_r+0x16>
 8008168:	69ab      	ldr	r3, [r5, #24]
 800816a:	b913      	cbnz	r3, 8008172 <__swsetup_r+0x16>
 800816c:	4628      	mov	r0, r5
 800816e:	f000 f985 	bl	800847c <__sinit>
 8008172:	4b2e      	ldr	r3, [pc, #184]	; (800822c <__swsetup_r+0xd0>)
 8008174:	429c      	cmp	r4, r3
 8008176:	d10f      	bne.n	8008198 <__swsetup_r+0x3c>
 8008178:	686c      	ldr	r4, [r5, #4]
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008180:	0719      	lsls	r1, r3, #28
 8008182:	d42c      	bmi.n	80081de <__swsetup_r+0x82>
 8008184:	06dd      	lsls	r5, r3, #27
 8008186:	d411      	bmi.n	80081ac <__swsetup_r+0x50>
 8008188:	2309      	movs	r3, #9
 800818a:	6033      	str	r3, [r6, #0]
 800818c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	e03e      	b.n	8008216 <__swsetup_r+0xba>
 8008198:	4b25      	ldr	r3, [pc, #148]	; (8008230 <__swsetup_r+0xd4>)
 800819a:	429c      	cmp	r4, r3
 800819c:	d101      	bne.n	80081a2 <__swsetup_r+0x46>
 800819e:	68ac      	ldr	r4, [r5, #8]
 80081a0:	e7eb      	b.n	800817a <__swsetup_r+0x1e>
 80081a2:	4b24      	ldr	r3, [pc, #144]	; (8008234 <__swsetup_r+0xd8>)
 80081a4:	429c      	cmp	r4, r3
 80081a6:	bf08      	it	eq
 80081a8:	68ec      	ldreq	r4, [r5, #12]
 80081aa:	e7e6      	b.n	800817a <__swsetup_r+0x1e>
 80081ac:	0758      	lsls	r0, r3, #29
 80081ae:	d512      	bpl.n	80081d6 <__swsetup_r+0x7a>
 80081b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081b2:	b141      	cbz	r1, 80081c6 <__swsetup_r+0x6a>
 80081b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b8:	4299      	cmp	r1, r3
 80081ba:	d002      	beq.n	80081c2 <__swsetup_r+0x66>
 80081bc:	4630      	mov	r0, r6
 80081be:	f7ff fb75 	bl	80078ac <_free_r>
 80081c2:	2300      	movs	r3, #0
 80081c4:	6363      	str	r3, [r4, #52]	; 0x34
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081cc:	81a3      	strh	r3, [r4, #12]
 80081ce:	2300      	movs	r3, #0
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	f043 0308 	orr.w	r3, r3, #8
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	b94b      	cbnz	r3, 80081f6 <__swsetup_r+0x9a>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ec:	d003      	beq.n	80081f6 <__swsetup_r+0x9a>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4630      	mov	r0, r6
 80081f2:	f000 fa07 	bl	8008604 <__smakebuf_r>
 80081f6:	89a0      	ldrh	r0, [r4, #12]
 80081f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081fc:	f010 0301 	ands.w	r3, r0, #1
 8008200:	d00a      	beq.n	8008218 <__swsetup_r+0xbc>
 8008202:	2300      	movs	r3, #0
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	6963      	ldr	r3, [r4, #20]
 8008208:	425b      	negs	r3, r3
 800820a:	61a3      	str	r3, [r4, #24]
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	b943      	cbnz	r3, 8008222 <__swsetup_r+0xc6>
 8008210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008214:	d1ba      	bne.n	800818c <__swsetup_r+0x30>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	0781      	lsls	r1, r0, #30
 800821a:	bf58      	it	pl
 800821c:	6963      	ldrpl	r3, [r4, #20]
 800821e:	60a3      	str	r3, [r4, #8]
 8008220:	e7f4      	b.n	800820c <__swsetup_r+0xb0>
 8008222:	2000      	movs	r0, #0
 8008224:	e7f7      	b.n	8008216 <__swsetup_r+0xba>
 8008226:	bf00      	nop
 8008228:	20000030 	.word	0x20000030
 800822c:	0800b814 	.word	0x0800b814
 8008230:	0800b834 	.word	0x0800b834
 8008234:	0800b7f4 	.word	0x0800b7f4

08008238 <abort>:
 8008238:	2006      	movs	r0, #6
 800823a:	b508      	push	{r3, lr}
 800823c:	f000 fa52 	bl	80086e4 <raise>
 8008240:	2001      	movs	r0, #1
 8008242:	f7fb fb2a 	bl	800389a <_exit>
	...

08008248 <__sflush_r>:
 8008248:	898a      	ldrh	r2, [r1, #12]
 800824a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824e:	4605      	mov	r5, r0
 8008250:	0710      	lsls	r0, r2, #28
 8008252:	460c      	mov	r4, r1
 8008254:	d458      	bmi.n	8008308 <__sflush_r+0xc0>
 8008256:	684b      	ldr	r3, [r1, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	dc05      	bgt.n	8008268 <__sflush_r+0x20>
 800825c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	dc02      	bgt.n	8008268 <__sflush_r+0x20>
 8008262:	2000      	movs	r0, #0
 8008264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800826a:	2e00      	cmp	r6, #0
 800826c:	d0f9      	beq.n	8008262 <__sflush_r+0x1a>
 800826e:	2300      	movs	r3, #0
 8008270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008274:	682f      	ldr	r7, [r5, #0]
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	d032      	beq.n	80082e0 <__sflush_r+0x98>
 800827a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	075a      	lsls	r2, r3, #29
 8008280:	d505      	bpl.n	800828e <__sflush_r+0x46>
 8008282:	6863      	ldr	r3, [r4, #4]
 8008284:	1ac0      	subs	r0, r0, r3
 8008286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008288:	b10b      	cbz	r3, 800828e <__sflush_r+0x46>
 800828a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800828c:	1ac0      	subs	r0, r0, r3
 800828e:	2300      	movs	r3, #0
 8008290:	4602      	mov	r2, r0
 8008292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008294:	4628      	mov	r0, r5
 8008296:	6a21      	ldr	r1, [r4, #32]
 8008298:	47b0      	blx	r6
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	d106      	bne.n	80082ae <__sflush_r+0x66>
 80082a0:	6829      	ldr	r1, [r5, #0]
 80082a2:	291d      	cmp	r1, #29
 80082a4:	d82c      	bhi.n	8008300 <__sflush_r+0xb8>
 80082a6:	4a2a      	ldr	r2, [pc, #168]	; (8008350 <__sflush_r+0x108>)
 80082a8:	40ca      	lsrs	r2, r1
 80082aa:	07d6      	lsls	r6, r2, #31
 80082ac:	d528      	bpl.n	8008300 <__sflush_r+0xb8>
 80082ae:	2200      	movs	r2, #0
 80082b0:	6062      	str	r2, [r4, #4]
 80082b2:	6922      	ldr	r2, [r4, #16]
 80082b4:	04d9      	lsls	r1, r3, #19
 80082b6:	6022      	str	r2, [r4, #0]
 80082b8:	d504      	bpl.n	80082c4 <__sflush_r+0x7c>
 80082ba:	1c42      	adds	r2, r0, #1
 80082bc:	d101      	bne.n	80082c2 <__sflush_r+0x7a>
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	b903      	cbnz	r3, 80082c4 <__sflush_r+0x7c>
 80082c2:	6560      	str	r0, [r4, #84]	; 0x54
 80082c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082c6:	602f      	str	r7, [r5, #0]
 80082c8:	2900      	cmp	r1, #0
 80082ca:	d0ca      	beq.n	8008262 <__sflush_r+0x1a>
 80082cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082d0:	4299      	cmp	r1, r3
 80082d2:	d002      	beq.n	80082da <__sflush_r+0x92>
 80082d4:	4628      	mov	r0, r5
 80082d6:	f7ff fae9 	bl	80078ac <_free_r>
 80082da:	2000      	movs	r0, #0
 80082dc:	6360      	str	r0, [r4, #52]	; 0x34
 80082de:	e7c1      	b.n	8008264 <__sflush_r+0x1c>
 80082e0:	6a21      	ldr	r1, [r4, #32]
 80082e2:	2301      	movs	r3, #1
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b0      	blx	r6
 80082e8:	1c41      	adds	r1, r0, #1
 80082ea:	d1c7      	bne.n	800827c <__sflush_r+0x34>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0c4      	beq.n	800827c <__sflush_r+0x34>
 80082f2:	2b1d      	cmp	r3, #29
 80082f4:	d001      	beq.n	80082fa <__sflush_r+0xb2>
 80082f6:	2b16      	cmp	r3, #22
 80082f8:	d101      	bne.n	80082fe <__sflush_r+0xb6>
 80082fa:	602f      	str	r7, [r5, #0]
 80082fc:	e7b1      	b.n	8008262 <__sflush_r+0x1a>
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008304:	81a3      	strh	r3, [r4, #12]
 8008306:	e7ad      	b.n	8008264 <__sflush_r+0x1c>
 8008308:	690f      	ldr	r7, [r1, #16]
 800830a:	2f00      	cmp	r7, #0
 800830c:	d0a9      	beq.n	8008262 <__sflush_r+0x1a>
 800830e:	0793      	lsls	r3, r2, #30
 8008310:	bf18      	it	ne
 8008312:	2300      	movne	r3, #0
 8008314:	680e      	ldr	r6, [r1, #0]
 8008316:	bf08      	it	eq
 8008318:	694b      	ldreq	r3, [r1, #20]
 800831a:	eba6 0807 	sub.w	r8, r6, r7
 800831e:	600f      	str	r7, [r1, #0]
 8008320:	608b      	str	r3, [r1, #8]
 8008322:	f1b8 0f00 	cmp.w	r8, #0
 8008326:	dd9c      	ble.n	8008262 <__sflush_r+0x1a>
 8008328:	4643      	mov	r3, r8
 800832a:	463a      	mov	r2, r7
 800832c:	4628      	mov	r0, r5
 800832e:	6a21      	ldr	r1, [r4, #32]
 8008330:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008332:	47b0      	blx	r6
 8008334:	2800      	cmp	r0, #0
 8008336:	dc06      	bgt.n	8008346 <__sflush_r+0xfe>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f04f 30ff 	mov.w	r0, #4294967295
 800833e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	e78e      	b.n	8008264 <__sflush_r+0x1c>
 8008346:	4407      	add	r7, r0
 8008348:	eba8 0800 	sub.w	r8, r8, r0
 800834c:	e7e9      	b.n	8008322 <__sflush_r+0xda>
 800834e:	bf00      	nop
 8008350:	20400001 	.word	0x20400001

08008354 <_fflush_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	690b      	ldr	r3, [r1, #16]
 8008358:	4605      	mov	r5, r0
 800835a:	460c      	mov	r4, r1
 800835c:	b913      	cbnz	r3, 8008364 <_fflush_r+0x10>
 800835e:	2500      	movs	r5, #0
 8008360:	4628      	mov	r0, r5
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	b118      	cbz	r0, 800836e <_fflush_r+0x1a>
 8008366:	6983      	ldr	r3, [r0, #24]
 8008368:	b90b      	cbnz	r3, 800836e <_fflush_r+0x1a>
 800836a:	f000 f887 	bl	800847c <__sinit>
 800836e:	4b14      	ldr	r3, [pc, #80]	; (80083c0 <_fflush_r+0x6c>)
 8008370:	429c      	cmp	r4, r3
 8008372:	d11b      	bne.n	80083ac <_fflush_r+0x58>
 8008374:	686c      	ldr	r4, [r5, #4]
 8008376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0ef      	beq.n	800835e <_fflush_r+0xa>
 800837e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008380:	07d0      	lsls	r0, r2, #31
 8008382:	d404      	bmi.n	800838e <_fflush_r+0x3a>
 8008384:	0599      	lsls	r1, r3, #22
 8008386:	d402      	bmi.n	800838e <_fflush_r+0x3a>
 8008388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800838a:	f000 f915 	bl	80085b8 <__retarget_lock_acquire_recursive>
 800838e:	4628      	mov	r0, r5
 8008390:	4621      	mov	r1, r4
 8008392:	f7ff ff59 	bl	8008248 <__sflush_r>
 8008396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008398:	4605      	mov	r5, r0
 800839a:	07da      	lsls	r2, r3, #31
 800839c:	d4e0      	bmi.n	8008360 <_fflush_r+0xc>
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	059b      	lsls	r3, r3, #22
 80083a2:	d4dd      	bmi.n	8008360 <_fflush_r+0xc>
 80083a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083a6:	f000 f908 	bl	80085ba <__retarget_lock_release_recursive>
 80083aa:	e7d9      	b.n	8008360 <_fflush_r+0xc>
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <_fflush_r+0x70>)
 80083ae:	429c      	cmp	r4, r3
 80083b0:	d101      	bne.n	80083b6 <_fflush_r+0x62>
 80083b2:	68ac      	ldr	r4, [r5, #8]
 80083b4:	e7df      	b.n	8008376 <_fflush_r+0x22>
 80083b6:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <_fflush_r+0x74>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	bf08      	it	eq
 80083bc:	68ec      	ldreq	r4, [r5, #12]
 80083be:	e7da      	b.n	8008376 <_fflush_r+0x22>
 80083c0:	0800b814 	.word	0x0800b814
 80083c4:	0800b834 	.word	0x0800b834
 80083c8:	0800b7f4 	.word	0x0800b7f4

080083cc <std>:
 80083cc:	2300      	movs	r3, #0
 80083ce:	b510      	push	{r4, lr}
 80083d0:	4604      	mov	r4, r0
 80083d2:	e9c0 3300 	strd	r3, r3, [r0]
 80083d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083da:	6083      	str	r3, [r0, #8]
 80083dc:	8181      	strh	r1, [r0, #12]
 80083de:	6643      	str	r3, [r0, #100]	; 0x64
 80083e0:	81c2      	strh	r2, [r0, #14]
 80083e2:	6183      	str	r3, [r0, #24]
 80083e4:	4619      	mov	r1, r3
 80083e6:	2208      	movs	r2, #8
 80083e8:	305c      	adds	r0, #92	; 0x5c
 80083ea:	f7fd fb67 	bl	8005abc <memset>
 80083ee:	4b05      	ldr	r3, [pc, #20]	; (8008404 <std+0x38>)
 80083f0:	6224      	str	r4, [r4, #32]
 80083f2:	6263      	str	r3, [r4, #36]	; 0x24
 80083f4:	4b04      	ldr	r3, [pc, #16]	; (8008408 <std+0x3c>)
 80083f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80083f8:	4b04      	ldr	r3, [pc, #16]	; (800840c <std+0x40>)
 80083fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083fc:	4b04      	ldr	r3, [pc, #16]	; (8008410 <std+0x44>)
 80083fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008400:	bd10      	pop	{r4, pc}
 8008402:	bf00      	nop
 8008404:	0800871d 	.word	0x0800871d
 8008408:	0800873f 	.word	0x0800873f
 800840c:	08008777 	.word	0x08008777
 8008410:	0800879b 	.word	0x0800879b

08008414 <_cleanup_r>:
 8008414:	4901      	ldr	r1, [pc, #4]	; (800841c <_cleanup_r+0x8>)
 8008416:	f000 b8af 	b.w	8008578 <_fwalk_reent>
 800841a:	bf00      	nop
 800841c:	08008355 	.word	0x08008355

08008420 <__sfmoreglue>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	2568      	movs	r5, #104	; 0x68
 8008424:	1e4a      	subs	r2, r1, #1
 8008426:	4355      	muls	r5, r2
 8008428:	460e      	mov	r6, r1
 800842a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800842e:	f7ff fa89 	bl	8007944 <_malloc_r>
 8008432:	4604      	mov	r4, r0
 8008434:	b140      	cbz	r0, 8008448 <__sfmoreglue+0x28>
 8008436:	2100      	movs	r1, #0
 8008438:	e9c0 1600 	strd	r1, r6, [r0]
 800843c:	300c      	adds	r0, #12
 800843e:	60a0      	str	r0, [r4, #8]
 8008440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008444:	f7fd fb3a 	bl	8005abc <memset>
 8008448:	4620      	mov	r0, r4
 800844a:	bd70      	pop	{r4, r5, r6, pc}

0800844c <__sfp_lock_acquire>:
 800844c:	4801      	ldr	r0, [pc, #4]	; (8008454 <__sfp_lock_acquire+0x8>)
 800844e:	f000 b8b3 	b.w	80085b8 <__retarget_lock_acquire_recursive>
 8008452:	bf00      	nop
 8008454:	200005a4 	.word	0x200005a4

08008458 <__sfp_lock_release>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__sfp_lock_release+0x8>)
 800845a:	f000 b8ae 	b.w	80085ba <__retarget_lock_release_recursive>
 800845e:	bf00      	nop
 8008460:	200005a4 	.word	0x200005a4

08008464 <__sinit_lock_acquire>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__sinit_lock_acquire+0x8>)
 8008466:	f000 b8a7 	b.w	80085b8 <__retarget_lock_acquire_recursive>
 800846a:	bf00      	nop
 800846c:	2000059f 	.word	0x2000059f

08008470 <__sinit_lock_release>:
 8008470:	4801      	ldr	r0, [pc, #4]	; (8008478 <__sinit_lock_release+0x8>)
 8008472:	f000 b8a2 	b.w	80085ba <__retarget_lock_release_recursive>
 8008476:	bf00      	nop
 8008478:	2000059f 	.word	0x2000059f

0800847c <__sinit>:
 800847c:	b510      	push	{r4, lr}
 800847e:	4604      	mov	r4, r0
 8008480:	f7ff fff0 	bl	8008464 <__sinit_lock_acquire>
 8008484:	69a3      	ldr	r3, [r4, #24]
 8008486:	b11b      	cbz	r3, 8008490 <__sinit+0x14>
 8008488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800848c:	f7ff bff0 	b.w	8008470 <__sinit_lock_release>
 8008490:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008494:	6523      	str	r3, [r4, #80]	; 0x50
 8008496:	4b13      	ldr	r3, [pc, #76]	; (80084e4 <__sinit+0x68>)
 8008498:	4a13      	ldr	r2, [pc, #76]	; (80084e8 <__sinit+0x6c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	62a2      	str	r2, [r4, #40]	; 0x28
 800849e:	42a3      	cmp	r3, r4
 80084a0:	bf08      	it	eq
 80084a2:	2301      	moveq	r3, #1
 80084a4:	4620      	mov	r0, r4
 80084a6:	bf08      	it	eq
 80084a8:	61a3      	streq	r3, [r4, #24]
 80084aa:	f000 f81f 	bl	80084ec <__sfp>
 80084ae:	6060      	str	r0, [r4, #4]
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 f81b 	bl	80084ec <__sfp>
 80084b6:	60a0      	str	r0, [r4, #8]
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 f817 	bl	80084ec <__sfp>
 80084be:	2200      	movs	r2, #0
 80084c0:	2104      	movs	r1, #4
 80084c2:	60e0      	str	r0, [r4, #12]
 80084c4:	6860      	ldr	r0, [r4, #4]
 80084c6:	f7ff ff81 	bl	80083cc <std>
 80084ca:	2201      	movs	r2, #1
 80084cc:	2109      	movs	r1, #9
 80084ce:	68a0      	ldr	r0, [r4, #8]
 80084d0:	f7ff ff7c 	bl	80083cc <std>
 80084d4:	2202      	movs	r2, #2
 80084d6:	2112      	movs	r1, #18
 80084d8:	68e0      	ldr	r0, [r4, #12]
 80084da:	f7ff ff77 	bl	80083cc <std>
 80084de:	2301      	movs	r3, #1
 80084e0:	61a3      	str	r3, [r4, #24]
 80084e2:	e7d1      	b.n	8008488 <__sinit+0xc>
 80084e4:	0800b470 	.word	0x0800b470
 80084e8:	08008415 	.word	0x08008415

080084ec <__sfp>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	4607      	mov	r7, r0
 80084f0:	f7ff ffac 	bl	800844c <__sfp_lock_acquire>
 80084f4:	4b1e      	ldr	r3, [pc, #120]	; (8008570 <__sfp+0x84>)
 80084f6:	681e      	ldr	r6, [r3, #0]
 80084f8:	69b3      	ldr	r3, [r6, #24]
 80084fa:	b913      	cbnz	r3, 8008502 <__sfp+0x16>
 80084fc:	4630      	mov	r0, r6
 80084fe:	f7ff ffbd 	bl	800847c <__sinit>
 8008502:	3648      	adds	r6, #72	; 0x48
 8008504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008508:	3b01      	subs	r3, #1
 800850a:	d503      	bpl.n	8008514 <__sfp+0x28>
 800850c:	6833      	ldr	r3, [r6, #0]
 800850e:	b30b      	cbz	r3, 8008554 <__sfp+0x68>
 8008510:	6836      	ldr	r6, [r6, #0]
 8008512:	e7f7      	b.n	8008504 <__sfp+0x18>
 8008514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008518:	b9d5      	cbnz	r5, 8008550 <__sfp+0x64>
 800851a:	4b16      	ldr	r3, [pc, #88]	; (8008574 <__sfp+0x88>)
 800851c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008520:	60e3      	str	r3, [r4, #12]
 8008522:	6665      	str	r5, [r4, #100]	; 0x64
 8008524:	f000 f847 	bl	80085b6 <__retarget_lock_init_recursive>
 8008528:	f7ff ff96 	bl	8008458 <__sfp_lock_release>
 800852c:	2208      	movs	r2, #8
 800852e:	4629      	mov	r1, r5
 8008530:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008534:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008538:	6025      	str	r5, [r4, #0]
 800853a:	61a5      	str	r5, [r4, #24]
 800853c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008540:	f7fd fabc 	bl	8005abc <memset>
 8008544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800854c:	4620      	mov	r0, r4
 800854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008550:	3468      	adds	r4, #104	; 0x68
 8008552:	e7d9      	b.n	8008508 <__sfp+0x1c>
 8008554:	2104      	movs	r1, #4
 8008556:	4638      	mov	r0, r7
 8008558:	f7ff ff62 	bl	8008420 <__sfmoreglue>
 800855c:	4604      	mov	r4, r0
 800855e:	6030      	str	r0, [r6, #0]
 8008560:	2800      	cmp	r0, #0
 8008562:	d1d5      	bne.n	8008510 <__sfp+0x24>
 8008564:	f7ff ff78 	bl	8008458 <__sfp_lock_release>
 8008568:	230c      	movs	r3, #12
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	e7ee      	b.n	800854c <__sfp+0x60>
 800856e:	bf00      	nop
 8008570:	0800b470 	.word	0x0800b470
 8008574:	ffff0001 	.word	0xffff0001

08008578 <_fwalk_reent>:
 8008578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800857c:	4606      	mov	r6, r0
 800857e:	4688      	mov	r8, r1
 8008580:	2700      	movs	r7, #0
 8008582:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800858a:	f1b9 0901 	subs.w	r9, r9, #1
 800858e:	d505      	bpl.n	800859c <_fwalk_reent+0x24>
 8008590:	6824      	ldr	r4, [r4, #0]
 8008592:	2c00      	cmp	r4, #0
 8008594:	d1f7      	bne.n	8008586 <_fwalk_reent+0xe>
 8008596:	4638      	mov	r0, r7
 8008598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800859c:	89ab      	ldrh	r3, [r5, #12]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d907      	bls.n	80085b2 <_fwalk_reent+0x3a>
 80085a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085a6:	3301      	adds	r3, #1
 80085a8:	d003      	beq.n	80085b2 <_fwalk_reent+0x3a>
 80085aa:	4629      	mov	r1, r5
 80085ac:	4630      	mov	r0, r6
 80085ae:	47c0      	blx	r8
 80085b0:	4307      	orrs	r7, r0
 80085b2:	3568      	adds	r5, #104	; 0x68
 80085b4:	e7e9      	b.n	800858a <_fwalk_reent+0x12>

080085b6 <__retarget_lock_init_recursive>:
 80085b6:	4770      	bx	lr

080085b8 <__retarget_lock_acquire_recursive>:
 80085b8:	4770      	bx	lr

080085ba <__retarget_lock_release_recursive>:
 80085ba:	4770      	bx	lr

080085bc <__swhatbuf_r>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	460e      	mov	r6, r1
 80085c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c4:	4614      	mov	r4, r2
 80085c6:	2900      	cmp	r1, #0
 80085c8:	461d      	mov	r5, r3
 80085ca:	b096      	sub	sp, #88	; 0x58
 80085cc:	da07      	bge.n	80085de <__swhatbuf_r+0x22>
 80085ce:	2300      	movs	r3, #0
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	89b3      	ldrh	r3, [r6, #12]
 80085d4:	061a      	lsls	r2, r3, #24
 80085d6:	d410      	bmi.n	80085fa <__swhatbuf_r+0x3e>
 80085d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085dc:	e00e      	b.n	80085fc <__swhatbuf_r+0x40>
 80085de:	466a      	mov	r2, sp
 80085e0:	f000 f902 	bl	80087e8 <_fstat_r>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	dbf2      	blt.n	80085ce <__swhatbuf_r+0x12>
 80085e8:	9a01      	ldr	r2, [sp, #4]
 80085ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085f2:	425a      	negs	r2, r3
 80085f4:	415a      	adcs	r2, r3
 80085f6:	602a      	str	r2, [r5, #0]
 80085f8:	e7ee      	b.n	80085d8 <__swhatbuf_r+0x1c>
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	2000      	movs	r0, #0
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	b016      	add	sp, #88	; 0x58
 8008602:	bd70      	pop	{r4, r5, r6, pc}

08008604 <__smakebuf_r>:
 8008604:	898b      	ldrh	r3, [r1, #12]
 8008606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008608:	079d      	lsls	r5, r3, #30
 800860a:	4606      	mov	r6, r0
 800860c:	460c      	mov	r4, r1
 800860e:	d507      	bpl.n	8008620 <__smakebuf_r+0x1c>
 8008610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	2301      	movs	r3, #1
 800861a:	6163      	str	r3, [r4, #20]
 800861c:	b002      	add	sp, #8
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	466a      	mov	r2, sp
 8008622:	ab01      	add	r3, sp, #4
 8008624:	f7ff ffca 	bl	80085bc <__swhatbuf_r>
 8008628:	9900      	ldr	r1, [sp, #0]
 800862a:	4605      	mov	r5, r0
 800862c:	4630      	mov	r0, r6
 800862e:	f7ff f989 	bl	8007944 <_malloc_r>
 8008632:	b948      	cbnz	r0, 8008648 <__smakebuf_r+0x44>
 8008634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008638:	059a      	lsls	r2, r3, #22
 800863a:	d4ef      	bmi.n	800861c <__smakebuf_r+0x18>
 800863c:	f023 0303 	bic.w	r3, r3, #3
 8008640:	f043 0302 	orr.w	r3, r3, #2
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	e7e3      	b.n	8008610 <__smakebuf_r+0xc>
 8008648:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <__smakebuf_r+0x7c>)
 800864a:	62b3      	str	r3, [r6, #40]	; 0x28
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	6020      	str	r0, [r4, #0]
 8008650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	9b00      	ldr	r3, [sp, #0]
 8008658:	6120      	str	r0, [r4, #16]
 800865a:	6163      	str	r3, [r4, #20]
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	b15b      	cbz	r3, 8008678 <__smakebuf_r+0x74>
 8008660:	4630      	mov	r0, r6
 8008662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008666:	f000 f8d1 	bl	800880c <_isatty_r>
 800866a:	b128      	cbz	r0, 8008678 <__smakebuf_r+0x74>
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f023 0303 	bic.w	r3, r3, #3
 8008672:	f043 0301 	orr.w	r3, r3, #1
 8008676:	81a3      	strh	r3, [r4, #12]
 8008678:	89a0      	ldrh	r0, [r4, #12]
 800867a:	4305      	orrs	r5, r0
 800867c:	81a5      	strh	r5, [r4, #12]
 800867e:	e7cd      	b.n	800861c <__smakebuf_r+0x18>
 8008680:	08008415 	.word	0x08008415

08008684 <_malloc_usable_size_r>:
 8008684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008688:	1f18      	subs	r0, r3, #4
 800868a:	2b00      	cmp	r3, #0
 800868c:	bfbc      	itt	lt
 800868e:	580b      	ldrlt	r3, [r1, r0]
 8008690:	18c0      	addlt	r0, r0, r3
 8008692:	4770      	bx	lr

08008694 <_raise_r>:
 8008694:	291f      	cmp	r1, #31
 8008696:	b538      	push	{r3, r4, r5, lr}
 8008698:	4604      	mov	r4, r0
 800869a:	460d      	mov	r5, r1
 800869c:	d904      	bls.n	80086a8 <_raise_r+0x14>
 800869e:	2316      	movs	r3, #22
 80086a0:	6003      	str	r3, [r0, #0]
 80086a2:	f04f 30ff 	mov.w	r0, #4294967295
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086aa:	b112      	cbz	r2, 80086b2 <_raise_r+0x1e>
 80086ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086b0:	b94b      	cbnz	r3, 80086c6 <_raise_r+0x32>
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 f830 	bl	8008718 <_getpid_r>
 80086b8:	462a      	mov	r2, r5
 80086ba:	4601      	mov	r1, r0
 80086bc:	4620      	mov	r0, r4
 80086be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086c2:	f000 b817 	b.w	80086f4 <_kill_r>
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d00a      	beq.n	80086e0 <_raise_r+0x4c>
 80086ca:	1c59      	adds	r1, r3, #1
 80086cc:	d103      	bne.n	80086d6 <_raise_r+0x42>
 80086ce:	2316      	movs	r3, #22
 80086d0:	6003      	str	r3, [r0, #0]
 80086d2:	2001      	movs	r0, #1
 80086d4:	e7e7      	b.n	80086a6 <_raise_r+0x12>
 80086d6:	2400      	movs	r4, #0
 80086d8:	4628      	mov	r0, r5
 80086da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086de:	4798      	blx	r3
 80086e0:	2000      	movs	r0, #0
 80086e2:	e7e0      	b.n	80086a6 <_raise_r+0x12>

080086e4 <raise>:
 80086e4:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <raise+0xc>)
 80086e6:	4601      	mov	r1, r0
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	f7ff bfd3 	b.w	8008694 <_raise_r>
 80086ee:	bf00      	nop
 80086f0:	20000030 	.word	0x20000030

080086f4 <_kill_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	2300      	movs	r3, #0
 80086f8:	4d06      	ldr	r5, [pc, #24]	; (8008714 <_kill_r+0x20>)
 80086fa:	4604      	mov	r4, r0
 80086fc:	4608      	mov	r0, r1
 80086fe:	4611      	mov	r1, r2
 8008700:	602b      	str	r3, [r5, #0]
 8008702:	f7fb f8ba 	bl	800387a <_kill>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	d102      	bne.n	8008710 <_kill_r+0x1c>
 800870a:	682b      	ldr	r3, [r5, #0]
 800870c:	b103      	cbz	r3, 8008710 <_kill_r+0x1c>
 800870e:	6023      	str	r3, [r4, #0]
 8008710:	bd38      	pop	{r3, r4, r5, pc}
 8008712:	bf00      	nop
 8008714:	20000598 	.word	0x20000598

08008718 <_getpid_r>:
 8008718:	f7fb b8a8 	b.w	800386c <_getpid>

0800871c <__sread>:
 800871c:	b510      	push	{r4, lr}
 800871e:	460c      	mov	r4, r1
 8008720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008724:	f000 f894 	bl	8008850 <_read_r>
 8008728:	2800      	cmp	r0, #0
 800872a:	bfab      	itete	ge
 800872c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800872e:	89a3      	ldrhlt	r3, [r4, #12]
 8008730:	181b      	addge	r3, r3, r0
 8008732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008736:	bfac      	ite	ge
 8008738:	6563      	strge	r3, [r4, #84]	; 0x54
 800873a:	81a3      	strhlt	r3, [r4, #12]
 800873c:	bd10      	pop	{r4, pc}

0800873e <__swrite>:
 800873e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008742:	461f      	mov	r7, r3
 8008744:	898b      	ldrh	r3, [r1, #12]
 8008746:	4605      	mov	r5, r0
 8008748:	05db      	lsls	r3, r3, #23
 800874a:	460c      	mov	r4, r1
 800874c:	4616      	mov	r6, r2
 800874e:	d505      	bpl.n	800875c <__swrite+0x1e>
 8008750:	2302      	movs	r3, #2
 8008752:	2200      	movs	r2, #0
 8008754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008758:	f000 f868 	bl	800882c <_lseek_r>
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	4632      	mov	r2, r6
 8008760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	4628      	mov	r0, r5
 8008768:	463b      	mov	r3, r7
 800876a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008772:	f000 b817 	b.w	80087a4 <_write_r>

08008776 <__sseek>:
 8008776:	b510      	push	{r4, lr}
 8008778:	460c      	mov	r4, r1
 800877a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877e:	f000 f855 	bl	800882c <_lseek_r>
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	bf15      	itete	ne
 8008788:	6560      	strne	r0, [r4, #84]	; 0x54
 800878a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800878e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008792:	81a3      	strheq	r3, [r4, #12]
 8008794:	bf18      	it	ne
 8008796:	81a3      	strhne	r3, [r4, #12]
 8008798:	bd10      	pop	{r4, pc}

0800879a <__sclose>:
 800879a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879e:	f000 b813 	b.w	80087c8 <_close_r>
	...

080087a4 <_write_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4604      	mov	r4, r0
 80087a8:	4608      	mov	r0, r1
 80087aa:	4611      	mov	r1, r2
 80087ac:	2200      	movs	r2, #0
 80087ae:	4d05      	ldr	r5, [pc, #20]	; (80087c4 <_write_r+0x20>)
 80087b0:	602a      	str	r2, [r5, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f7fb f898 	bl	80038e8 <_write>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_write_r+0x1e>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_write_r+0x1e>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	20000598 	.word	0x20000598

080087c8 <_close_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	2300      	movs	r3, #0
 80087cc:	4d05      	ldr	r5, [pc, #20]	; (80087e4 <_close_r+0x1c>)
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f7fb f8a4 	bl	8003920 <_close>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_close_r+0x1a>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_close_r+0x1a>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20000598 	.word	0x20000598

080087e8 <_fstat_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	2300      	movs	r3, #0
 80087ec:	4d06      	ldr	r5, [pc, #24]	; (8008808 <_fstat_r+0x20>)
 80087ee:	4604      	mov	r4, r0
 80087f0:	4608      	mov	r0, r1
 80087f2:	4611      	mov	r1, r2
 80087f4:	602b      	str	r3, [r5, #0]
 80087f6:	f7fb f89e 	bl	8003936 <_fstat>
 80087fa:	1c43      	adds	r3, r0, #1
 80087fc:	d102      	bne.n	8008804 <_fstat_r+0x1c>
 80087fe:	682b      	ldr	r3, [r5, #0]
 8008800:	b103      	cbz	r3, 8008804 <_fstat_r+0x1c>
 8008802:	6023      	str	r3, [r4, #0]
 8008804:	bd38      	pop	{r3, r4, r5, pc}
 8008806:	bf00      	nop
 8008808:	20000598 	.word	0x20000598

0800880c <_isatty_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	2300      	movs	r3, #0
 8008810:	4d05      	ldr	r5, [pc, #20]	; (8008828 <_isatty_r+0x1c>)
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	602b      	str	r3, [r5, #0]
 8008818:	f7fb f89c 	bl	8003954 <_isatty>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_isatty_r+0x1a>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_isatty_r+0x1a>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	20000598 	.word	0x20000598

0800882c <_lseek_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	4611      	mov	r1, r2
 8008834:	2200      	movs	r2, #0
 8008836:	4d05      	ldr	r5, [pc, #20]	; (800884c <_lseek_r+0x20>)
 8008838:	602a      	str	r2, [r5, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	f7fb f894 	bl	8003968 <_lseek>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_lseek_r+0x1e>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_lseek_r+0x1e>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000598 	.word	0x20000598

08008850 <_read_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4604      	mov	r4, r0
 8008854:	4608      	mov	r0, r1
 8008856:	4611      	mov	r1, r2
 8008858:	2200      	movs	r2, #0
 800885a:	4d05      	ldr	r5, [pc, #20]	; (8008870 <_read_r+0x20>)
 800885c:	602a      	str	r2, [r5, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	f7fb f825 	bl	80038ae <_read>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_read_r+0x1e>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_read_r+0x1e>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	20000598 	.word	0x20000598

08008874 <cos>:
 8008874:	b530      	push	{r4, r5, lr}
 8008876:	4a1e      	ldr	r2, [pc, #120]	; (80088f0 <cos+0x7c>)
 8008878:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800887c:	4293      	cmp	r3, r2
 800887e:	b087      	sub	sp, #28
 8008880:	dc04      	bgt.n	800888c <cos+0x18>
 8008882:	2200      	movs	r2, #0
 8008884:	2300      	movs	r3, #0
 8008886:	f001 f81b 	bl	80098c0 <__kernel_cos>
 800888a:	e006      	b.n	800889a <cos+0x26>
 800888c:	4a19      	ldr	r2, [pc, #100]	; (80088f4 <cos+0x80>)
 800888e:	4293      	cmp	r3, r2
 8008890:	dd05      	ble.n	800889e <cos+0x2a>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	f7f7 fc67 	bl	8000168 <__aeabi_dsub>
 800889a:	b007      	add	sp, #28
 800889c:	bd30      	pop	{r4, r5, pc}
 800889e:	aa02      	add	r2, sp, #8
 80088a0:	f000 fb2a 	bl	8008ef8 <__ieee754_rem_pio2>
 80088a4:	f000 0003 	and.w	r0, r0, #3
 80088a8:	2801      	cmp	r0, #1
 80088aa:	d007      	beq.n	80088bc <cos+0x48>
 80088ac:	2802      	cmp	r0, #2
 80088ae:	d00f      	beq.n	80088d0 <cos+0x5c>
 80088b0:	b9a8      	cbnz	r0, 80088de <cos+0x6a>
 80088b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ba:	e7e4      	b.n	8008886 <cos+0x12>
 80088bc:	9000      	str	r0, [sp, #0]
 80088be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088c6:	f001 fc03 	bl	800a0d0 <__kernel_sin>
 80088ca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80088ce:	e7e4      	b.n	800889a <cos+0x26>
 80088d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088d8:	f000 fff2 	bl	80098c0 <__kernel_cos>
 80088dc:	e7f5      	b.n	80088ca <cos+0x56>
 80088de:	2301      	movs	r3, #1
 80088e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ea:	f001 fbf1 	bl	800a0d0 <__kernel_sin>
 80088ee:	e7d4      	b.n	800889a <cos+0x26>
 80088f0:	3fe921fb 	.word	0x3fe921fb
 80088f4:	7fefffff 	.word	0x7fefffff

080088f8 <sin>:
 80088f8:	b530      	push	{r4, r5, lr}
 80088fa:	4a20      	ldr	r2, [pc, #128]	; (800897c <sin+0x84>)
 80088fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008900:	4293      	cmp	r3, r2
 8008902:	b087      	sub	sp, #28
 8008904:	dc06      	bgt.n	8008914 <sin+0x1c>
 8008906:	2300      	movs	r3, #0
 8008908:	2200      	movs	r2, #0
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	2300      	movs	r3, #0
 800890e:	f001 fbdf 	bl	800a0d0 <__kernel_sin>
 8008912:	e006      	b.n	8008922 <sin+0x2a>
 8008914:	4a1a      	ldr	r2, [pc, #104]	; (8008980 <sin+0x88>)
 8008916:	4293      	cmp	r3, r2
 8008918:	dd05      	ble.n	8008926 <sin+0x2e>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	f7f7 fc23 	bl	8000168 <__aeabi_dsub>
 8008922:	b007      	add	sp, #28
 8008924:	bd30      	pop	{r4, r5, pc}
 8008926:	aa02      	add	r2, sp, #8
 8008928:	f000 fae6 	bl	8008ef8 <__ieee754_rem_pio2>
 800892c:	f000 0003 	and.w	r0, r0, #3
 8008930:	2801      	cmp	r0, #1
 8008932:	d009      	beq.n	8008948 <sin+0x50>
 8008934:	2802      	cmp	r0, #2
 8008936:	d00e      	beq.n	8008956 <sin+0x5e>
 8008938:	b9c0      	cbnz	r0, 800896c <sin+0x74>
 800893a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893e:	2301      	movs	r3, #1
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008946:	e7e2      	b.n	800890e <sin+0x16>
 8008948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800894c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008950:	f000 ffb6 	bl	80098c0 <__kernel_cos>
 8008954:	e7e5      	b.n	8008922 <sin+0x2a>
 8008956:	2301      	movs	r3, #1
 8008958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008962:	f001 fbb5 	bl	800a0d0 <__kernel_sin>
 8008966:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800896a:	e7da      	b.n	8008922 <sin+0x2a>
 800896c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008974:	f000 ffa4 	bl	80098c0 <__kernel_cos>
 8008978:	e7f5      	b.n	8008966 <sin+0x6e>
 800897a:	bf00      	nop
 800897c:	3fe921fb 	.word	0x3fe921fb
 8008980:	7fefffff 	.word	0x7fefffff

08008984 <atanf>:
 8008984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008988:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800898c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008990:	4604      	mov	r4, r0
 8008992:	4680      	mov	r8, r0
 8008994:	db0e      	blt.n	80089b4 <atanf+0x30>
 8008996:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800899a:	dd04      	ble.n	80089a6 <atanf+0x22>
 800899c:	4601      	mov	r1, r0
 800899e:	f7f8 f8c9 	bl	8000b34 <__addsf3>
 80089a2:	4604      	mov	r4, r0
 80089a4:	e003      	b.n	80089ae <atanf+0x2a>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f300 80ce 	bgt.w	8008b48 <atanf+0x1c4>
 80089ac:	4c67      	ldr	r4, [pc, #412]	; (8008b4c <atanf+0x1c8>)
 80089ae:	4620      	mov	r0, r4
 80089b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b4:	4b66      	ldr	r3, [pc, #408]	; (8008b50 <atanf+0x1cc>)
 80089b6:	429d      	cmp	r5, r3
 80089b8:	dc0e      	bgt.n	80089d8 <atanf+0x54>
 80089ba:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80089be:	da08      	bge.n	80089d2 <atanf+0x4e>
 80089c0:	4964      	ldr	r1, [pc, #400]	; (8008b54 <atanf+0x1d0>)
 80089c2:	f7f8 f8b7 	bl	8000b34 <__addsf3>
 80089c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80089ca:	f7f8 fb77 	bl	80010bc <__aeabi_fcmpgt>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d1ed      	bne.n	80089ae <atanf+0x2a>
 80089d2:	f04f 36ff 	mov.w	r6, #4294967295
 80089d6:	e01c      	b.n	8008a12 <atanf+0x8e>
 80089d8:	f000 f914 	bl	8008c04 <fabsf>
 80089dc:	4b5e      	ldr	r3, [pc, #376]	; (8008b58 <atanf+0x1d4>)
 80089de:	4604      	mov	r4, r0
 80089e0:	429d      	cmp	r5, r3
 80089e2:	dc7c      	bgt.n	8008ade <atanf+0x15a>
 80089e4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80089e8:	429d      	cmp	r5, r3
 80089ea:	dc67      	bgt.n	8008abc <atanf+0x138>
 80089ec:	4601      	mov	r1, r0
 80089ee:	f7f8 f8a1 	bl	8000b34 <__addsf3>
 80089f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80089f6:	f7f8 f89b 	bl	8000b30 <__aeabi_fsub>
 80089fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80089fe:	4605      	mov	r5, r0
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7f8 f897 	bl	8000b34 <__addsf3>
 8008a06:	4601      	mov	r1, r0
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f7f8 fa4f 	bl	8000eac <__aeabi_fdiv>
 8008a0e:	2600      	movs	r6, #0
 8008a10:	4604      	mov	r4, r0
 8008a12:	4621      	mov	r1, r4
 8008a14:	4620      	mov	r0, r4
 8008a16:	f7f8 f995 	bl	8000d44 <__aeabi_fmul>
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	f7f8 f991 	bl	8000d44 <__aeabi_fmul>
 8008a22:	4605      	mov	r5, r0
 8008a24:	494d      	ldr	r1, [pc, #308]	; (8008b5c <atanf+0x1d8>)
 8008a26:	f7f8 f98d 	bl	8000d44 <__aeabi_fmul>
 8008a2a:	494d      	ldr	r1, [pc, #308]	; (8008b60 <atanf+0x1dc>)
 8008a2c:	f7f8 f882 	bl	8000b34 <__addsf3>
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f8 f987 	bl	8000d44 <__aeabi_fmul>
 8008a36:	494b      	ldr	r1, [pc, #300]	; (8008b64 <atanf+0x1e0>)
 8008a38:	f7f8 f87c 	bl	8000b34 <__addsf3>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f7f8 f981 	bl	8000d44 <__aeabi_fmul>
 8008a42:	4949      	ldr	r1, [pc, #292]	; (8008b68 <atanf+0x1e4>)
 8008a44:	f7f8 f876 	bl	8000b34 <__addsf3>
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7f8 f97b 	bl	8000d44 <__aeabi_fmul>
 8008a4e:	4947      	ldr	r1, [pc, #284]	; (8008b6c <atanf+0x1e8>)
 8008a50:	f7f8 f870 	bl	8000b34 <__addsf3>
 8008a54:	4629      	mov	r1, r5
 8008a56:	f7f8 f975 	bl	8000d44 <__aeabi_fmul>
 8008a5a:	4945      	ldr	r1, [pc, #276]	; (8008b70 <atanf+0x1ec>)
 8008a5c:	f7f8 f86a 	bl	8000b34 <__addsf3>
 8008a60:	4639      	mov	r1, r7
 8008a62:	f7f8 f96f 	bl	8000d44 <__aeabi_fmul>
 8008a66:	4943      	ldr	r1, [pc, #268]	; (8008b74 <atanf+0x1f0>)
 8008a68:	4607      	mov	r7, r0
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f7f8 f96a 	bl	8000d44 <__aeabi_fmul>
 8008a70:	4941      	ldr	r1, [pc, #260]	; (8008b78 <atanf+0x1f4>)
 8008a72:	f7f8 f85d 	bl	8000b30 <__aeabi_fsub>
 8008a76:	4629      	mov	r1, r5
 8008a78:	f7f8 f964 	bl	8000d44 <__aeabi_fmul>
 8008a7c:	493f      	ldr	r1, [pc, #252]	; (8008b7c <atanf+0x1f8>)
 8008a7e:	f7f8 f857 	bl	8000b30 <__aeabi_fsub>
 8008a82:	4629      	mov	r1, r5
 8008a84:	f7f8 f95e 	bl	8000d44 <__aeabi_fmul>
 8008a88:	493d      	ldr	r1, [pc, #244]	; (8008b80 <atanf+0x1fc>)
 8008a8a:	f7f8 f851 	bl	8000b30 <__aeabi_fsub>
 8008a8e:	4629      	mov	r1, r5
 8008a90:	f7f8 f958 	bl	8000d44 <__aeabi_fmul>
 8008a94:	493b      	ldr	r1, [pc, #236]	; (8008b84 <atanf+0x200>)
 8008a96:	f7f8 f84b 	bl	8000b30 <__aeabi_fsub>
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	f7f8 f952 	bl	8000d44 <__aeabi_fmul>
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f7f8 f846 	bl	8000b34 <__addsf3>
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	f7f8 f94b 	bl	8000d44 <__aeabi_fmul>
 8008aae:	1c73      	adds	r3, r6, #1
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	d133      	bne.n	8008b1c <atanf+0x198>
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7f8 f83b 	bl	8000b30 <__aeabi_fsub>
 8008aba:	e772      	b.n	80089a2 <atanf+0x1e>
 8008abc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ac0:	f7f8 f836 	bl	8000b30 <__aeabi_fsub>
 8008ac4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ac8:	4605      	mov	r5, r0
 8008aca:	4620      	mov	r0, r4
 8008acc:	f7f8 f832 	bl	8000b34 <__addsf3>
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f7f8 f9ea 	bl	8000eac <__aeabi_fdiv>
 8008ad8:	2601      	movs	r6, #1
 8008ada:	4604      	mov	r4, r0
 8008adc:	e799      	b.n	8008a12 <atanf+0x8e>
 8008ade:	4b2a      	ldr	r3, [pc, #168]	; (8008b88 <atanf+0x204>)
 8008ae0:	429d      	cmp	r5, r3
 8008ae2:	dc14      	bgt.n	8008b0e <atanf+0x18a>
 8008ae4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008ae8:	f7f8 f822 	bl	8000b30 <__aeabi_fsub>
 8008aec:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008af0:	4605      	mov	r5, r0
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7f8 f926 	bl	8000d44 <__aeabi_fmul>
 8008af8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008afc:	f7f8 f81a 	bl	8000b34 <__addsf3>
 8008b00:	4601      	mov	r1, r0
 8008b02:	4628      	mov	r0, r5
 8008b04:	f7f8 f9d2 	bl	8000eac <__aeabi_fdiv>
 8008b08:	2602      	movs	r6, #2
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	e781      	b.n	8008a12 <atanf+0x8e>
 8008b0e:	4601      	mov	r1, r0
 8008b10:	481e      	ldr	r0, [pc, #120]	; (8008b8c <atanf+0x208>)
 8008b12:	f7f8 f9cb 	bl	8000eac <__aeabi_fdiv>
 8008b16:	2603      	movs	r6, #3
 8008b18:	4604      	mov	r4, r0
 8008b1a:	e77a      	b.n	8008a12 <atanf+0x8e>
 8008b1c:	4b1c      	ldr	r3, [pc, #112]	; (8008b90 <atanf+0x20c>)
 8008b1e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008b22:	f7f8 f805 	bl	8000b30 <__aeabi_fsub>
 8008b26:	4621      	mov	r1, r4
 8008b28:	f7f8 f802 	bl	8000b30 <__aeabi_fsub>
 8008b2c:	4b19      	ldr	r3, [pc, #100]	; (8008b94 <atanf+0x210>)
 8008b2e:	4601      	mov	r1, r0
 8008b30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b34:	f7f7 fffc 	bl	8000b30 <__aeabi_fsub>
 8008b38:	f1b8 0f00 	cmp.w	r8, #0
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	f6bf af36 	bge.w	80089ae <atanf+0x2a>
 8008b42:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008b46:	e72c      	b.n	80089a2 <atanf+0x1e>
 8008b48:	4c13      	ldr	r4, [pc, #76]	; (8008b98 <atanf+0x214>)
 8008b4a:	e730      	b.n	80089ae <atanf+0x2a>
 8008b4c:	bfc90fdb 	.word	0xbfc90fdb
 8008b50:	3edfffff 	.word	0x3edfffff
 8008b54:	7149f2ca 	.word	0x7149f2ca
 8008b58:	3f97ffff 	.word	0x3f97ffff
 8008b5c:	3c8569d7 	.word	0x3c8569d7
 8008b60:	3d4bda59 	.word	0x3d4bda59
 8008b64:	3d886b35 	.word	0x3d886b35
 8008b68:	3dba2e6e 	.word	0x3dba2e6e
 8008b6c:	3e124925 	.word	0x3e124925
 8008b70:	3eaaaaab 	.word	0x3eaaaaab
 8008b74:	bd15a221 	.word	0xbd15a221
 8008b78:	3d6ef16b 	.word	0x3d6ef16b
 8008b7c:	3d9d8795 	.word	0x3d9d8795
 8008b80:	3de38e38 	.word	0x3de38e38
 8008b84:	3e4ccccd 	.word	0x3e4ccccd
 8008b88:	401bffff 	.word	0x401bffff
 8008b8c:	bf800000 	.word	0xbf800000
 8008b90:	0800b864 	.word	0x0800b864
 8008b94:	0800b854 	.word	0x0800b854
 8008b98:	3fc90fdb 	.word	0x3fc90fdb

08008b9c <cosf>:
 8008b9c:	b507      	push	{r0, r1, r2, lr}
 8008b9e:	4a18      	ldr	r2, [pc, #96]	; (8008c00 <cosf+0x64>)
 8008ba0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	dc03      	bgt.n	8008bb2 <cosf+0x16>
 8008baa:	2100      	movs	r1, #0
 8008bac:	f001 fb46 	bl	800a23c <__kernel_cosf>
 8008bb0:	e004      	b.n	8008bbc <cosf+0x20>
 8008bb2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008bb6:	db04      	blt.n	8008bc2 <cosf+0x26>
 8008bb8:	f7f7 ffba 	bl	8000b30 <__aeabi_fsub>
 8008bbc:	b003      	add	sp, #12
 8008bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bc2:	4669      	mov	r1, sp
 8008bc4:	f000 fccc 	bl	8009560 <__ieee754_rem_pio2f>
 8008bc8:	f000 0203 	and.w	r2, r0, #3
 8008bcc:	2a01      	cmp	r2, #1
 8008bce:	d005      	beq.n	8008bdc <cosf+0x40>
 8008bd0:	2a02      	cmp	r2, #2
 8008bd2:	d00a      	beq.n	8008bea <cosf+0x4e>
 8008bd4:	b972      	cbnz	r2, 8008bf4 <cosf+0x58>
 8008bd6:	9901      	ldr	r1, [sp, #4]
 8008bd8:	9800      	ldr	r0, [sp, #0]
 8008bda:	e7e7      	b.n	8008bac <cosf+0x10>
 8008bdc:	9901      	ldr	r1, [sp, #4]
 8008bde:	9800      	ldr	r0, [sp, #0]
 8008be0:	f001 fe62 	bl	800a8a8 <__kernel_sinf>
 8008be4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008be8:	e7e8      	b.n	8008bbc <cosf+0x20>
 8008bea:	9901      	ldr	r1, [sp, #4]
 8008bec:	9800      	ldr	r0, [sp, #0]
 8008bee:	f001 fb25 	bl	800a23c <__kernel_cosf>
 8008bf2:	e7f7      	b.n	8008be4 <cosf+0x48>
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	9901      	ldr	r1, [sp, #4]
 8008bf8:	9800      	ldr	r0, [sp, #0]
 8008bfa:	f001 fe55 	bl	800a8a8 <__kernel_sinf>
 8008bfe:	e7dd      	b.n	8008bbc <cosf+0x20>
 8008c00:	3f490fd8 	.word	0x3f490fd8

08008c04 <fabsf>:
 8008c04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008c08:	4770      	bx	lr
	...

08008c0c <sinf>:
 8008c0c:	b507      	push	{r0, r1, r2, lr}
 8008c0e:	4a19      	ldr	r2, [pc, #100]	; (8008c74 <sinf+0x68>)
 8008c10:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008c14:	4293      	cmp	r3, r2
 8008c16:	4601      	mov	r1, r0
 8008c18:	dc04      	bgt.n	8008c24 <sinf+0x18>
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	f001 fe43 	bl	800a8a8 <__kernel_sinf>
 8008c22:	e004      	b.n	8008c2e <sinf+0x22>
 8008c24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008c28:	db04      	blt.n	8008c34 <sinf+0x28>
 8008c2a:	f7f7 ff81 	bl	8000b30 <__aeabi_fsub>
 8008c2e:	b003      	add	sp, #12
 8008c30:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c34:	4669      	mov	r1, sp
 8008c36:	f000 fc93 	bl	8009560 <__ieee754_rem_pio2f>
 8008c3a:	f000 0003 	and.w	r0, r0, #3
 8008c3e:	2801      	cmp	r0, #1
 8008c40:	d006      	beq.n	8008c50 <sinf+0x44>
 8008c42:	2802      	cmp	r0, #2
 8008c44:	d009      	beq.n	8008c5a <sinf+0x4e>
 8008c46:	b980      	cbnz	r0, 8008c6a <sinf+0x5e>
 8008c48:	2201      	movs	r2, #1
 8008c4a:	9901      	ldr	r1, [sp, #4]
 8008c4c:	9800      	ldr	r0, [sp, #0]
 8008c4e:	e7e6      	b.n	8008c1e <sinf+0x12>
 8008c50:	9901      	ldr	r1, [sp, #4]
 8008c52:	9800      	ldr	r0, [sp, #0]
 8008c54:	f001 faf2 	bl	800a23c <__kernel_cosf>
 8008c58:	e7e9      	b.n	8008c2e <sinf+0x22>
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	9901      	ldr	r1, [sp, #4]
 8008c5e:	9800      	ldr	r0, [sp, #0]
 8008c60:	f001 fe22 	bl	800a8a8 <__kernel_sinf>
 8008c64:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008c68:	e7e1      	b.n	8008c2e <sinf+0x22>
 8008c6a:	9901      	ldr	r1, [sp, #4]
 8008c6c:	9800      	ldr	r0, [sp, #0]
 8008c6e:	f001 fae5 	bl	800a23c <__kernel_cosf>
 8008c72:	e7f7      	b.n	8008c64 <sinf+0x58>
 8008c74:	3f490fd8 	.word	0x3f490fd8

08008c78 <tanf>:
 8008c78:	b507      	push	{r0, r1, r2, lr}
 8008c7a:	4a0f      	ldr	r2, [pc, #60]	; (8008cb8 <tanf+0x40>)
 8008c7c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008c80:	4293      	cmp	r3, r2
 8008c82:	4601      	mov	r1, r0
 8008c84:	dc04      	bgt.n	8008c90 <tanf+0x18>
 8008c86:	2201      	movs	r2, #1
 8008c88:	2100      	movs	r1, #0
 8008c8a:	f001 fe83 	bl	800a994 <__kernel_tanf>
 8008c8e:	e004      	b.n	8008c9a <tanf+0x22>
 8008c90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008c94:	db04      	blt.n	8008ca0 <tanf+0x28>
 8008c96:	f7f7 ff4b 	bl	8000b30 <__aeabi_fsub>
 8008c9a:	b003      	add	sp, #12
 8008c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ca0:	4669      	mov	r1, sp
 8008ca2:	f000 fc5d 	bl	8009560 <__ieee754_rem_pio2f>
 8008ca6:	0042      	lsls	r2, r0, #1
 8008ca8:	f002 0202 	and.w	r2, r2, #2
 8008cac:	9901      	ldr	r1, [sp, #4]
 8008cae:	9800      	ldr	r0, [sp, #0]
 8008cb0:	f1c2 0201 	rsb	r2, r2, #1
 8008cb4:	e7e9      	b.n	8008c8a <tanf+0x12>
 8008cb6:	bf00      	nop
 8008cb8:	3f490fda 	.word	0x3f490fda

08008cbc <atan2>:
 8008cbc:	f000 b848 	b.w	8008d50 <__ieee754_atan2>

08008cc0 <asinf>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	f000 fb08 	bl	80092d8 <__ieee754_asinf>
 8008cc8:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <asinf+0x44>)
 8008cca:	4605      	mov	r5, r0
 8008ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	d015      	beq.n	8008d00 <asinf+0x40>
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f7f8 f9fa 	bl	80010d0 <__aeabi_fcmpun>
 8008cdc:	b980      	cbnz	r0, 8008d00 <asinf+0x40>
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f7ff ff90 	bl	8008c04 <fabsf>
 8008ce4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ce8:	f7f8 f9e8 	bl	80010bc <__aeabi_fcmpgt>
 8008cec:	b140      	cbz	r0, 8008d00 <asinf+0x40>
 8008cee:	f7fc febb 	bl	8005a68 <__errno>
 8008cf2:	2321      	movs	r3, #33	; 0x21
 8008cf4:	6003      	str	r3, [r0, #0]
 8008cf6:	4804      	ldr	r0, [pc, #16]	; (8008d08 <asinf+0x48>)
 8008cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cfc:	f002 ba50 	b.w	800b1a0 <nanf>
 8008d00:	4628      	mov	r0, r5
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	20000200 	.word	0x20000200
 8008d08:	0800b6e8 	.word	0x0800b6e8

08008d0c <sqrtf>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4605      	mov	r5, r0
 8008d10:	f000 fd84 	bl	800981c <__ieee754_sqrtf>
 8008d14:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <sqrtf+0x40>)
 8008d16:	4604      	mov	r4, r0
 8008d18:	f993 3000 	ldrsb.w	r3, [r3]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	d012      	beq.n	8008d46 <sqrtf+0x3a>
 8008d20:	4629      	mov	r1, r5
 8008d22:	4628      	mov	r0, r5
 8008d24:	f7f8 f9d4 	bl	80010d0 <__aeabi_fcmpun>
 8008d28:	b968      	cbnz	r0, 8008d46 <sqrtf+0x3a>
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	f7f8 f9a7 	bl	8001080 <__aeabi_fcmplt>
 8008d32:	b140      	cbz	r0, 8008d46 <sqrtf+0x3a>
 8008d34:	f7fc fe98 	bl	8005a68 <__errno>
 8008d38:	2321      	movs	r3, #33	; 0x21
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	6003      	str	r3, [r0, #0]
 8008d3e:	4608      	mov	r0, r1
 8008d40:	f7f8 f8b4 	bl	8000eac <__aeabi_fdiv>
 8008d44:	4604      	mov	r4, r0
 8008d46:	4620      	mov	r0, r4
 8008d48:	bd38      	pop	{r3, r4, r5, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000200 	.word	0x20000200

08008d50 <__ieee754_atan2>:
 8008d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	4692      	mov	sl, r2
 8008d56:	4699      	mov	r9, r3
 8008d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d5c:	461f      	mov	r7, r3
 8008d5e:	f1ca 0300 	rsb	r3, sl, #0
 8008d62:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8008ef0 <__ieee754_atan2+0x1a0>
 8008d66:	ea43 030a 	orr.w	r3, r3, sl
 8008d6a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008d6e:	4573      	cmp	r3, lr
 8008d70:	4604      	mov	r4, r0
 8008d72:	460d      	mov	r5, r1
 8008d74:	d808      	bhi.n	8008d88 <__ieee754_atan2+0x38>
 8008d76:	4246      	negs	r6, r0
 8008d78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d7c:	4306      	orrs	r6, r0
 8008d7e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008d82:	4576      	cmp	r6, lr
 8008d84:	468c      	mov	ip, r1
 8008d86:	d908      	bls.n	8008d9a <__ieee754_atan2+0x4a>
 8008d88:	4652      	mov	r2, sl
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	4629      	mov	r1, r5
 8008d90:	f7f7 f9ec 	bl	800016c <__adddf3>
 8008d94:	4604      	mov	r4, r0
 8008d96:	460d      	mov	r5, r1
 8008d98:	e019      	b.n	8008dce <__ieee754_atan2+0x7e>
 8008d9a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8008d9e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008da2:	ea56 060a 	orrs.w	r6, r6, sl
 8008da6:	d103      	bne.n	8008db0 <__ieee754_atan2+0x60>
 8008da8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	f001 bf20 	b.w	800abf0 <atan>
 8008db0:	17be      	asrs	r6, r7, #30
 8008db2:	f006 0602 	and.w	r6, r6, #2
 8008db6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008dba:	ea53 0100 	orrs.w	r1, r3, r0
 8008dbe:	d10a      	bne.n	8008dd6 <__ieee754_atan2+0x86>
 8008dc0:	2e02      	cmp	r6, #2
 8008dc2:	d067      	beq.n	8008e94 <__ieee754_atan2+0x144>
 8008dc4:	2e03      	cmp	r6, #3
 8008dc6:	d102      	bne.n	8008dce <__ieee754_atan2+0x7e>
 8008dc8:	a53b      	add	r5, pc, #236	; (adr r5, 8008eb8 <__ieee754_atan2+0x168>)
 8008dca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd6:	ea52 010a 	orrs.w	r1, r2, sl
 8008dda:	d106      	bne.n	8008dea <__ieee754_atan2+0x9a>
 8008ddc:	f1bc 0f00 	cmp.w	ip, #0
 8008de0:	da63      	bge.n	8008eaa <__ieee754_atan2+0x15a>
 8008de2:	a537      	add	r5, pc, #220	; (adr r5, 8008ec0 <__ieee754_atan2+0x170>)
 8008de4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008de8:	e7f1      	b.n	8008dce <__ieee754_atan2+0x7e>
 8008dea:	4572      	cmp	r2, lr
 8008dec:	d10f      	bne.n	8008e0e <__ieee754_atan2+0xbe>
 8008dee:	4293      	cmp	r3, r2
 8008df0:	f106 36ff 	add.w	r6, r6, #4294967295
 8008df4:	d107      	bne.n	8008e06 <__ieee754_atan2+0xb6>
 8008df6:	2e02      	cmp	r6, #2
 8008df8:	d850      	bhi.n	8008e9c <__ieee754_atan2+0x14c>
 8008dfa:	4b3b      	ldr	r3, [pc, #236]	; (8008ee8 <__ieee754_atan2+0x198>)
 8008dfc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008e00:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008e04:	e7e3      	b.n	8008dce <__ieee754_atan2+0x7e>
 8008e06:	2e02      	cmp	r6, #2
 8008e08:	d84c      	bhi.n	8008ea4 <__ieee754_atan2+0x154>
 8008e0a:	4b38      	ldr	r3, [pc, #224]	; (8008eec <__ieee754_atan2+0x19c>)
 8008e0c:	e7f6      	b.n	8008dfc <__ieee754_atan2+0xac>
 8008e0e:	4573      	cmp	r3, lr
 8008e10:	d0e4      	beq.n	8008ddc <__ieee754_atan2+0x8c>
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008e18:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e1c:	da20      	bge.n	8008e60 <__ieee754_atan2+0x110>
 8008e1e:	2f00      	cmp	r7, #0
 8008e20:	da01      	bge.n	8008e26 <__ieee754_atan2+0xd6>
 8008e22:	323c      	adds	r2, #60	; 0x3c
 8008e24:	db20      	blt.n	8008e68 <__ieee754_atan2+0x118>
 8008e26:	4652      	mov	r2, sl
 8008e28:	464b      	mov	r3, r9
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	f7f7 fc7d 	bl	800072c <__aeabi_ddiv>
 8008e32:	f002 f867 	bl	800af04 <fabs>
 8008e36:	f001 fedb 	bl	800abf0 <atan>
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	460d      	mov	r5, r1
 8008e3e:	2e01      	cmp	r6, #1
 8008e40:	d015      	beq.n	8008e6e <__ieee754_atan2+0x11e>
 8008e42:	2e02      	cmp	r6, #2
 8008e44:	d017      	beq.n	8008e76 <__ieee754_atan2+0x126>
 8008e46:	2e00      	cmp	r6, #0
 8008e48:	d0c1      	beq.n	8008dce <__ieee754_atan2+0x7e>
 8008e4a:	a31f      	add	r3, pc, #124	; (adr r3, 8008ec8 <__ieee754_atan2+0x178>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 f988 	bl	8000168 <__aeabi_dsub>
 8008e58:	a31d      	add	r3, pc, #116	; (adr r3, 8008ed0 <__ieee754_atan2+0x180>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	e016      	b.n	8008e8e <__ieee754_atan2+0x13e>
 8008e60:	a51d      	add	r5, pc, #116	; (adr r5, 8008ed8 <__ieee754_atan2+0x188>)
 8008e62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e66:	e7ea      	b.n	8008e3e <__ieee754_atan2+0xee>
 8008e68:	2400      	movs	r4, #0
 8008e6a:	2500      	movs	r5, #0
 8008e6c:	e7e7      	b.n	8008e3e <__ieee754_atan2+0xee>
 8008e6e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008e72:	461d      	mov	r5, r3
 8008e74:	e7ab      	b.n	8008dce <__ieee754_atan2+0x7e>
 8008e76:	a314      	add	r3, pc, #80	; (adr r3, 8008ec8 <__ieee754_atan2+0x178>)
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 f972 	bl	8000168 <__aeabi_dsub>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	a111      	add	r1, pc, #68	; (adr r1, 8008ed0 <__ieee754_atan2+0x180>)
 8008e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e8e:	f7f7 f96b 	bl	8000168 <__aeabi_dsub>
 8008e92:	e77f      	b.n	8008d94 <__ieee754_atan2+0x44>
 8008e94:	a50e      	add	r5, pc, #56	; (adr r5, 8008ed0 <__ieee754_atan2+0x180>)
 8008e96:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e9a:	e798      	b.n	8008dce <__ieee754_atan2+0x7e>
 8008e9c:	a510      	add	r5, pc, #64	; (adr r5, 8008ee0 <__ieee754_atan2+0x190>)
 8008e9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ea2:	e794      	b.n	8008dce <__ieee754_atan2+0x7e>
 8008ea4:	2400      	movs	r4, #0
 8008ea6:	2500      	movs	r5, #0
 8008ea8:	e791      	b.n	8008dce <__ieee754_atan2+0x7e>
 8008eaa:	a50b      	add	r5, pc, #44	; (adr r5, 8008ed8 <__ieee754_atan2+0x188>)
 8008eac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008eb0:	e78d      	b.n	8008dce <__ieee754_atan2+0x7e>
 8008eb2:	bf00      	nop
 8008eb4:	f3af 8000 	nop.w
 8008eb8:	54442d18 	.word	0x54442d18
 8008ebc:	c00921fb 	.word	0xc00921fb
 8008ec0:	54442d18 	.word	0x54442d18
 8008ec4:	bff921fb 	.word	0xbff921fb
 8008ec8:	33145c07 	.word	0x33145c07
 8008ecc:	3ca1a626 	.word	0x3ca1a626
 8008ed0:	54442d18 	.word	0x54442d18
 8008ed4:	400921fb 	.word	0x400921fb
 8008ed8:	54442d18 	.word	0x54442d18
 8008edc:	3ff921fb 	.word	0x3ff921fb
 8008ee0:	54442d18 	.word	0x54442d18
 8008ee4:	3fe921fb 	.word	0x3fe921fb
 8008ee8:	0800b878 	.word	0x0800b878
 8008eec:	0800b890 	.word	0x0800b890
 8008ef0:	7ff00000 	.word	0x7ff00000
 8008ef4:	00000000 	.word	0x00000000

08008ef8 <__ieee754_rem_pio2>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	4614      	mov	r4, r2
 8008efe:	4ac4      	ldr	r2, [pc, #784]	; (8009210 <__ieee754_rem_pio2+0x318>)
 8008f00:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008f04:	b08d      	sub	sp, #52	; 0x34
 8008f06:	4592      	cmp	sl, r2
 8008f08:	9104      	str	r1, [sp, #16]
 8008f0a:	dc07      	bgt.n	8008f1c <__ieee754_rem_pio2+0x24>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e9c4 0100 	strd	r0, r1, [r4]
 8008f14:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008f18:	2500      	movs	r5, #0
 8008f1a:	e024      	b.n	8008f66 <__ieee754_rem_pio2+0x6e>
 8008f1c:	4abd      	ldr	r2, [pc, #756]	; (8009214 <__ieee754_rem_pio2+0x31c>)
 8008f1e:	4592      	cmp	sl, r2
 8008f20:	dc72      	bgt.n	8009008 <__ieee754_rem_pio2+0x110>
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	4dbc      	ldr	r5, [pc, #752]	; (8009218 <__ieee754_rem_pio2+0x320>)
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	a3ab      	add	r3, pc, #684	; (adr r3, 80091d8 <__ieee754_rem_pio2+0x2e0>)
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	dd36      	ble.n	8008f9e <__ieee754_rem_pio2+0xa6>
 8008f30:	f7f7 f91a 	bl	8000168 <__aeabi_dsub>
 8008f34:	45aa      	cmp	sl, r5
 8008f36:	4606      	mov	r6, r0
 8008f38:	460f      	mov	r7, r1
 8008f3a:	d018      	beq.n	8008f6e <__ieee754_rem_pio2+0x76>
 8008f3c:	a3a8      	add	r3, pc, #672	; (adr r3, 80091e0 <__ieee754_rem_pio2+0x2e8>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 f911 	bl	8000168 <__aeabi_dsub>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	e9c4 2300 	strd	r2, r3, [r4]
 8008f50:	4639      	mov	r1, r7
 8008f52:	f7f7 f909 	bl	8000168 <__aeabi_dsub>
 8008f56:	a3a2      	add	r3, pc, #648	; (adr r3, 80091e0 <__ieee754_rem_pio2+0x2e8>)
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	f7f7 f904 	bl	8000168 <__aeabi_dsub>
 8008f60:	2501      	movs	r5, #1
 8008f62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f66:	4628      	mov	r0, r5
 8008f68:	b00d      	add	sp, #52	; 0x34
 8008f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6e:	a39e      	add	r3, pc, #632	; (adr r3, 80091e8 <__ieee754_rem_pio2+0x2f0>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7f7 f8f8 	bl	8000168 <__aeabi_dsub>
 8008f78:	a39d      	add	r3, pc, #628	; (adr r3, 80091f0 <__ieee754_rem_pio2+0x2f8>)
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	4606      	mov	r6, r0
 8008f80:	460f      	mov	r7, r1
 8008f82:	f7f7 f8f1 	bl	8000168 <__aeabi_dsub>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	e9c4 2300 	strd	r2, r3, [r4]
 8008f90:	4639      	mov	r1, r7
 8008f92:	f7f7 f8e9 	bl	8000168 <__aeabi_dsub>
 8008f96:	a396      	add	r3, pc, #600	; (adr r3, 80091f0 <__ieee754_rem_pio2+0x2f8>)
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	e7de      	b.n	8008f5c <__ieee754_rem_pio2+0x64>
 8008f9e:	f7f7 f8e5 	bl	800016c <__adddf3>
 8008fa2:	45aa      	cmp	sl, r5
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	460f      	mov	r7, r1
 8008fa8:	d016      	beq.n	8008fd8 <__ieee754_rem_pio2+0xe0>
 8008faa:	a38d      	add	r3, pc, #564	; (adr r3, 80091e0 <__ieee754_rem_pio2+0x2e8>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 f8dc 	bl	800016c <__adddf3>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4630      	mov	r0, r6
 8008fba:	e9c4 2300 	strd	r2, r3, [r4]
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f7f7 f8d2 	bl	8000168 <__aeabi_dsub>
 8008fc4:	a386      	add	r3, pc, #536	; (adr r3, 80091e0 <__ieee754_rem_pio2+0x2e8>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 f8cf 	bl	800016c <__adddf3>
 8008fce:	f04f 35ff 	mov.w	r5, #4294967295
 8008fd2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008fd6:	e7c6      	b.n	8008f66 <__ieee754_rem_pio2+0x6e>
 8008fd8:	a383      	add	r3, pc, #524	; (adr r3, 80091e8 <__ieee754_rem_pio2+0x2f0>)
 8008fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fde:	f7f7 f8c5 	bl	800016c <__adddf3>
 8008fe2:	a383      	add	r3, pc, #524	; (adr r3, 80091f0 <__ieee754_rem_pio2+0x2f8>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	4606      	mov	r6, r0
 8008fea:	460f      	mov	r7, r1
 8008fec:	f7f7 f8be 	bl	800016c <__adddf3>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	e9c4 2300 	strd	r2, r3, [r4]
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	f7f7 f8b4 	bl	8000168 <__aeabi_dsub>
 8009000:	a37b      	add	r3, pc, #492	; (adr r3, 80091f0 <__ieee754_rem_pio2+0x2f8>)
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	e7e0      	b.n	8008fca <__ieee754_rem_pio2+0xd2>
 8009008:	4a84      	ldr	r2, [pc, #528]	; (800921c <__ieee754_rem_pio2+0x324>)
 800900a:	4592      	cmp	sl, r2
 800900c:	f300 80d5 	bgt.w	80091ba <__ieee754_rem_pio2+0x2c2>
 8009010:	f001 ff78 	bl	800af04 <fabs>
 8009014:	a378      	add	r3, pc, #480	; (adr r3, 80091f8 <__ieee754_rem_pio2+0x300>)
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	4606      	mov	r6, r0
 800901c:	460f      	mov	r7, r1
 800901e:	f7f7 fa5b 	bl	80004d8 <__aeabi_dmul>
 8009022:	2200      	movs	r2, #0
 8009024:	4b7e      	ldr	r3, [pc, #504]	; (8009220 <__ieee754_rem_pio2+0x328>)
 8009026:	f7f7 f8a1 	bl	800016c <__adddf3>
 800902a:	f7f7 fd05 	bl	8000a38 <__aeabi_d2iz>
 800902e:	4605      	mov	r5, r0
 8009030:	f7f7 f9e8 	bl	8000404 <__aeabi_i2d>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800903c:	a366      	add	r3, pc, #408	; (adr r3, 80091d8 <__ieee754_rem_pio2+0x2e0>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f7f7 fa49 	bl	80004d8 <__aeabi_dmul>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4630      	mov	r0, r6
 800904c:	4639      	mov	r1, r7
 800904e:	f7f7 f88b 	bl	8000168 <__aeabi_dsub>
 8009052:	a363      	add	r3, pc, #396	; (adr r3, 80091e0 <__ieee754_rem_pio2+0x2e8>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	4680      	mov	r8, r0
 800905a:	4689      	mov	r9, r1
 800905c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009060:	f7f7 fa3a 	bl	80004d8 <__aeabi_dmul>
 8009064:	2d1f      	cmp	r5, #31
 8009066:	4606      	mov	r6, r0
 8009068:	460f      	mov	r7, r1
 800906a:	dc0e      	bgt.n	800908a <__ieee754_rem_pio2+0x192>
 800906c:	4b6d      	ldr	r3, [pc, #436]	; (8009224 <__ieee754_rem_pio2+0x32c>)
 800906e:	1e6a      	subs	r2, r5, #1
 8009070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009074:	4553      	cmp	r3, sl
 8009076:	d008      	beq.n	800908a <__ieee754_rem_pio2+0x192>
 8009078:	4632      	mov	r2, r6
 800907a:	463b      	mov	r3, r7
 800907c:	4640      	mov	r0, r8
 800907e:	4649      	mov	r1, r9
 8009080:	f7f7 f872 	bl	8000168 <__aeabi_dsub>
 8009084:	e9c4 0100 	strd	r0, r1, [r4]
 8009088:	e013      	b.n	80090b2 <__ieee754_rem_pio2+0x1ba>
 800908a:	463b      	mov	r3, r7
 800908c:	4632      	mov	r2, r6
 800908e:	4640      	mov	r0, r8
 8009090:	4649      	mov	r1, r9
 8009092:	f7f7 f869 	bl	8000168 <__aeabi_dsub>
 8009096:	ea4f 532a 	mov.w	r3, sl, asr #20
 800909a:	9305      	str	r3, [sp, #20]
 800909c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80090a0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80090a4:	f1ba 0f10 	cmp.w	sl, #16
 80090a8:	dc1f      	bgt.n	80090ea <__ieee754_rem_pio2+0x1f2>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	e9c4 2300 	strd	r2, r3, [r4]
 80090b2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80090b6:	4640      	mov	r0, r8
 80090b8:	4653      	mov	r3, sl
 80090ba:	4649      	mov	r1, r9
 80090bc:	f7f7 f854 	bl	8000168 <__aeabi_dsub>
 80090c0:	4632      	mov	r2, r6
 80090c2:	463b      	mov	r3, r7
 80090c4:	f7f7 f850 	bl	8000168 <__aeabi_dsub>
 80090c8:	460b      	mov	r3, r1
 80090ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80090ce:	9904      	ldr	r1, [sp, #16]
 80090d0:	4602      	mov	r2, r0
 80090d2:	2900      	cmp	r1, #0
 80090d4:	f6bf af47 	bge.w	8008f66 <__ieee754_rem_pio2+0x6e>
 80090d8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80090dc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80090e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80090e4:	60e3      	str	r3, [r4, #12]
 80090e6:	426d      	negs	r5, r5
 80090e8:	e73d      	b.n	8008f66 <__ieee754_rem_pio2+0x6e>
 80090ea:	a33f      	add	r3, pc, #252	; (adr r3, 80091e8 <__ieee754_rem_pio2+0x2f0>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090f4:	f7f7 f9f0 	bl	80004d8 <__aeabi_dmul>
 80090f8:	4606      	mov	r6, r0
 80090fa:	460f      	mov	r7, r1
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4640      	mov	r0, r8
 8009102:	4649      	mov	r1, r9
 8009104:	f7f7 f830 	bl	8000168 <__aeabi_dsub>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4682      	mov	sl, r0
 800910e:	468b      	mov	fp, r1
 8009110:	4640      	mov	r0, r8
 8009112:	4649      	mov	r1, r9
 8009114:	f7f7 f828 	bl	8000168 <__aeabi_dsub>
 8009118:	4632      	mov	r2, r6
 800911a:	463b      	mov	r3, r7
 800911c:	f7f7 f824 	bl	8000168 <__aeabi_dsub>
 8009120:	a333      	add	r3, pc, #204	; (adr r3, 80091f0 <__ieee754_rem_pio2+0x2f8>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	4606      	mov	r6, r0
 8009128:	460f      	mov	r7, r1
 800912a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912e:	f7f7 f9d3 	bl	80004d8 <__aeabi_dmul>
 8009132:	4632      	mov	r2, r6
 8009134:	463b      	mov	r3, r7
 8009136:	f7f7 f817 	bl	8000168 <__aeabi_dsub>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	4606      	mov	r6, r0
 8009140:	460f      	mov	r7, r1
 8009142:	4650      	mov	r0, sl
 8009144:	4659      	mov	r1, fp
 8009146:	f7f7 f80f 	bl	8000168 <__aeabi_dsub>
 800914a:	9a05      	ldr	r2, [sp, #20]
 800914c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b31      	cmp	r3, #49	; 0x31
 8009154:	dc06      	bgt.n	8009164 <__ieee754_rem_pio2+0x26c>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	46d0      	mov	r8, sl
 800915c:	46d9      	mov	r9, fp
 800915e:	e9c4 2300 	strd	r2, r3, [r4]
 8009162:	e7a6      	b.n	80090b2 <__ieee754_rem_pio2+0x1ba>
 8009164:	a326      	add	r3, pc, #152	; (adr r3, 8009200 <__ieee754_rem_pio2+0x308>)
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916e:	f7f7 f9b3 	bl	80004d8 <__aeabi_dmul>
 8009172:	4606      	mov	r6, r0
 8009174:	460f      	mov	r7, r1
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4650      	mov	r0, sl
 800917c:	4659      	mov	r1, fp
 800917e:	f7f6 fff3 	bl	8000168 <__aeabi_dsub>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4680      	mov	r8, r0
 8009188:	4689      	mov	r9, r1
 800918a:	4650      	mov	r0, sl
 800918c:	4659      	mov	r1, fp
 800918e:	f7f6 ffeb 	bl	8000168 <__aeabi_dsub>
 8009192:	4632      	mov	r2, r6
 8009194:	463b      	mov	r3, r7
 8009196:	f7f6 ffe7 	bl	8000168 <__aeabi_dsub>
 800919a:	a31b      	add	r3, pc, #108	; (adr r3, 8009208 <__ieee754_rem_pio2+0x310>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	4606      	mov	r6, r0
 80091a2:	460f      	mov	r7, r1
 80091a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a8:	f7f7 f996 	bl	80004d8 <__aeabi_dmul>
 80091ac:	4632      	mov	r2, r6
 80091ae:	463b      	mov	r3, r7
 80091b0:	f7f6 ffda 	bl	8000168 <__aeabi_dsub>
 80091b4:	4606      	mov	r6, r0
 80091b6:	460f      	mov	r7, r1
 80091b8:	e75e      	b.n	8009078 <__ieee754_rem_pio2+0x180>
 80091ba:	4a1b      	ldr	r2, [pc, #108]	; (8009228 <__ieee754_rem_pio2+0x330>)
 80091bc:	4592      	cmp	sl, r2
 80091be:	dd35      	ble.n	800922c <__ieee754_rem_pio2+0x334>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	f7f6 ffd0 	bl	8000168 <__aeabi_dsub>
 80091c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80091cc:	e9c4 0100 	strd	r0, r1, [r4]
 80091d0:	e6a2      	b.n	8008f18 <__ieee754_rem_pio2+0x20>
 80091d2:	bf00      	nop
 80091d4:	f3af 8000 	nop.w
 80091d8:	54400000 	.word	0x54400000
 80091dc:	3ff921fb 	.word	0x3ff921fb
 80091e0:	1a626331 	.word	0x1a626331
 80091e4:	3dd0b461 	.word	0x3dd0b461
 80091e8:	1a600000 	.word	0x1a600000
 80091ec:	3dd0b461 	.word	0x3dd0b461
 80091f0:	2e037073 	.word	0x2e037073
 80091f4:	3ba3198a 	.word	0x3ba3198a
 80091f8:	6dc9c883 	.word	0x6dc9c883
 80091fc:	3fe45f30 	.word	0x3fe45f30
 8009200:	2e000000 	.word	0x2e000000
 8009204:	3ba3198a 	.word	0x3ba3198a
 8009208:	252049c1 	.word	0x252049c1
 800920c:	397b839a 	.word	0x397b839a
 8009210:	3fe921fb 	.word	0x3fe921fb
 8009214:	4002d97b 	.word	0x4002d97b
 8009218:	3ff921fb 	.word	0x3ff921fb
 800921c:	413921fb 	.word	0x413921fb
 8009220:	3fe00000 	.word	0x3fe00000
 8009224:	0800b8a8 	.word	0x0800b8a8
 8009228:	7fefffff 	.word	0x7fefffff
 800922c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009230:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009234:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009238:	460f      	mov	r7, r1
 800923a:	4606      	mov	r6, r0
 800923c:	f7f7 fbfc 	bl	8000a38 <__aeabi_d2iz>
 8009240:	f7f7 f8e0 	bl	8000404 <__aeabi_i2d>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009250:	f7f6 ff8a 	bl	8000168 <__aeabi_dsub>
 8009254:	2200      	movs	r2, #0
 8009256:	4b1e      	ldr	r3, [pc, #120]	; (80092d0 <__ieee754_rem_pio2+0x3d8>)
 8009258:	f7f7 f93e 	bl	80004d8 <__aeabi_dmul>
 800925c:	460f      	mov	r7, r1
 800925e:	4606      	mov	r6, r0
 8009260:	f7f7 fbea 	bl	8000a38 <__aeabi_d2iz>
 8009264:	f7f7 f8ce 	bl	8000404 <__aeabi_i2d>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4630      	mov	r0, r6
 800926e:	4639      	mov	r1, r7
 8009270:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009274:	f7f6 ff78 	bl	8000168 <__aeabi_dsub>
 8009278:	2200      	movs	r2, #0
 800927a:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <__ieee754_rem_pio2+0x3d8>)
 800927c:	f7f7 f92c 	bl	80004d8 <__aeabi_dmul>
 8009280:	f04f 0803 	mov.w	r8, #3
 8009284:	2600      	movs	r6, #0
 8009286:	2700      	movs	r7, #0
 8009288:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800928c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8009290:	4632      	mov	r2, r6
 8009292:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8009296:	463b      	mov	r3, r7
 8009298:	46c2      	mov	sl, r8
 800929a:	f108 38ff 	add.w	r8, r8, #4294967295
 800929e:	f7f7 fb83 	bl	80009a8 <__aeabi_dcmpeq>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d1f4      	bne.n	8009290 <__ieee754_rem_pio2+0x398>
 80092a6:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <__ieee754_rem_pio2+0x3dc>)
 80092a8:	462a      	mov	r2, r5
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	2302      	movs	r3, #2
 80092ae:	4621      	mov	r1, r4
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	a806      	add	r0, sp, #24
 80092b4:	4653      	mov	r3, sl
 80092b6:	f000 fbc1 	bl	8009a3c <__kernel_rem_pio2>
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	4605      	mov	r5, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f6bf ae51 	bge.w	8008f66 <__ieee754_rem_pio2+0x6e>
 80092c4:	6863      	ldr	r3, [r4, #4]
 80092c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80092ca:	6063      	str	r3, [r4, #4]
 80092cc:	68e3      	ldr	r3, [r4, #12]
 80092ce:	e707      	b.n	80090e0 <__ieee754_rem_pio2+0x1e8>
 80092d0:	41700000 	.word	0x41700000
 80092d4:	0800b928 	.word	0x0800b928

080092d8 <__ieee754_asinf>:
 80092d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092dc:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80092e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80092e4:	4604      	mov	r4, r0
 80092e6:	4605      	mov	r5, r0
 80092e8:	d10c      	bne.n	8009304 <__ieee754_asinf+0x2c>
 80092ea:	498d      	ldr	r1, [pc, #564]	; (8009520 <__ieee754_asinf+0x248>)
 80092ec:	f7f7 fd2a 	bl	8000d44 <__aeabi_fmul>
 80092f0:	498c      	ldr	r1, [pc, #560]	; (8009524 <__ieee754_asinf+0x24c>)
 80092f2:	4605      	mov	r5, r0
 80092f4:	4620      	mov	r0, r4
 80092f6:	f7f7 fd25 	bl	8000d44 <__aeabi_fmul>
 80092fa:	4601      	mov	r1, r0
 80092fc:	4628      	mov	r0, r5
 80092fe:	f7f7 fc19 	bl	8000b34 <__addsf3>
 8009302:	e006      	b.n	8009312 <__ieee754_asinf+0x3a>
 8009304:	dd07      	ble.n	8009316 <__ieee754_asinf+0x3e>
 8009306:	4601      	mov	r1, r0
 8009308:	f7f7 fc12 	bl	8000b30 <__aeabi_fsub>
 800930c:	4601      	mov	r1, r0
 800930e:	f7f7 fdcd 	bl	8000eac <__aeabi_fdiv>
 8009312:	4604      	mov	r4, r0
 8009314:	e00e      	b.n	8009334 <__ieee754_asinf+0x5c>
 8009316:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800931a:	da58      	bge.n	80093ce <__ieee754_asinf+0xf6>
 800931c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8009320:	da0b      	bge.n	800933a <__ieee754_asinf+0x62>
 8009322:	4981      	ldr	r1, [pc, #516]	; (8009528 <__ieee754_asinf+0x250>)
 8009324:	f7f7 fc06 	bl	8000b34 <__addsf3>
 8009328:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800932c:	f7f7 fec6 	bl	80010bc <__aeabi_fcmpgt>
 8009330:	2800      	cmp	r0, #0
 8009332:	d04c      	beq.n	80093ce <__ieee754_asinf+0xf6>
 8009334:	4620      	mov	r0, r4
 8009336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933a:	4601      	mov	r1, r0
 800933c:	f7f7 fd02 	bl	8000d44 <__aeabi_fmul>
 8009340:	4605      	mov	r5, r0
 8009342:	497a      	ldr	r1, [pc, #488]	; (800952c <__ieee754_asinf+0x254>)
 8009344:	f7f7 fcfe 	bl	8000d44 <__aeabi_fmul>
 8009348:	4979      	ldr	r1, [pc, #484]	; (8009530 <__ieee754_asinf+0x258>)
 800934a:	f7f7 fbf3 	bl	8000b34 <__addsf3>
 800934e:	4629      	mov	r1, r5
 8009350:	f7f7 fcf8 	bl	8000d44 <__aeabi_fmul>
 8009354:	4977      	ldr	r1, [pc, #476]	; (8009534 <__ieee754_asinf+0x25c>)
 8009356:	f7f7 fbeb 	bl	8000b30 <__aeabi_fsub>
 800935a:	4629      	mov	r1, r5
 800935c:	f7f7 fcf2 	bl	8000d44 <__aeabi_fmul>
 8009360:	4975      	ldr	r1, [pc, #468]	; (8009538 <__ieee754_asinf+0x260>)
 8009362:	f7f7 fbe7 	bl	8000b34 <__addsf3>
 8009366:	4629      	mov	r1, r5
 8009368:	f7f7 fcec 	bl	8000d44 <__aeabi_fmul>
 800936c:	4973      	ldr	r1, [pc, #460]	; (800953c <__ieee754_asinf+0x264>)
 800936e:	f7f7 fbdf 	bl	8000b30 <__aeabi_fsub>
 8009372:	4629      	mov	r1, r5
 8009374:	f7f7 fce6 	bl	8000d44 <__aeabi_fmul>
 8009378:	4971      	ldr	r1, [pc, #452]	; (8009540 <__ieee754_asinf+0x268>)
 800937a:	f7f7 fbdb 	bl	8000b34 <__addsf3>
 800937e:	4629      	mov	r1, r5
 8009380:	f7f7 fce0 	bl	8000d44 <__aeabi_fmul>
 8009384:	496f      	ldr	r1, [pc, #444]	; (8009544 <__ieee754_asinf+0x26c>)
 8009386:	4606      	mov	r6, r0
 8009388:	4628      	mov	r0, r5
 800938a:	f7f7 fcdb 	bl	8000d44 <__aeabi_fmul>
 800938e:	496e      	ldr	r1, [pc, #440]	; (8009548 <__ieee754_asinf+0x270>)
 8009390:	f7f7 fbce 	bl	8000b30 <__aeabi_fsub>
 8009394:	4629      	mov	r1, r5
 8009396:	f7f7 fcd5 	bl	8000d44 <__aeabi_fmul>
 800939a:	496c      	ldr	r1, [pc, #432]	; (800954c <__ieee754_asinf+0x274>)
 800939c:	f7f7 fbca 	bl	8000b34 <__addsf3>
 80093a0:	4629      	mov	r1, r5
 80093a2:	f7f7 fccf 	bl	8000d44 <__aeabi_fmul>
 80093a6:	496a      	ldr	r1, [pc, #424]	; (8009550 <__ieee754_asinf+0x278>)
 80093a8:	f7f7 fbc2 	bl	8000b30 <__aeabi_fsub>
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7f7 fcc9 	bl	8000d44 <__aeabi_fmul>
 80093b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80093b6:	f7f7 fbbd 	bl	8000b34 <__addsf3>
 80093ba:	4601      	mov	r1, r0
 80093bc:	4630      	mov	r0, r6
 80093be:	f7f7 fd75 	bl	8000eac <__aeabi_fdiv>
 80093c2:	4621      	mov	r1, r4
 80093c4:	f7f7 fcbe 	bl	8000d44 <__aeabi_fmul>
 80093c8:	4601      	mov	r1, r0
 80093ca:	4620      	mov	r0, r4
 80093cc:	e797      	b.n	80092fe <__ieee754_asinf+0x26>
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff fc18 	bl	8008c04 <fabsf>
 80093d4:	4601      	mov	r1, r0
 80093d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80093da:	f7f7 fba9 	bl	8000b30 <__aeabi_fsub>
 80093de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80093e2:	f7f7 fcaf 	bl	8000d44 <__aeabi_fmul>
 80093e6:	4606      	mov	r6, r0
 80093e8:	4950      	ldr	r1, [pc, #320]	; (800952c <__ieee754_asinf+0x254>)
 80093ea:	f7f7 fcab 	bl	8000d44 <__aeabi_fmul>
 80093ee:	4950      	ldr	r1, [pc, #320]	; (8009530 <__ieee754_asinf+0x258>)
 80093f0:	f7f7 fba0 	bl	8000b34 <__addsf3>
 80093f4:	4631      	mov	r1, r6
 80093f6:	f7f7 fca5 	bl	8000d44 <__aeabi_fmul>
 80093fa:	494e      	ldr	r1, [pc, #312]	; (8009534 <__ieee754_asinf+0x25c>)
 80093fc:	f7f7 fb98 	bl	8000b30 <__aeabi_fsub>
 8009400:	4631      	mov	r1, r6
 8009402:	f7f7 fc9f 	bl	8000d44 <__aeabi_fmul>
 8009406:	494c      	ldr	r1, [pc, #304]	; (8009538 <__ieee754_asinf+0x260>)
 8009408:	f7f7 fb94 	bl	8000b34 <__addsf3>
 800940c:	4631      	mov	r1, r6
 800940e:	f7f7 fc99 	bl	8000d44 <__aeabi_fmul>
 8009412:	494a      	ldr	r1, [pc, #296]	; (800953c <__ieee754_asinf+0x264>)
 8009414:	f7f7 fb8c 	bl	8000b30 <__aeabi_fsub>
 8009418:	4631      	mov	r1, r6
 800941a:	f7f7 fc93 	bl	8000d44 <__aeabi_fmul>
 800941e:	4948      	ldr	r1, [pc, #288]	; (8009540 <__ieee754_asinf+0x268>)
 8009420:	f7f7 fb88 	bl	8000b34 <__addsf3>
 8009424:	4631      	mov	r1, r6
 8009426:	f7f7 fc8d 	bl	8000d44 <__aeabi_fmul>
 800942a:	4946      	ldr	r1, [pc, #280]	; (8009544 <__ieee754_asinf+0x26c>)
 800942c:	4681      	mov	r9, r0
 800942e:	4630      	mov	r0, r6
 8009430:	f7f7 fc88 	bl	8000d44 <__aeabi_fmul>
 8009434:	4944      	ldr	r1, [pc, #272]	; (8009548 <__ieee754_asinf+0x270>)
 8009436:	f7f7 fb7b 	bl	8000b30 <__aeabi_fsub>
 800943a:	4631      	mov	r1, r6
 800943c:	f7f7 fc82 	bl	8000d44 <__aeabi_fmul>
 8009440:	4942      	ldr	r1, [pc, #264]	; (800954c <__ieee754_asinf+0x274>)
 8009442:	f7f7 fb77 	bl	8000b34 <__addsf3>
 8009446:	4631      	mov	r1, r6
 8009448:	f7f7 fc7c 	bl	8000d44 <__aeabi_fmul>
 800944c:	4940      	ldr	r1, [pc, #256]	; (8009550 <__ieee754_asinf+0x278>)
 800944e:	f7f7 fb6f 	bl	8000b30 <__aeabi_fsub>
 8009452:	4631      	mov	r1, r6
 8009454:	f7f7 fc76 	bl	8000d44 <__aeabi_fmul>
 8009458:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800945c:	f7f7 fb6a 	bl	8000b34 <__addsf3>
 8009460:	4682      	mov	sl, r0
 8009462:	4630      	mov	r0, r6
 8009464:	f000 f9da 	bl	800981c <__ieee754_sqrtf>
 8009468:	4b3a      	ldr	r3, [pc, #232]	; (8009554 <__ieee754_asinf+0x27c>)
 800946a:	4607      	mov	r7, r0
 800946c:	4598      	cmp	r8, r3
 800946e:	dd1a      	ble.n	80094a6 <__ieee754_asinf+0x1ce>
 8009470:	4651      	mov	r1, sl
 8009472:	4648      	mov	r0, r9
 8009474:	f7f7 fd1a 	bl	8000eac <__aeabi_fdiv>
 8009478:	4639      	mov	r1, r7
 800947a:	f7f7 fc63 	bl	8000d44 <__aeabi_fmul>
 800947e:	4639      	mov	r1, r7
 8009480:	f7f7 fb58 	bl	8000b34 <__addsf3>
 8009484:	4601      	mov	r1, r0
 8009486:	f7f7 fb55 	bl	8000b34 <__addsf3>
 800948a:	4933      	ldr	r1, [pc, #204]	; (8009558 <__ieee754_asinf+0x280>)
 800948c:	f7f7 fb52 	bl	8000b34 <__addsf3>
 8009490:	4601      	mov	r1, r0
 8009492:	4823      	ldr	r0, [pc, #140]	; (8009520 <__ieee754_asinf+0x248>)
 8009494:	f7f7 fb4c 	bl	8000b30 <__aeabi_fsub>
 8009498:	2d00      	cmp	r5, #0
 800949a:	4604      	mov	r4, r0
 800949c:	f73f af4a 	bgt.w	8009334 <__ieee754_asinf+0x5c>
 80094a0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80094a4:	e735      	b.n	8009312 <__ieee754_asinf+0x3a>
 80094a6:	4601      	mov	r1, r0
 80094a8:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80094ac:	f7f7 fb42 	bl	8000b34 <__addsf3>
 80094b0:	4651      	mov	r1, sl
 80094b2:	4604      	mov	r4, r0
 80094b4:	4648      	mov	r0, r9
 80094b6:	f7f7 fcf9 	bl	8000eac <__aeabi_fdiv>
 80094ba:	4601      	mov	r1, r0
 80094bc:	4620      	mov	r0, r4
 80094be:	f7f7 fc41 	bl	8000d44 <__aeabi_fmul>
 80094c2:	f028 080f 	bic.w	r8, r8, #15
 80094c6:	4681      	mov	r9, r0
 80094c8:	4641      	mov	r1, r8
 80094ca:	4640      	mov	r0, r8
 80094cc:	f7f7 fc3a 	bl	8000d44 <__aeabi_fmul>
 80094d0:	4601      	mov	r1, r0
 80094d2:	4630      	mov	r0, r6
 80094d4:	f7f7 fb2c 	bl	8000b30 <__aeabi_fsub>
 80094d8:	4641      	mov	r1, r8
 80094da:	4604      	mov	r4, r0
 80094dc:	4638      	mov	r0, r7
 80094de:	f7f7 fb29 	bl	8000b34 <__addsf3>
 80094e2:	4601      	mov	r1, r0
 80094e4:	4620      	mov	r0, r4
 80094e6:	f7f7 fce1 	bl	8000eac <__aeabi_fdiv>
 80094ea:	4601      	mov	r1, r0
 80094ec:	f7f7 fb22 	bl	8000b34 <__addsf3>
 80094f0:	4601      	mov	r1, r0
 80094f2:	480c      	ldr	r0, [pc, #48]	; (8009524 <__ieee754_asinf+0x24c>)
 80094f4:	f7f7 fb1c 	bl	8000b30 <__aeabi_fsub>
 80094f8:	4601      	mov	r1, r0
 80094fa:	4648      	mov	r0, r9
 80094fc:	f7f7 fb18 	bl	8000b30 <__aeabi_fsub>
 8009500:	4641      	mov	r1, r8
 8009502:	4604      	mov	r4, r0
 8009504:	4640      	mov	r0, r8
 8009506:	f7f7 fb15 	bl	8000b34 <__addsf3>
 800950a:	4601      	mov	r1, r0
 800950c:	4813      	ldr	r0, [pc, #76]	; (800955c <__ieee754_asinf+0x284>)
 800950e:	f7f7 fb0f 	bl	8000b30 <__aeabi_fsub>
 8009512:	4601      	mov	r1, r0
 8009514:	4620      	mov	r0, r4
 8009516:	f7f7 fb0b 	bl	8000b30 <__aeabi_fsub>
 800951a:	4601      	mov	r1, r0
 800951c:	480f      	ldr	r0, [pc, #60]	; (800955c <__ieee754_asinf+0x284>)
 800951e:	e7b9      	b.n	8009494 <__ieee754_asinf+0x1bc>
 8009520:	3fc90fdb 	.word	0x3fc90fdb
 8009524:	b33bbd2e 	.word	0xb33bbd2e
 8009528:	7149f2ca 	.word	0x7149f2ca
 800952c:	3811ef08 	.word	0x3811ef08
 8009530:	3a4f7f04 	.word	0x3a4f7f04
 8009534:	3d241146 	.word	0x3d241146
 8009538:	3e4e0aa8 	.word	0x3e4e0aa8
 800953c:	3ea6b090 	.word	0x3ea6b090
 8009540:	3e2aaaab 	.word	0x3e2aaaab
 8009544:	3d9dc62e 	.word	0x3d9dc62e
 8009548:	3f303361 	.word	0x3f303361
 800954c:	4001572d 	.word	0x4001572d
 8009550:	4019d139 	.word	0x4019d139
 8009554:	3f799999 	.word	0x3f799999
 8009558:	333bbd2e 	.word	0x333bbd2e
 800955c:	3f490fdb 	.word	0x3f490fdb

08009560 <__ieee754_rem_pio2f>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4aa0      	ldr	r2, [pc, #640]	; (80097e8 <__ieee754_rem_pio2f+0x288>)
 8009566:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800956a:	4296      	cmp	r6, r2
 800956c:	460c      	mov	r4, r1
 800956e:	4682      	mov	sl, r0
 8009570:	b087      	sub	sp, #28
 8009572:	dc04      	bgt.n	800957e <__ieee754_rem_pio2f+0x1e>
 8009574:	2300      	movs	r3, #0
 8009576:	6008      	str	r0, [r1, #0]
 8009578:	604b      	str	r3, [r1, #4]
 800957a:	2500      	movs	r5, #0
 800957c:	e01a      	b.n	80095b4 <__ieee754_rem_pio2f+0x54>
 800957e:	4a9b      	ldr	r2, [pc, #620]	; (80097ec <__ieee754_rem_pio2f+0x28c>)
 8009580:	4296      	cmp	r6, r2
 8009582:	dc4b      	bgt.n	800961c <__ieee754_rem_pio2f+0xbc>
 8009584:	2800      	cmp	r0, #0
 8009586:	499a      	ldr	r1, [pc, #616]	; (80097f0 <__ieee754_rem_pio2f+0x290>)
 8009588:	4f9a      	ldr	r7, [pc, #616]	; (80097f4 <__ieee754_rem_pio2f+0x294>)
 800958a:	f026 060f 	bic.w	r6, r6, #15
 800958e:	dd23      	ble.n	80095d8 <__ieee754_rem_pio2f+0x78>
 8009590:	f7f7 face 	bl	8000b30 <__aeabi_fsub>
 8009594:	42be      	cmp	r6, r7
 8009596:	4605      	mov	r5, r0
 8009598:	d010      	beq.n	80095bc <__ieee754_rem_pio2f+0x5c>
 800959a:	4997      	ldr	r1, [pc, #604]	; (80097f8 <__ieee754_rem_pio2f+0x298>)
 800959c:	f7f7 fac8 	bl	8000b30 <__aeabi_fsub>
 80095a0:	4601      	mov	r1, r0
 80095a2:	6020      	str	r0, [r4, #0]
 80095a4:	4628      	mov	r0, r5
 80095a6:	f7f7 fac3 	bl	8000b30 <__aeabi_fsub>
 80095aa:	4993      	ldr	r1, [pc, #588]	; (80097f8 <__ieee754_rem_pio2f+0x298>)
 80095ac:	f7f7 fac0 	bl	8000b30 <__aeabi_fsub>
 80095b0:	2501      	movs	r5, #1
 80095b2:	6060      	str	r0, [r4, #4]
 80095b4:	4628      	mov	r0, r5
 80095b6:	b007      	add	sp, #28
 80095b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095bc:	498f      	ldr	r1, [pc, #572]	; (80097fc <__ieee754_rem_pio2f+0x29c>)
 80095be:	f7f7 fab7 	bl	8000b30 <__aeabi_fsub>
 80095c2:	498f      	ldr	r1, [pc, #572]	; (8009800 <__ieee754_rem_pio2f+0x2a0>)
 80095c4:	4605      	mov	r5, r0
 80095c6:	f7f7 fab3 	bl	8000b30 <__aeabi_fsub>
 80095ca:	4601      	mov	r1, r0
 80095cc:	6020      	str	r0, [r4, #0]
 80095ce:	4628      	mov	r0, r5
 80095d0:	f7f7 faae 	bl	8000b30 <__aeabi_fsub>
 80095d4:	498a      	ldr	r1, [pc, #552]	; (8009800 <__ieee754_rem_pio2f+0x2a0>)
 80095d6:	e7e9      	b.n	80095ac <__ieee754_rem_pio2f+0x4c>
 80095d8:	f7f7 faac 	bl	8000b34 <__addsf3>
 80095dc:	42be      	cmp	r6, r7
 80095de:	4605      	mov	r5, r0
 80095e0:	d00e      	beq.n	8009600 <__ieee754_rem_pio2f+0xa0>
 80095e2:	4985      	ldr	r1, [pc, #532]	; (80097f8 <__ieee754_rem_pio2f+0x298>)
 80095e4:	f7f7 faa6 	bl	8000b34 <__addsf3>
 80095e8:	4601      	mov	r1, r0
 80095ea:	6020      	str	r0, [r4, #0]
 80095ec:	4628      	mov	r0, r5
 80095ee:	f7f7 fa9f 	bl	8000b30 <__aeabi_fsub>
 80095f2:	4981      	ldr	r1, [pc, #516]	; (80097f8 <__ieee754_rem_pio2f+0x298>)
 80095f4:	f7f7 fa9e 	bl	8000b34 <__addsf3>
 80095f8:	f04f 35ff 	mov.w	r5, #4294967295
 80095fc:	6060      	str	r0, [r4, #4]
 80095fe:	e7d9      	b.n	80095b4 <__ieee754_rem_pio2f+0x54>
 8009600:	497e      	ldr	r1, [pc, #504]	; (80097fc <__ieee754_rem_pio2f+0x29c>)
 8009602:	f7f7 fa97 	bl	8000b34 <__addsf3>
 8009606:	497e      	ldr	r1, [pc, #504]	; (8009800 <__ieee754_rem_pio2f+0x2a0>)
 8009608:	4605      	mov	r5, r0
 800960a:	f7f7 fa93 	bl	8000b34 <__addsf3>
 800960e:	4601      	mov	r1, r0
 8009610:	6020      	str	r0, [r4, #0]
 8009612:	4628      	mov	r0, r5
 8009614:	f7f7 fa8c 	bl	8000b30 <__aeabi_fsub>
 8009618:	4979      	ldr	r1, [pc, #484]	; (8009800 <__ieee754_rem_pio2f+0x2a0>)
 800961a:	e7eb      	b.n	80095f4 <__ieee754_rem_pio2f+0x94>
 800961c:	4a79      	ldr	r2, [pc, #484]	; (8009804 <__ieee754_rem_pio2f+0x2a4>)
 800961e:	4296      	cmp	r6, r2
 8009620:	f300 8091 	bgt.w	8009746 <__ieee754_rem_pio2f+0x1e6>
 8009624:	f7ff faee 	bl	8008c04 <fabsf>
 8009628:	4977      	ldr	r1, [pc, #476]	; (8009808 <__ieee754_rem_pio2f+0x2a8>)
 800962a:	4607      	mov	r7, r0
 800962c:	f7f7 fb8a 	bl	8000d44 <__aeabi_fmul>
 8009630:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009634:	f7f7 fa7e 	bl	8000b34 <__addsf3>
 8009638:	f7f7 fd60 	bl	80010fc <__aeabi_f2iz>
 800963c:	4605      	mov	r5, r0
 800963e:	f7f7 fb2d 	bl	8000c9c <__aeabi_i2f>
 8009642:	496b      	ldr	r1, [pc, #428]	; (80097f0 <__ieee754_rem_pio2f+0x290>)
 8009644:	4681      	mov	r9, r0
 8009646:	f7f7 fb7d 	bl	8000d44 <__aeabi_fmul>
 800964a:	4601      	mov	r1, r0
 800964c:	4638      	mov	r0, r7
 800964e:	f7f7 fa6f 	bl	8000b30 <__aeabi_fsub>
 8009652:	4969      	ldr	r1, [pc, #420]	; (80097f8 <__ieee754_rem_pio2f+0x298>)
 8009654:	4680      	mov	r8, r0
 8009656:	4648      	mov	r0, r9
 8009658:	f7f7 fb74 	bl	8000d44 <__aeabi_fmul>
 800965c:	2d1f      	cmp	r5, #31
 800965e:	4607      	mov	r7, r0
 8009660:	dc0c      	bgt.n	800967c <__ieee754_rem_pio2f+0x11c>
 8009662:	4a6a      	ldr	r2, [pc, #424]	; (800980c <__ieee754_rem_pio2f+0x2ac>)
 8009664:	1e69      	subs	r1, r5, #1
 8009666:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800966a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800966e:	4293      	cmp	r3, r2
 8009670:	d004      	beq.n	800967c <__ieee754_rem_pio2f+0x11c>
 8009672:	4639      	mov	r1, r7
 8009674:	4640      	mov	r0, r8
 8009676:	f7f7 fa5b 	bl	8000b30 <__aeabi_fsub>
 800967a:	e00b      	b.n	8009694 <__ieee754_rem_pio2f+0x134>
 800967c:	4639      	mov	r1, r7
 800967e:	4640      	mov	r0, r8
 8009680:	f7f7 fa56 	bl	8000b30 <__aeabi_fsub>
 8009684:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009688:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800968c:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8009690:	2e08      	cmp	r6, #8
 8009692:	dc01      	bgt.n	8009698 <__ieee754_rem_pio2f+0x138>
 8009694:	6020      	str	r0, [r4, #0]
 8009696:	e026      	b.n	80096e6 <__ieee754_rem_pio2f+0x186>
 8009698:	4958      	ldr	r1, [pc, #352]	; (80097fc <__ieee754_rem_pio2f+0x29c>)
 800969a:	4648      	mov	r0, r9
 800969c:	f7f7 fb52 	bl	8000d44 <__aeabi_fmul>
 80096a0:	4607      	mov	r7, r0
 80096a2:	4601      	mov	r1, r0
 80096a4:	4640      	mov	r0, r8
 80096a6:	f7f7 fa43 	bl	8000b30 <__aeabi_fsub>
 80096aa:	4601      	mov	r1, r0
 80096ac:	4606      	mov	r6, r0
 80096ae:	4640      	mov	r0, r8
 80096b0:	f7f7 fa3e 	bl	8000b30 <__aeabi_fsub>
 80096b4:	4639      	mov	r1, r7
 80096b6:	f7f7 fa3b 	bl	8000b30 <__aeabi_fsub>
 80096ba:	4607      	mov	r7, r0
 80096bc:	4950      	ldr	r1, [pc, #320]	; (8009800 <__ieee754_rem_pio2f+0x2a0>)
 80096be:	4648      	mov	r0, r9
 80096c0:	f7f7 fb40 	bl	8000d44 <__aeabi_fmul>
 80096c4:	4639      	mov	r1, r7
 80096c6:	f7f7 fa33 	bl	8000b30 <__aeabi_fsub>
 80096ca:	4601      	mov	r1, r0
 80096cc:	4607      	mov	r7, r0
 80096ce:	4630      	mov	r0, r6
 80096d0:	f7f7 fa2e 	bl	8000b30 <__aeabi_fsub>
 80096d4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80096d8:	ebab 0b03 	sub.w	fp, fp, r3
 80096dc:	f1bb 0f19 	cmp.w	fp, #25
 80096e0:	dc16      	bgt.n	8009710 <__ieee754_rem_pio2f+0x1b0>
 80096e2:	46b0      	mov	r8, r6
 80096e4:	6020      	str	r0, [r4, #0]
 80096e6:	6826      	ldr	r6, [r4, #0]
 80096e8:	4640      	mov	r0, r8
 80096ea:	4631      	mov	r1, r6
 80096ec:	f7f7 fa20 	bl	8000b30 <__aeabi_fsub>
 80096f0:	4639      	mov	r1, r7
 80096f2:	f7f7 fa1d 	bl	8000b30 <__aeabi_fsub>
 80096f6:	f1ba 0f00 	cmp.w	sl, #0
 80096fa:	6060      	str	r0, [r4, #4]
 80096fc:	f6bf af5a 	bge.w	80095b4 <__ieee754_rem_pio2f+0x54>
 8009700:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009704:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009708:	6026      	str	r6, [r4, #0]
 800970a:	6060      	str	r0, [r4, #4]
 800970c:	426d      	negs	r5, r5
 800970e:	e751      	b.n	80095b4 <__ieee754_rem_pio2f+0x54>
 8009710:	493f      	ldr	r1, [pc, #252]	; (8009810 <__ieee754_rem_pio2f+0x2b0>)
 8009712:	4648      	mov	r0, r9
 8009714:	f7f7 fb16 	bl	8000d44 <__aeabi_fmul>
 8009718:	4607      	mov	r7, r0
 800971a:	4601      	mov	r1, r0
 800971c:	4630      	mov	r0, r6
 800971e:	f7f7 fa07 	bl	8000b30 <__aeabi_fsub>
 8009722:	4601      	mov	r1, r0
 8009724:	4680      	mov	r8, r0
 8009726:	4630      	mov	r0, r6
 8009728:	f7f7 fa02 	bl	8000b30 <__aeabi_fsub>
 800972c:	4639      	mov	r1, r7
 800972e:	f7f7 f9ff 	bl	8000b30 <__aeabi_fsub>
 8009732:	4606      	mov	r6, r0
 8009734:	4937      	ldr	r1, [pc, #220]	; (8009814 <__ieee754_rem_pio2f+0x2b4>)
 8009736:	4648      	mov	r0, r9
 8009738:	f7f7 fb04 	bl	8000d44 <__aeabi_fmul>
 800973c:	4631      	mov	r1, r6
 800973e:	f7f7 f9f7 	bl	8000b30 <__aeabi_fsub>
 8009742:	4607      	mov	r7, r0
 8009744:	e795      	b.n	8009672 <__ieee754_rem_pio2f+0x112>
 8009746:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800974a:	db05      	blt.n	8009758 <__ieee754_rem_pio2f+0x1f8>
 800974c:	4601      	mov	r1, r0
 800974e:	f7f7 f9ef 	bl	8000b30 <__aeabi_fsub>
 8009752:	6060      	str	r0, [r4, #4]
 8009754:	6020      	str	r0, [r4, #0]
 8009756:	e710      	b.n	800957a <__ieee754_rem_pio2f+0x1a>
 8009758:	15f7      	asrs	r7, r6, #23
 800975a:	3f86      	subs	r7, #134	; 0x86
 800975c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8009760:	4630      	mov	r0, r6
 8009762:	f7f7 fccb 	bl	80010fc <__aeabi_f2iz>
 8009766:	f7f7 fa99 	bl	8000c9c <__aeabi_i2f>
 800976a:	4601      	mov	r1, r0
 800976c:	9003      	str	r0, [sp, #12]
 800976e:	4630      	mov	r0, r6
 8009770:	f7f7 f9de 	bl	8000b30 <__aeabi_fsub>
 8009774:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009778:	f7f7 fae4 	bl	8000d44 <__aeabi_fmul>
 800977c:	4606      	mov	r6, r0
 800977e:	f7f7 fcbd 	bl	80010fc <__aeabi_f2iz>
 8009782:	f7f7 fa8b 	bl	8000c9c <__aeabi_i2f>
 8009786:	4601      	mov	r1, r0
 8009788:	9004      	str	r0, [sp, #16]
 800978a:	4605      	mov	r5, r0
 800978c:	4630      	mov	r0, r6
 800978e:	f7f7 f9cf 	bl	8000b30 <__aeabi_fsub>
 8009792:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009796:	f7f7 fad5 	bl	8000d44 <__aeabi_fmul>
 800979a:	2100      	movs	r1, #0
 800979c:	9005      	str	r0, [sp, #20]
 800979e:	f7f7 fc65 	bl	800106c <__aeabi_fcmpeq>
 80097a2:	b1f0      	cbz	r0, 80097e2 <__ieee754_rem_pio2f+0x282>
 80097a4:	2100      	movs	r1, #0
 80097a6:	4628      	mov	r0, r5
 80097a8:	f7f7 fc60 	bl	800106c <__aeabi_fcmpeq>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	bf14      	ite	ne
 80097b0:	2301      	movne	r3, #1
 80097b2:	2302      	moveq	r3, #2
 80097b4:	4a18      	ldr	r2, [pc, #96]	; (8009818 <__ieee754_rem_pio2f+0x2b8>)
 80097b6:	4621      	mov	r1, r4
 80097b8:	9201      	str	r2, [sp, #4]
 80097ba:	2202      	movs	r2, #2
 80097bc:	a803      	add	r0, sp, #12
 80097be:	9200      	str	r2, [sp, #0]
 80097c0:	463a      	mov	r2, r7
 80097c2:	f000 fdbb 	bl	800a33c <__kernel_rem_pio2f>
 80097c6:	f1ba 0f00 	cmp.w	sl, #0
 80097ca:	4605      	mov	r5, r0
 80097cc:	f6bf aef2 	bge.w	80095b4 <__ieee754_rem_pio2f+0x54>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	6863      	ldr	r3, [r4, #4]
 80097da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80097de:	6063      	str	r3, [r4, #4]
 80097e0:	e794      	b.n	800970c <__ieee754_rem_pio2f+0x1ac>
 80097e2:	2303      	movs	r3, #3
 80097e4:	e7e6      	b.n	80097b4 <__ieee754_rem_pio2f+0x254>
 80097e6:	bf00      	nop
 80097e8:	3f490fd8 	.word	0x3f490fd8
 80097ec:	4016cbe3 	.word	0x4016cbe3
 80097f0:	3fc90f80 	.word	0x3fc90f80
 80097f4:	3fc90fd0 	.word	0x3fc90fd0
 80097f8:	37354443 	.word	0x37354443
 80097fc:	37354400 	.word	0x37354400
 8009800:	2e85a308 	.word	0x2e85a308
 8009804:	43490f80 	.word	0x43490f80
 8009808:	3f22f984 	.word	0x3f22f984
 800980c:	0800ba30 	.word	0x0800ba30
 8009810:	2e85a300 	.word	0x2e85a300
 8009814:	248d3132 	.word	0x248d3132
 8009818:	0800bab0 	.word	0x0800bab0

0800981c <__ieee754_sqrtf>:
 800981c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009820:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4603      	mov	r3, r0
 8009828:	4604      	mov	r4, r0
 800982a:	d309      	bcc.n	8009840 <__ieee754_sqrtf+0x24>
 800982c:	4601      	mov	r1, r0
 800982e:	f7f7 fa89 	bl	8000d44 <__aeabi_fmul>
 8009832:	4601      	mov	r1, r0
 8009834:	4620      	mov	r0, r4
 8009836:	f7f7 f97d 	bl	8000b34 <__addsf3>
 800983a:	4604      	mov	r4, r0
 800983c:	4620      	mov	r0, r4
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	2a00      	cmp	r2, #0
 8009842:	d0fb      	beq.n	800983c <__ieee754_sqrtf+0x20>
 8009844:	2800      	cmp	r0, #0
 8009846:	da06      	bge.n	8009856 <__ieee754_sqrtf+0x3a>
 8009848:	4601      	mov	r1, r0
 800984a:	f7f7 f971 	bl	8000b30 <__aeabi_fsub>
 800984e:	4601      	mov	r1, r0
 8009850:	f7f7 fb2c 	bl	8000eac <__aeabi_fdiv>
 8009854:	e7f1      	b.n	800983a <__ieee754_sqrtf+0x1e>
 8009856:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800985a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800985e:	d029      	beq.n	80098b4 <__ieee754_sqrtf+0x98>
 8009860:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8009864:	07cb      	lsls	r3, r1, #31
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800986e:	f04f 0419 	mov.w	r4, #25
 8009872:	461e      	mov	r6, r3
 8009874:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009878:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800987c:	bf58      	it	pl
 800987e:	0052      	lslpl	r2, r2, #1
 8009880:	1040      	asrs	r0, r0, #1
 8009882:	0052      	lsls	r2, r2, #1
 8009884:	1875      	adds	r5, r6, r1
 8009886:	4295      	cmp	r5, r2
 8009888:	bfde      	ittt	le
 800988a:	186e      	addle	r6, r5, r1
 800988c:	1b52      	suble	r2, r2, r5
 800988e:	185b      	addle	r3, r3, r1
 8009890:	3c01      	subs	r4, #1
 8009892:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009896:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800989a:	d1f3      	bne.n	8009884 <__ieee754_sqrtf+0x68>
 800989c:	b112      	cbz	r2, 80098a4 <__ieee754_sqrtf+0x88>
 800989e:	3301      	adds	r3, #1
 80098a0:	f023 0301 	bic.w	r3, r3, #1
 80098a4:	105c      	asrs	r4, r3, #1
 80098a6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80098aa:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 80098ae:	e7c5      	b.n	800983c <__ieee754_sqrtf+0x20>
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	3201      	adds	r2, #1
 80098b4:	0218      	lsls	r0, r3, #8
 80098b6:	d5fb      	bpl.n	80098b0 <__ieee754_sqrtf+0x94>
 80098b8:	3a01      	subs	r2, #1
 80098ba:	1a89      	subs	r1, r1, r2
 80098bc:	e7d0      	b.n	8009860 <__ieee754_sqrtf+0x44>
	...

080098c0 <__kernel_cos>:
 80098c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80098c8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80098cc:	4680      	mov	r8, r0
 80098ce:	460f      	mov	r7, r1
 80098d0:	e9cd 2300 	strd	r2, r3, [sp]
 80098d4:	da04      	bge.n	80098e0 <__kernel_cos+0x20>
 80098d6:	f7f7 f8af 	bl	8000a38 <__aeabi_d2iz>
 80098da:	2800      	cmp	r0, #0
 80098dc:	f000 8086 	beq.w	80099ec <__kernel_cos+0x12c>
 80098e0:	4642      	mov	r2, r8
 80098e2:	463b      	mov	r3, r7
 80098e4:	4640      	mov	r0, r8
 80098e6:	4639      	mov	r1, r7
 80098e8:	f7f6 fdf6 	bl	80004d8 <__aeabi_dmul>
 80098ec:	2200      	movs	r2, #0
 80098ee:	4b4e      	ldr	r3, [pc, #312]	; (8009a28 <__kernel_cos+0x168>)
 80098f0:	4604      	mov	r4, r0
 80098f2:	460d      	mov	r5, r1
 80098f4:	f7f6 fdf0 	bl	80004d8 <__aeabi_dmul>
 80098f8:	a33f      	add	r3, pc, #252	; (adr r3, 80099f8 <__kernel_cos+0x138>)
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	4682      	mov	sl, r0
 8009900:	468b      	mov	fp, r1
 8009902:	4620      	mov	r0, r4
 8009904:	4629      	mov	r1, r5
 8009906:	f7f6 fde7 	bl	80004d8 <__aeabi_dmul>
 800990a:	a33d      	add	r3, pc, #244	; (adr r3, 8009a00 <__kernel_cos+0x140>)
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	f7f6 fc2c 	bl	800016c <__adddf3>
 8009914:	4622      	mov	r2, r4
 8009916:	462b      	mov	r3, r5
 8009918:	f7f6 fdde 	bl	80004d8 <__aeabi_dmul>
 800991c:	a33a      	add	r3, pc, #232	; (adr r3, 8009a08 <__kernel_cos+0x148>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f7f6 fc21 	bl	8000168 <__aeabi_dsub>
 8009926:	4622      	mov	r2, r4
 8009928:	462b      	mov	r3, r5
 800992a:	f7f6 fdd5 	bl	80004d8 <__aeabi_dmul>
 800992e:	a338      	add	r3, pc, #224	; (adr r3, 8009a10 <__kernel_cos+0x150>)
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7f6 fc1a 	bl	800016c <__adddf3>
 8009938:	4622      	mov	r2, r4
 800993a:	462b      	mov	r3, r5
 800993c:	f7f6 fdcc 	bl	80004d8 <__aeabi_dmul>
 8009940:	a335      	add	r3, pc, #212	; (adr r3, 8009a18 <__kernel_cos+0x158>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f6 fc0f 	bl	8000168 <__aeabi_dsub>
 800994a:	4622      	mov	r2, r4
 800994c:	462b      	mov	r3, r5
 800994e:	f7f6 fdc3 	bl	80004d8 <__aeabi_dmul>
 8009952:	a333      	add	r3, pc, #204	; (adr r3, 8009a20 <__kernel_cos+0x160>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f7f6 fc08 	bl	800016c <__adddf3>
 800995c:	4622      	mov	r2, r4
 800995e:	462b      	mov	r3, r5
 8009960:	f7f6 fdba 	bl	80004d8 <__aeabi_dmul>
 8009964:	4622      	mov	r2, r4
 8009966:	462b      	mov	r3, r5
 8009968:	f7f6 fdb6 	bl	80004d8 <__aeabi_dmul>
 800996c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009970:	4604      	mov	r4, r0
 8009972:	460d      	mov	r5, r1
 8009974:	4640      	mov	r0, r8
 8009976:	4639      	mov	r1, r7
 8009978:	f7f6 fdae 	bl	80004d8 <__aeabi_dmul>
 800997c:	460b      	mov	r3, r1
 800997e:	4602      	mov	r2, r0
 8009980:	4629      	mov	r1, r5
 8009982:	4620      	mov	r0, r4
 8009984:	f7f6 fbf0 	bl	8000168 <__aeabi_dsub>
 8009988:	4b28      	ldr	r3, [pc, #160]	; (8009a2c <__kernel_cos+0x16c>)
 800998a:	4680      	mov	r8, r0
 800998c:	429e      	cmp	r6, r3
 800998e:	4689      	mov	r9, r1
 8009990:	dc0e      	bgt.n	80099b0 <__kernel_cos+0xf0>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4650      	mov	r0, sl
 8009998:	4659      	mov	r1, fp
 800999a:	f7f6 fbe5 	bl	8000168 <__aeabi_dsub>
 800999e:	4602      	mov	r2, r0
 80099a0:	2000      	movs	r0, #0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4922      	ldr	r1, [pc, #136]	; (8009a30 <__kernel_cos+0x170>)
 80099a6:	f7f6 fbdf 	bl	8000168 <__aeabi_dsub>
 80099aa:	b003      	add	sp, #12
 80099ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b0:	2400      	movs	r4, #0
 80099b2:	4b20      	ldr	r3, [pc, #128]	; (8009a34 <__kernel_cos+0x174>)
 80099b4:	4622      	mov	r2, r4
 80099b6:	429e      	cmp	r6, r3
 80099b8:	bfcc      	ite	gt
 80099ba:	4d1f      	ldrgt	r5, [pc, #124]	; (8009a38 <__kernel_cos+0x178>)
 80099bc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80099c0:	462b      	mov	r3, r5
 80099c2:	2000      	movs	r0, #0
 80099c4:	491a      	ldr	r1, [pc, #104]	; (8009a30 <__kernel_cos+0x170>)
 80099c6:	f7f6 fbcf 	bl	8000168 <__aeabi_dsub>
 80099ca:	4622      	mov	r2, r4
 80099cc:	4606      	mov	r6, r0
 80099ce:	460f      	mov	r7, r1
 80099d0:	462b      	mov	r3, r5
 80099d2:	4650      	mov	r0, sl
 80099d4:	4659      	mov	r1, fp
 80099d6:	f7f6 fbc7 	bl	8000168 <__aeabi_dsub>
 80099da:	4642      	mov	r2, r8
 80099dc:	464b      	mov	r3, r9
 80099de:	f7f6 fbc3 	bl	8000168 <__aeabi_dsub>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	e7dc      	b.n	80099a6 <__kernel_cos+0xe6>
 80099ec:	2000      	movs	r0, #0
 80099ee:	4910      	ldr	r1, [pc, #64]	; (8009a30 <__kernel_cos+0x170>)
 80099f0:	e7db      	b.n	80099aa <__kernel_cos+0xea>
 80099f2:	bf00      	nop
 80099f4:	f3af 8000 	nop.w
 80099f8:	be8838d4 	.word	0xbe8838d4
 80099fc:	bda8fae9 	.word	0xbda8fae9
 8009a00:	bdb4b1c4 	.word	0xbdb4b1c4
 8009a04:	3e21ee9e 	.word	0x3e21ee9e
 8009a08:	809c52ad 	.word	0x809c52ad
 8009a0c:	3e927e4f 	.word	0x3e927e4f
 8009a10:	19cb1590 	.word	0x19cb1590
 8009a14:	3efa01a0 	.word	0x3efa01a0
 8009a18:	16c15177 	.word	0x16c15177
 8009a1c:	3f56c16c 	.word	0x3f56c16c
 8009a20:	5555554c 	.word	0x5555554c
 8009a24:	3fa55555 	.word	0x3fa55555
 8009a28:	3fe00000 	.word	0x3fe00000
 8009a2c:	3fd33332 	.word	0x3fd33332
 8009a30:	3ff00000 	.word	0x3ff00000
 8009a34:	3fe90000 	.word	0x3fe90000
 8009a38:	3fd20000 	.word	0x3fd20000

08009a3c <__kernel_rem_pio2>:
 8009a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009a44:	9308      	str	r3, [sp, #32]
 8009a46:	9101      	str	r1, [sp, #4]
 8009a48:	4bc0      	ldr	r3, [pc, #768]	; (8009d4c <__kernel_rem_pio2+0x310>)
 8009a4a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009a4c:	f112 0f14 	cmn.w	r2, #20
 8009a50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a54:	bfa8      	it	ge
 8009a56:	1ed4      	subge	r4, r2, #3
 8009a58:	9304      	str	r3, [sp, #16]
 8009a5a:	9b08      	ldr	r3, [sp, #32]
 8009a5c:	bfb8      	it	lt
 8009a5e:	2400      	movlt	r4, #0
 8009a60:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a64:	9306      	str	r3, [sp, #24]
 8009a66:	bfa4      	itt	ge
 8009a68:	2318      	movge	r3, #24
 8009a6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009a6e:	f06f 0317 	mvn.w	r3, #23
 8009a72:	fb04 3303 	mla	r3, r4, r3, r3
 8009a76:	eb03 0a02 	add.w	sl, r3, r2
 8009a7a:	9a06      	ldr	r2, [sp, #24]
 8009a7c:	9b04      	ldr	r3, [sp, #16]
 8009a7e:	1aa7      	subs	r7, r4, r2
 8009a80:	eb03 0802 	add.w	r8, r3, r2
 8009a84:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009a86:	2500      	movs	r5, #0
 8009a88:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9009      	str	r0, [sp, #36]	; 0x24
 8009a92:	ae20      	add	r6, sp, #128	; 0x80
 8009a94:	4545      	cmp	r5, r8
 8009a96:	dd19      	ble.n	8009acc <__kernel_rem_pio2+0x90>
 8009a98:	9b08      	ldr	r3, [sp, #32]
 8009a9a:	aa20      	add	r2, sp, #128	; 0x80
 8009a9c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009aa0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009aa4:	f1c3 0301 	rsb	r3, r3, #1
 8009aa8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	9b07      	ldr	r3, [sp, #28]
 8009ab0:	9a04      	ldr	r2, [sp, #16]
 8009ab2:	4443      	add	r3, r8
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	db35      	blt.n	8009b24 <__kernel_rem_pio2+0xe8>
 8009ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aba:	2200      	movs	r2, #0
 8009abc:	f1a3 0908 	sub.w	r9, r3, #8
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	462f      	mov	r7, r5
 8009ac4:	2600      	movs	r6, #0
 8009ac6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009aca:	e01f      	b.n	8009b0c <__kernel_rem_pio2+0xd0>
 8009acc:	42ef      	cmn	r7, r5
 8009ace:	d40b      	bmi.n	8009ae8 <__kernel_rem_pio2+0xac>
 8009ad0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009ad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ad8:	f7f6 fc94 	bl	8000404 <__aeabi_i2d>
 8009adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ae0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	e7d5      	b.n	8009a94 <__kernel_rem_pio2+0x58>
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4619      	mov	r1, r3
 8009aec:	e7f8      	b.n	8009ae0 <__kernel_rem_pio2+0xa4>
 8009aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af2:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009af6:	f7f6 fcef 	bl	80004d8 <__aeabi_dmul>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b02:	f7f6 fb33 	bl	800016c <__adddf3>
 8009b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b0a:	3601      	adds	r6, #1
 8009b0c:	9b06      	ldr	r3, [sp, #24]
 8009b0e:	3f08      	subs	r7, #8
 8009b10:	429e      	cmp	r6, r3
 8009b12:	ddec      	ble.n	8009aee <__kernel_rem_pio2+0xb2>
 8009b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b18:	3508      	adds	r5, #8
 8009b1a:	e8eb 2302 	strd	r2, r3, [fp], #8
 8009b1e:	f108 0801 	add.w	r8, r8, #1
 8009b22:	e7c4      	b.n	8009aae <__kernel_rem_pio2+0x72>
 8009b24:	9b04      	ldr	r3, [sp, #16]
 8009b26:	aa0c      	add	r2, sp, #48	; 0x30
 8009b28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b2e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009b30:	9f04      	ldr	r7, [sp, #16]
 8009b32:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009b36:	930a      	str	r3, [sp, #40]	; 0x28
 8009b38:	463e      	mov	r6, r7
 8009b3a:	ab98      	add	r3, sp, #608	; 0x260
 8009b3c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009b40:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b44:	f8cd b008 	str.w	fp, [sp, #8]
 8009b48:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009b4c:	2e00      	cmp	r6, #0
 8009b4e:	dc71      	bgt.n	8009c34 <__kernel_rem_pio2+0x1f8>
 8009b50:	4652      	mov	r2, sl
 8009b52:	4620      	mov	r0, r4
 8009b54:	4629      	mov	r1, r5
 8009b56:	f001 fa5b 	bl	800b010 <scalbn>
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009b60:	4604      	mov	r4, r0
 8009b62:	460d      	mov	r5, r1
 8009b64:	f7f6 fcb8 	bl	80004d8 <__aeabi_dmul>
 8009b68:	f001 f9d2 	bl	800af10 <floor>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4b78      	ldr	r3, [pc, #480]	; (8009d50 <__kernel_rem_pio2+0x314>)
 8009b70:	f7f6 fcb2 	bl	80004d8 <__aeabi_dmul>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4620      	mov	r0, r4
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7f6 faf4 	bl	8000168 <__aeabi_dsub>
 8009b80:	460d      	mov	r5, r1
 8009b82:	4604      	mov	r4, r0
 8009b84:	f7f6 ff58 	bl	8000a38 <__aeabi_d2iz>
 8009b88:	9007      	str	r0, [sp, #28]
 8009b8a:	f7f6 fc3b 	bl	8000404 <__aeabi_i2d>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4620      	mov	r0, r4
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7f6 fae7 	bl	8000168 <__aeabi_dsub>
 8009b9a:	f1ba 0f00 	cmp.w	sl, #0
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4689      	mov	r9, r1
 8009ba2:	dd70      	ble.n	8009c86 <__kernel_rem_pio2+0x24a>
 8009ba4:	1e7a      	subs	r2, r7, #1
 8009ba6:	ab0c      	add	r3, sp, #48	; 0x30
 8009ba8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009bac:	9c07      	ldr	r4, [sp, #28]
 8009bae:	f1ca 0118 	rsb	r1, sl, #24
 8009bb2:	fa40 f301 	asr.w	r3, r0, r1
 8009bb6:	441c      	add	r4, r3
 8009bb8:	408b      	lsls	r3, r1
 8009bba:	1ac0      	subs	r0, r0, r3
 8009bbc:	ab0c      	add	r3, sp, #48	; 0x30
 8009bbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009bc2:	f1ca 0317 	rsb	r3, sl, #23
 8009bc6:	9407      	str	r4, [sp, #28]
 8009bc8:	fa40 f303 	asr.w	r3, r0, r3
 8009bcc:	9302      	str	r3, [sp, #8]
 8009bce:	9b02      	ldr	r3, [sp, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	dd66      	ble.n	8009ca2 <__kernel_rem_pio2+0x266>
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009bda:	4614      	mov	r4, r2
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	3301      	adds	r3, #1
 8009be0:	9307      	str	r3, [sp, #28]
 8009be2:	4297      	cmp	r7, r2
 8009be4:	f300 809f 	bgt.w	8009d26 <__kernel_rem_pio2+0x2ea>
 8009be8:	f1ba 0f00 	cmp.w	sl, #0
 8009bec:	dd07      	ble.n	8009bfe <__kernel_rem_pio2+0x1c2>
 8009bee:	f1ba 0f01 	cmp.w	sl, #1
 8009bf2:	f000 80b9 	beq.w	8009d68 <__kernel_rem_pio2+0x32c>
 8009bf6:	f1ba 0f02 	cmp.w	sl, #2
 8009bfa:	f000 80bf 	beq.w	8009d7c <__kernel_rem_pio2+0x340>
 8009bfe:	9b02      	ldr	r3, [sp, #8]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d14e      	bne.n	8009ca2 <__kernel_rem_pio2+0x266>
 8009c04:	4642      	mov	r2, r8
 8009c06:	464b      	mov	r3, r9
 8009c08:	2000      	movs	r0, #0
 8009c0a:	4952      	ldr	r1, [pc, #328]	; (8009d54 <__kernel_rem_pio2+0x318>)
 8009c0c:	f7f6 faac 	bl	8000168 <__aeabi_dsub>
 8009c10:	4680      	mov	r8, r0
 8009c12:	4689      	mov	r9, r1
 8009c14:	2c00      	cmp	r4, #0
 8009c16:	d044      	beq.n	8009ca2 <__kernel_rem_pio2+0x266>
 8009c18:	4652      	mov	r2, sl
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	494d      	ldr	r1, [pc, #308]	; (8009d54 <__kernel_rem_pio2+0x318>)
 8009c1e:	f001 f9f7 	bl	800b010 <scalbn>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4640      	mov	r0, r8
 8009c28:	4649      	mov	r1, r9
 8009c2a:	f7f6 fa9d 	bl	8000168 <__aeabi_dsub>
 8009c2e:	4680      	mov	r8, r0
 8009c30:	4689      	mov	r9, r1
 8009c32:	e036      	b.n	8009ca2 <__kernel_rem_pio2+0x266>
 8009c34:	2200      	movs	r2, #0
 8009c36:	4b48      	ldr	r3, [pc, #288]	; (8009d58 <__kernel_rem_pio2+0x31c>)
 8009c38:	4620      	mov	r0, r4
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	f7f6 fc4c 	bl	80004d8 <__aeabi_dmul>
 8009c40:	f7f6 fefa 	bl	8000a38 <__aeabi_d2iz>
 8009c44:	f7f6 fbde 	bl	8000404 <__aeabi_i2d>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4b44      	ldr	r3, [pc, #272]	; (8009d5c <__kernel_rem_pio2+0x320>)
 8009c4c:	4680      	mov	r8, r0
 8009c4e:	4689      	mov	r9, r1
 8009c50:	f7f6 fc42 	bl	80004d8 <__aeabi_dmul>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4620      	mov	r0, r4
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	f7f6 fa84 	bl	8000168 <__aeabi_dsub>
 8009c60:	f7f6 feea 	bl	8000a38 <__aeabi_d2iz>
 8009c64:	9b02      	ldr	r3, [sp, #8]
 8009c66:	3e01      	subs	r6, #1
 8009c68:	f843 0b04 	str.w	r0, [r3], #4
 8009c6c:	9302      	str	r3, [sp, #8]
 8009c6e:	ab70      	add	r3, sp, #448	; 0x1c0
 8009c70:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c74:	4640      	mov	r0, r8
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	f7f6 fa76 	bl	800016c <__adddf3>
 8009c80:	4604      	mov	r4, r0
 8009c82:	460d      	mov	r5, r1
 8009c84:	e762      	b.n	8009b4c <__kernel_rem_pio2+0x110>
 8009c86:	d105      	bne.n	8009c94 <__kernel_rem_pio2+0x258>
 8009c88:	1e7b      	subs	r3, r7, #1
 8009c8a:	aa0c      	add	r2, sp, #48	; 0x30
 8009c8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009c90:	15c3      	asrs	r3, r0, #23
 8009c92:	e79b      	b.n	8009bcc <__kernel_rem_pio2+0x190>
 8009c94:	2200      	movs	r2, #0
 8009c96:	4b32      	ldr	r3, [pc, #200]	; (8009d60 <__kernel_rem_pio2+0x324>)
 8009c98:	f7f6 fea4 	bl	80009e4 <__aeabi_dcmpge>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d13f      	bne.n	8009d20 <__kernel_rem_pio2+0x2e4>
 8009ca0:	9002      	str	r0, [sp, #8]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	4649      	mov	r1, r9
 8009caa:	f7f6 fe7d 	bl	80009a8 <__aeabi_dcmpeq>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f000 80b5 	beq.w	8009e1e <__kernel_rem_pio2+0x3e2>
 8009cb4:	1e7c      	subs	r4, r7, #1
 8009cb6:	4623      	mov	r3, r4
 8009cb8:	2200      	movs	r2, #0
 8009cba:	9904      	ldr	r1, [sp, #16]
 8009cbc:	428b      	cmp	r3, r1
 8009cbe:	da64      	bge.n	8009d8a <__kernel_rem_pio2+0x34e>
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	d078      	beq.n	8009db6 <__kernel_rem_pio2+0x37a>
 8009cc4:	ab0c      	add	r3, sp, #48	; 0x30
 8009cc6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009cca:	f1aa 0a18 	sub.w	sl, sl, #24
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 80a3 	beq.w	8009e1a <__kernel_rem_pio2+0x3de>
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	491e      	ldr	r1, [pc, #120]	; (8009d54 <__kernel_rem_pio2+0x318>)
 8009cda:	f001 f999 	bl	800b010 <scalbn>
 8009cde:	46a2      	mov	sl, r4
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	460f      	mov	r7, r1
 8009ce4:	f04f 0800 	mov.w	r8, #0
 8009ce8:	00e3      	lsls	r3, r4, #3
 8009cea:	9306      	str	r3, [sp, #24]
 8009cec:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8009d58 <__kernel_rem_pio2+0x31c>
 8009cf0:	ab70      	add	r3, sp, #448	; 0x1c0
 8009cf2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8009cf6:	f1ba 0f00 	cmp.w	sl, #0
 8009cfa:	f280 80c6 	bge.w	8009e8a <__kernel_rem_pio2+0x44e>
 8009cfe:	4627      	mov	r7, r4
 8009d00:	f04f 0800 	mov.w	r8, #0
 8009d04:	2f00      	cmp	r7, #0
 8009d06:	f2c0 80f3 	blt.w	8009ef0 <__kernel_rem_pio2+0x4b4>
 8009d0a:	4b16      	ldr	r3, [pc, #88]	; (8009d64 <__kernel_rem_pio2+0x328>)
 8009d0c:	f04f 0a00 	mov.w	sl, #0
 8009d10:	461d      	mov	r5, r3
 8009d12:	ab70      	add	r3, sp, #448	; 0x1c0
 8009d14:	f04f 0b00 	mov.w	fp, #0
 8009d18:	2600      	movs	r6, #0
 8009d1a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009d1e:	e0d9      	b.n	8009ed4 <__kernel_rem_pio2+0x498>
 8009d20:	2302      	movs	r3, #2
 8009d22:	9302      	str	r3, [sp, #8]
 8009d24:	e756      	b.n	8009bd4 <__kernel_rem_pio2+0x198>
 8009d26:	f8db 3000 	ldr.w	r3, [fp]
 8009d2a:	b954      	cbnz	r4, 8009d42 <__kernel_rem_pio2+0x306>
 8009d2c:	b123      	cbz	r3, 8009d38 <__kernel_rem_pio2+0x2fc>
 8009d2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009d32:	f8cb 3000 	str.w	r3, [fp]
 8009d36:	2301      	movs	r3, #1
 8009d38:	461c      	mov	r4, r3
 8009d3a:	3201      	adds	r2, #1
 8009d3c:	f10b 0b04 	add.w	fp, fp, #4
 8009d40:	e74f      	b.n	8009be2 <__kernel_rem_pio2+0x1a6>
 8009d42:	1acb      	subs	r3, r1, r3
 8009d44:	f8cb 3000 	str.w	r3, [fp]
 8009d48:	4623      	mov	r3, r4
 8009d4a:	e7f5      	b.n	8009d38 <__kernel_rem_pio2+0x2fc>
 8009d4c:	0800be08 	.word	0x0800be08
 8009d50:	40200000 	.word	0x40200000
 8009d54:	3ff00000 	.word	0x3ff00000
 8009d58:	3e700000 	.word	0x3e700000
 8009d5c:	41700000 	.word	0x41700000
 8009d60:	3fe00000 	.word	0x3fe00000
 8009d64:	0800bdc8 	.word	0x0800bdc8
 8009d68:	1e7a      	subs	r2, r7, #1
 8009d6a:	ab0c      	add	r3, sp, #48	; 0x30
 8009d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d70:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009d74:	a90c      	add	r1, sp, #48	; 0x30
 8009d76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009d7a:	e740      	b.n	8009bfe <__kernel_rem_pio2+0x1c2>
 8009d7c:	1e7a      	subs	r2, r7, #1
 8009d7e:	ab0c      	add	r3, sp, #48	; 0x30
 8009d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d88:	e7f4      	b.n	8009d74 <__kernel_rem_pio2+0x338>
 8009d8a:	a90c      	add	r1, sp, #48	; 0x30
 8009d8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	430a      	orrs	r2, r1
 8009d94:	e791      	b.n	8009cba <__kernel_rem_pio2+0x27e>
 8009d96:	3401      	adds	r4, #1
 8009d98:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d9c:	2a00      	cmp	r2, #0
 8009d9e:	d0fa      	beq.n	8009d96 <__kernel_rem_pio2+0x35a>
 8009da0:	9b08      	ldr	r3, [sp, #32]
 8009da2:	1c7e      	adds	r6, r7, #1
 8009da4:	18fd      	adds	r5, r7, r3
 8009da6:	ab20      	add	r3, sp, #128	; 0x80
 8009da8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009dac:	443c      	add	r4, r7
 8009dae:	42b4      	cmp	r4, r6
 8009db0:	da04      	bge.n	8009dbc <__kernel_rem_pio2+0x380>
 8009db2:	4627      	mov	r7, r4
 8009db4:	e6c0      	b.n	8009b38 <__kernel_rem_pio2+0xfc>
 8009db6:	2401      	movs	r4, #1
 8009db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dba:	e7ed      	b.n	8009d98 <__kernel_rem_pio2+0x35c>
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dbe:	462f      	mov	r7, r5
 8009dc0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009dc4:	f7f6 fb1e 	bl	8000404 <__aeabi_i2d>
 8009dc8:	f04f 0b00 	mov.w	fp, #0
 8009dcc:	f04f 0800 	mov.w	r8, #0
 8009dd0:	f04f 0900 	mov.w	r9, #0
 8009dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd6:	e8e7 0102 	strd	r0, r1, [r7], #8
 8009dda:	3b08      	subs	r3, #8
 8009ddc:	9302      	str	r3, [sp, #8]
 8009dde:	9b06      	ldr	r3, [sp, #24]
 8009de0:	459b      	cmp	fp, r3
 8009de2:	dd07      	ble.n	8009df4 <__kernel_rem_pio2+0x3b8>
 8009de4:	ab70      	add	r3, sp, #448	; 0x1c0
 8009de6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009dea:	463d      	mov	r5, r7
 8009dec:	e9c3 8900 	strd	r8, r9, [r3]
 8009df0:	3601      	adds	r6, #1
 8009df2:	e7dc      	b.n	8009dae <__kernel_rem_pio2+0x372>
 8009df4:	9902      	ldr	r1, [sp, #8]
 8009df6:	f10b 0b01 	add.w	fp, fp, #1
 8009dfa:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009dfe:	9102      	str	r1, [sp, #8]
 8009e00:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8009e04:	f7f6 fb68 	bl	80004d8 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	4649      	mov	r1, r9
 8009e10:	f7f6 f9ac 	bl	800016c <__adddf3>
 8009e14:	4680      	mov	r8, r0
 8009e16:	4689      	mov	r9, r1
 8009e18:	e7e1      	b.n	8009dde <__kernel_rem_pio2+0x3a2>
 8009e1a:	3c01      	subs	r4, #1
 8009e1c:	e752      	b.n	8009cc4 <__kernel_rem_pio2+0x288>
 8009e1e:	f1ca 0200 	rsb	r2, sl, #0
 8009e22:	4640      	mov	r0, r8
 8009e24:	4649      	mov	r1, r9
 8009e26:	f001 f8f3 	bl	800b010 <scalbn>
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	4ba5      	ldr	r3, [pc, #660]	; (800a0c4 <__kernel_rem_pio2+0x688>)
 8009e2e:	4604      	mov	r4, r0
 8009e30:	460d      	mov	r5, r1
 8009e32:	f7f6 fdd7 	bl	80009e4 <__aeabi_dcmpge>
 8009e36:	b1f8      	cbz	r0, 8009e78 <__kernel_rem_pio2+0x43c>
 8009e38:	2200      	movs	r2, #0
 8009e3a:	4ba3      	ldr	r3, [pc, #652]	; (800a0c8 <__kernel_rem_pio2+0x68c>)
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	4629      	mov	r1, r5
 8009e40:	f7f6 fb4a 	bl	80004d8 <__aeabi_dmul>
 8009e44:	f7f6 fdf8 	bl	8000a38 <__aeabi_d2iz>
 8009e48:	4606      	mov	r6, r0
 8009e4a:	f7f6 fadb 	bl	8000404 <__aeabi_i2d>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	4b9c      	ldr	r3, [pc, #624]	; (800a0c4 <__kernel_rem_pio2+0x688>)
 8009e52:	f7f6 fb41 	bl	80004d8 <__aeabi_dmul>
 8009e56:	460b      	mov	r3, r1
 8009e58:	4602      	mov	r2, r0
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f7f6 f983 	bl	8000168 <__aeabi_dsub>
 8009e62:	f7f6 fde9 	bl	8000a38 <__aeabi_d2iz>
 8009e66:	1c7c      	adds	r4, r7, #1
 8009e68:	ab0c      	add	r3, sp, #48	; 0x30
 8009e6a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009e6e:	f10a 0a18 	add.w	sl, sl, #24
 8009e72:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8009e76:	e72d      	b.n	8009cd4 <__kernel_rem_pio2+0x298>
 8009e78:	4620      	mov	r0, r4
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f7f6 fddc 	bl	8000a38 <__aeabi_d2iz>
 8009e80:	ab0c      	add	r3, sp, #48	; 0x30
 8009e82:	463c      	mov	r4, r7
 8009e84:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009e88:	e724      	b.n	8009cd4 <__kernel_rem_pio2+0x298>
 8009e8a:	ab0c      	add	r3, sp, #48	; 0x30
 8009e8c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009e90:	f7f6 fab8 	bl	8000404 <__aeabi_i2d>
 8009e94:	4632      	mov	r2, r6
 8009e96:	463b      	mov	r3, r7
 8009e98:	f7f6 fb1e 	bl	80004d8 <__aeabi_dmul>
 8009e9c:	4642      	mov	r2, r8
 8009e9e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8009ea2:	464b      	mov	r3, r9
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	4639      	mov	r1, r7
 8009ea8:	f7f6 fb16 	bl	80004d8 <__aeabi_dmul>
 8009eac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	460f      	mov	r7, r1
 8009eb4:	e71f      	b.n	8009cf6 <__kernel_rem_pio2+0x2ba>
 8009eb6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009eba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009ebe:	f7f6 fb0b 	bl	80004d8 <__aeabi_dmul>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4650      	mov	r0, sl
 8009ec8:	4659      	mov	r1, fp
 8009eca:	f7f6 f94f 	bl	800016c <__adddf3>
 8009ece:	4682      	mov	sl, r0
 8009ed0:	468b      	mov	fp, r1
 8009ed2:	3601      	adds	r6, #1
 8009ed4:	9b04      	ldr	r3, [sp, #16]
 8009ed6:	429e      	cmp	r6, r3
 8009ed8:	dc01      	bgt.n	8009ede <__kernel_rem_pio2+0x4a2>
 8009eda:	45b0      	cmp	r8, r6
 8009edc:	daeb      	bge.n	8009eb6 <__kernel_rem_pio2+0x47a>
 8009ede:	ab48      	add	r3, sp, #288	; 0x120
 8009ee0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ee4:	e9c3 ab00 	strd	sl, fp, [r3]
 8009ee8:	3f01      	subs	r7, #1
 8009eea:	f108 0801 	add.w	r8, r8, #1
 8009eee:	e709      	b.n	8009d04 <__kernel_rem_pio2+0x2c8>
 8009ef0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	dc09      	bgt.n	8009f0a <__kernel_rem_pio2+0x4ce>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	dc34      	bgt.n	8009f64 <__kernel_rem_pio2+0x528>
 8009efa:	d05e      	beq.n	8009fba <__kernel_rem_pio2+0x57e>
 8009efc:	9b07      	ldr	r3, [sp, #28]
 8009efe:	f003 0007 	and.w	r0, r3, #7
 8009f02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009f0c:	2b03      	cmp	r3, #3
 8009f0e:	d1f5      	bne.n	8009efc <__kernel_rem_pio2+0x4c0>
 8009f10:	9a06      	ldr	r2, [sp, #24]
 8009f12:	ab48      	add	r3, sp, #288	; 0x120
 8009f14:	441a      	add	r2, r3
 8009f16:	4615      	mov	r5, r2
 8009f18:	4692      	mov	sl, r2
 8009f1a:	46a3      	mov	fp, r4
 8009f1c:	f1bb 0f00 	cmp.w	fp, #0
 8009f20:	dc7a      	bgt.n	800a018 <__kernel_rem_pio2+0x5dc>
 8009f22:	46aa      	mov	sl, r5
 8009f24:	46a3      	mov	fp, r4
 8009f26:	f1bb 0f01 	cmp.w	fp, #1
 8009f2a:	f300 8094 	bgt.w	800a056 <__kernel_rem_pio2+0x61a>
 8009f2e:	2700      	movs	r7, #0
 8009f30:	463e      	mov	r6, r7
 8009f32:	2c01      	cmp	r4, #1
 8009f34:	f300 80ae 	bgt.w	800a094 <__kernel_rem_pio2+0x658>
 8009f38:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8009f3c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009f40:	9b02      	ldr	r3, [sp, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f040 80b0 	bne.w	800a0a8 <__kernel_rem_pio2+0x66c>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	9801      	ldr	r0, [sp, #4]
 8009f4e:	e9c0 2300 	strd	r2, r3, [r0]
 8009f52:	4622      	mov	r2, r4
 8009f54:	460b      	mov	r3, r1
 8009f56:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009f5a:	463a      	mov	r2, r7
 8009f5c:	4633      	mov	r3, r6
 8009f5e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009f62:	e7cb      	b.n	8009efc <__kernel_rem_pio2+0x4c0>
 8009f64:	2000      	movs	r0, #0
 8009f66:	9a06      	ldr	r2, [sp, #24]
 8009f68:	ab48      	add	r3, sp, #288	; 0x120
 8009f6a:	441a      	add	r2, r3
 8009f6c:	4615      	mov	r5, r2
 8009f6e:	46a0      	mov	r8, r4
 8009f70:	4601      	mov	r1, r0
 8009f72:	f1b8 0f00 	cmp.w	r8, #0
 8009f76:	da3c      	bge.n	8009ff2 <__kernel_rem_pio2+0x5b6>
 8009f78:	9b02      	ldr	r3, [sp, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d040      	beq.n	800a000 <__kernel_rem_pio2+0x5c4>
 8009f7e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009f82:	4602      	mov	r2, r0
 8009f84:	462b      	mov	r3, r5
 8009f86:	9d01      	ldr	r5, [sp, #4]
 8009f88:	2601      	movs	r6, #1
 8009f8a:	e9c5 2300 	strd	r2, r3, [r5]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009f94:	f7f6 f8e8 	bl	8000168 <__aeabi_dsub>
 8009f98:	4684      	mov	ip, r0
 8009f9a:	460f      	mov	r7, r1
 8009f9c:	ad48      	add	r5, sp, #288	; 0x120
 8009f9e:	42b4      	cmp	r4, r6
 8009fa0:	f105 0508 	add.w	r5, r5, #8
 8009fa4:	da2e      	bge.n	800a004 <__kernel_rem_pio2+0x5c8>
 8009fa6:	9b02      	ldr	r3, [sp, #8]
 8009fa8:	b10b      	cbz	r3, 8009fae <__kernel_rem_pio2+0x572>
 8009faa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009fae:	4662      	mov	r2, ip
 8009fb0:	463b      	mov	r3, r7
 8009fb2:	9901      	ldr	r1, [sp, #4]
 8009fb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009fb8:	e7a0      	b.n	8009efc <__kernel_rem_pio2+0x4c0>
 8009fba:	9a06      	ldr	r2, [sp, #24]
 8009fbc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8009fbe:	ab48      	add	r3, sp, #288	; 0x120
 8009fc0:	441a      	add	r2, r3
 8009fc2:	4615      	mov	r5, r2
 8009fc4:	4637      	mov	r7, r6
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	da09      	bge.n	8009fde <__kernel_rem_pio2+0x5a2>
 8009fca:	9b02      	ldr	r3, [sp, #8]
 8009fcc:	b10b      	cbz	r3, 8009fd2 <__kernel_rem_pio2+0x596>
 8009fce:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	463b      	mov	r3, r7
 8009fd6:	9901      	ldr	r1, [sp, #4]
 8009fd8:	e9c1 2300 	strd	r2, r3, [r1]
 8009fdc:	e78e      	b.n	8009efc <__kernel_rem_pio2+0x4c0>
 8009fde:	4630      	mov	r0, r6
 8009fe0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009fe4:	4639      	mov	r1, r7
 8009fe6:	f7f6 f8c1 	bl	800016c <__adddf3>
 8009fea:	3c01      	subs	r4, #1
 8009fec:	4606      	mov	r6, r0
 8009fee:	460f      	mov	r7, r1
 8009ff0:	e7e9      	b.n	8009fc6 <__kernel_rem_pio2+0x58a>
 8009ff2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009ff6:	f7f6 f8b9 	bl	800016c <__adddf3>
 8009ffa:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ffe:	e7b8      	b.n	8009f72 <__kernel_rem_pio2+0x536>
 800a000:	460d      	mov	r5, r1
 800a002:	e7be      	b.n	8009f82 <__kernel_rem_pio2+0x546>
 800a004:	4660      	mov	r0, ip
 800a006:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a00a:	4639      	mov	r1, r7
 800a00c:	f7f6 f8ae 	bl	800016c <__adddf3>
 800a010:	3601      	adds	r6, #1
 800a012:	4684      	mov	ip, r0
 800a014:	460f      	mov	r7, r1
 800a016:	e7c2      	b.n	8009f9e <__kernel_rem_pio2+0x562>
 800a018:	e9da 6700 	ldrd	r6, r7, [sl]
 800a01c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800a020:	4632      	mov	r2, r6
 800a022:	463b      	mov	r3, r7
 800a024:	4640      	mov	r0, r8
 800a026:	4649      	mov	r1, r9
 800a028:	f7f6 f8a0 	bl	800016c <__adddf3>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a034:	4640      	mov	r0, r8
 800a036:	4649      	mov	r1, r9
 800a038:	f7f6 f896 	bl	8000168 <__aeabi_dsub>
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	f7f6 f894 	bl	800016c <__adddf3>
 800a044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a048:	e86a 0102 	strd	r0, r1, [sl], #-8
 800a04c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a050:	e9ca 2300 	strd	r2, r3, [sl]
 800a054:	e762      	b.n	8009f1c <__kernel_rem_pio2+0x4e0>
 800a056:	e9da 8900 	ldrd	r8, r9, [sl]
 800a05a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800a05e:	4642      	mov	r2, r8
 800a060:	464b      	mov	r3, r9
 800a062:	4630      	mov	r0, r6
 800a064:	4639      	mov	r1, r7
 800a066:	f7f6 f881 	bl	800016c <__adddf3>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a072:	4630      	mov	r0, r6
 800a074:	4639      	mov	r1, r7
 800a076:	f7f6 f877 	bl	8000168 <__aeabi_dsub>
 800a07a:	4642      	mov	r2, r8
 800a07c:	464b      	mov	r3, r9
 800a07e:	f7f6 f875 	bl	800016c <__adddf3>
 800a082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a086:	e86a 0102 	strd	r0, r1, [sl], #-8
 800a08a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a08e:	e9ca 2300 	strd	r2, r3, [sl]
 800a092:	e748      	b.n	8009f26 <__kernel_rem_pio2+0x4ea>
 800a094:	4638      	mov	r0, r7
 800a096:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a09a:	4631      	mov	r1, r6
 800a09c:	f7f6 f866 	bl	800016c <__adddf3>
 800a0a0:	3c01      	subs	r4, #1
 800a0a2:	4607      	mov	r7, r0
 800a0a4:	460e      	mov	r6, r1
 800a0a6:	e744      	b.n	8009f32 <__kernel_rem_pio2+0x4f6>
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a0ae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a0b2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a0b6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800a0ba:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800a0be:	601d      	str	r5, [r3, #0]
 800a0c0:	615e      	str	r6, [r3, #20]
 800a0c2:	e71b      	b.n	8009efc <__kernel_rem_pio2+0x4c0>
 800a0c4:	41700000 	.word	0x41700000
 800a0c8:	3e700000 	.word	0x3e700000
 800a0cc:	00000000 	.word	0x00000000

0800a0d0 <__kernel_sin>:
 800a0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	e9cd 2300 	strd	r2, r3, [sp]
 800a0da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a0e2:	4682      	mov	sl, r0
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a0e8:	da03      	bge.n	800a0f2 <__kernel_sin+0x22>
 800a0ea:	f7f6 fca5 	bl	8000a38 <__aeabi_d2iz>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d050      	beq.n	800a194 <__kernel_sin+0xc4>
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	4623      	mov	r3, r4
 800a0f6:	4650      	mov	r0, sl
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	f7f6 f9ed 	bl	80004d8 <__aeabi_dmul>
 800a0fe:	4606      	mov	r6, r0
 800a100:	460f      	mov	r7, r1
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	4650      	mov	r0, sl
 800a108:	4621      	mov	r1, r4
 800a10a:	f7f6 f9e5 	bl	80004d8 <__aeabi_dmul>
 800a10e:	a33e      	add	r3, pc, #248	; (adr r3, 800a208 <__kernel_sin+0x138>)
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	4680      	mov	r8, r0
 800a116:	4689      	mov	r9, r1
 800a118:	4630      	mov	r0, r6
 800a11a:	4639      	mov	r1, r7
 800a11c:	f7f6 f9dc 	bl	80004d8 <__aeabi_dmul>
 800a120:	a33b      	add	r3, pc, #236	; (adr r3, 800a210 <__kernel_sin+0x140>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7f6 f81f 	bl	8000168 <__aeabi_dsub>
 800a12a:	4632      	mov	r2, r6
 800a12c:	463b      	mov	r3, r7
 800a12e:	f7f6 f9d3 	bl	80004d8 <__aeabi_dmul>
 800a132:	a339      	add	r3, pc, #228	; (adr r3, 800a218 <__kernel_sin+0x148>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f7f6 f818 	bl	800016c <__adddf3>
 800a13c:	4632      	mov	r2, r6
 800a13e:	463b      	mov	r3, r7
 800a140:	f7f6 f9ca 	bl	80004d8 <__aeabi_dmul>
 800a144:	a336      	add	r3, pc, #216	; (adr r3, 800a220 <__kernel_sin+0x150>)
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	f7f6 f80d 	bl	8000168 <__aeabi_dsub>
 800a14e:	4632      	mov	r2, r6
 800a150:	463b      	mov	r3, r7
 800a152:	f7f6 f9c1 	bl	80004d8 <__aeabi_dmul>
 800a156:	a334      	add	r3, pc, #208	; (adr r3, 800a228 <__kernel_sin+0x158>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f7f6 f806 	bl	800016c <__adddf3>
 800a160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a164:	b9dd      	cbnz	r5, 800a19e <__kernel_sin+0xce>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4630      	mov	r0, r6
 800a16c:	4639      	mov	r1, r7
 800a16e:	f7f6 f9b3 	bl	80004d8 <__aeabi_dmul>
 800a172:	a32f      	add	r3, pc, #188	; (adr r3, 800a230 <__kernel_sin+0x160>)
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f7f5 fff6 	bl	8000168 <__aeabi_dsub>
 800a17c:	4642      	mov	r2, r8
 800a17e:	464b      	mov	r3, r9
 800a180:	f7f6 f9aa 	bl	80004d8 <__aeabi_dmul>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4650      	mov	r0, sl
 800a18a:	4621      	mov	r1, r4
 800a18c:	f7f5 ffee 	bl	800016c <__adddf3>
 800a190:	4682      	mov	sl, r0
 800a192:	460c      	mov	r4, r1
 800a194:	4650      	mov	r0, sl
 800a196:	4621      	mov	r1, r4
 800a198:	b006      	add	sp, #24
 800a19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a19e:	2200      	movs	r2, #0
 800a1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1a4:	4b24      	ldr	r3, [pc, #144]	; (800a238 <__kernel_sin+0x168>)
 800a1a6:	f7f6 f997 	bl	80004d8 <__aeabi_dmul>
 800a1aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1b2:	4640      	mov	r0, r8
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	f7f6 f98f 	bl	80004d8 <__aeabi_dmul>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1c2:	f7f5 ffd1 	bl	8000168 <__aeabi_dsub>
 800a1c6:	4632      	mov	r2, r6
 800a1c8:	463b      	mov	r3, r7
 800a1ca:	f7f6 f985 	bl	80004d8 <__aeabi_dmul>
 800a1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1d2:	f7f5 ffc9 	bl	8000168 <__aeabi_dsub>
 800a1d6:	a316      	add	r3, pc, #88	; (adr r3, 800a230 <__kernel_sin+0x160>)
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	4606      	mov	r6, r0
 800a1de:	460f      	mov	r7, r1
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	f7f6 f978 	bl	80004d8 <__aeabi_dmul>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	4639      	mov	r1, r7
 800a1f0:	f7f5 ffbc 	bl	800016c <__adddf3>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4650      	mov	r0, sl
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	f7f5 ffb4 	bl	8000168 <__aeabi_dsub>
 800a200:	e7c6      	b.n	800a190 <__kernel_sin+0xc0>
 800a202:	bf00      	nop
 800a204:	f3af 8000 	nop.w
 800a208:	5acfd57c 	.word	0x5acfd57c
 800a20c:	3de5d93a 	.word	0x3de5d93a
 800a210:	8a2b9ceb 	.word	0x8a2b9ceb
 800a214:	3e5ae5e6 	.word	0x3e5ae5e6
 800a218:	57b1fe7d 	.word	0x57b1fe7d
 800a21c:	3ec71de3 	.word	0x3ec71de3
 800a220:	19c161d5 	.word	0x19c161d5
 800a224:	3f2a01a0 	.word	0x3f2a01a0
 800a228:	1110f8a6 	.word	0x1110f8a6
 800a22c:	3f811111 	.word	0x3f811111
 800a230:	55555549 	.word	0x55555549
 800a234:	3fc55555 	.word	0x3fc55555
 800a238:	3fe00000 	.word	0x3fe00000

0800a23c <__kernel_cosf>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800a244:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a248:	4606      	mov	r6, r0
 800a24a:	4688      	mov	r8, r1
 800a24c:	da03      	bge.n	800a256 <__kernel_cosf+0x1a>
 800a24e:	f7f6 ff55 	bl	80010fc <__aeabi_f2iz>
 800a252:	2800      	cmp	r0, #0
 800a254:	d05c      	beq.n	800a310 <__kernel_cosf+0xd4>
 800a256:	4631      	mov	r1, r6
 800a258:	4630      	mov	r0, r6
 800a25a:	f7f6 fd73 	bl	8000d44 <__aeabi_fmul>
 800a25e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a262:	4605      	mov	r5, r0
 800a264:	f7f6 fd6e 	bl	8000d44 <__aeabi_fmul>
 800a268:	492b      	ldr	r1, [pc, #172]	; (800a318 <__kernel_cosf+0xdc>)
 800a26a:	4607      	mov	r7, r0
 800a26c:	4628      	mov	r0, r5
 800a26e:	f7f6 fd69 	bl	8000d44 <__aeabi_fmul>
 800a272:	492a      	ldr	r1, [pc, #168]	; (800a31c <__kernel_cosf+0xe0>)
 800a274:	f7f6 fc5e 	bl	8000b34 <__addsf3>
 800a278:	4629      	mov	r1, r5
 800a27a:	f7f6 fd63 	bl	8000d44 <__aeabi_fmul>
 800a27e:	4928      	ldr	r1, [pc, #160]	; (800a320 <__kernel_cosf+0xe4>)
 800a280:	f7f6 fc56 	bl	8000b30 <__aeabi_fsub>
 800a284:	4629      	mov	r1, r5
 800a286:	f7f6 fd5d 	bl	8000d44 <__aeabi_fmul>
 800a28a:	4926      	ldr	r1, [pc, #152]	; (800a324 <__kernel_cosf+0xe8>)
 800a28c:	f7f6 fc52 	bl	8000b34 <__addsf3>
 800a290:	4629      	mov	r1, r5
 800a292:	f7f6 fd57 	bl	8000d44 <__aeabi_fmul>
 800a296:	4924      	ldr	r1, [pc, #144]	; (800a328 <__kernel_cosf+0xec>)
 800a298:	f7f6 fc4a 	bl	8000b30 <__aeabi_fsub>
 800a29c:	4629      	mov	r1, r5
 800a29e:	f7f6 fd51 	bl	8000d44 <__aeabi_fmul>
 800a2a2:	4922      	ldr	r1, [pc, #136]	; (800a32c <__kernel_cosf+0xf0>)
 800a2a4:	f7f6 fc46 	bl	8000b34 <__addsf3>
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	f7f6 fd4b 	bl	8000d44 <__aeabi_fmul>
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	f7f6 fd48 	bl	8000d44 <__aeabi_fmul>
 800a2b4:	4641      	mov	r1, r8
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f7f6 fd43 	bl	8000d44 <__aeabi_fmul>
 800a2be:	4601      	mov	r1, r0
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f7f6 fc35 	bl	8000b30 <__aeabi_fsub>
 800a2c6:	4b1a      	ldr	r3, [pc, #104]	; (800a330 <__kernel_cosf+0xf4>)
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	429c      	cmp	r4, r3
 800a2cc:	dc0a      	bgt.n	800a2e4 <__kernel_cosf+0xa8>
 800a2ce:	4601      	mov	r1, r0
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f7f6 fc2d 	bl	8000b30 <__aeabi_fsub>
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a2dc:	f7f6 fc28 	bl	8000b30 <__aeabi_fsub>
 800a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e4:	4b13      	ldr	r3, [pc, #76]	; (800a334 <__kernel_cosf+0xf8>)
 800a2e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a2ea:	429c      	cmp	r4, r3
 800a2ec:	bfcc      	ite	gt
 800a2ee:	4c12      	ldrgt	r4, [pc, #72]	; (800a338 <__kernel_cosf+0xfc>)
 800a2f0:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	f7f6 fc1b 	bl	8000b30 <__aeabi_fsub>
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	4638      	mov	r0, r7
 800a300:	f7f6 fc16 	bl	8000b30 <__aeabi_fsub>
 800a304:	4629      	mov	r1, r5
 800a306:	f7f6 fc13 	bl	8000b30 <__aeabi_fsub>
 800a30a:	4601      	mov	r1, r0
 800a30c:	4630      	mov	r0, r6
 800a30e:	e7e5      	b.n	800a2dc <__kernel_cosf+0xa0>
 800a310:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a314:	e7e4      	b.n	800a2e0 <__kernel_cosf+0xa4>
 800a316:	bf00      	nop
 800a318:	ad47d74e 	.word	0xad47d74e
 800a31c:	310f74f6 	.word	0x310f74f6
 800a320:	3493f27c 	.word	0x3493f27c
 800a324:	37d00d01 	.word	0x37d00d01
 800a328:	3ab60b61 	.word	0x3ab60b61
 800a32c:	3d2aaaab 	.word	0x3d2aaaab
 800a330:	3e999999 	.word	0x3e999999
 800a334:	3f480000 	.word	0x3f480000
 800a338:	3e900000 	.word	0x3e900000

0800a33c <__kernel_rem_pio2f>:
 800a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	b0db      	sub	sp, #364	; 0x16c
 800a342:	9202      	str	r2, [sp, #8]
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a348:	4bc5      	ldr	r3, [pc, #788]	; (800a660 <__kernel_rem_pio2f+0x324>)
 800a34a:	9005      	str	r0, [sp, #20]
 800a34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a350:	9100      	str	r1, [sp, #0]
 800a352:	9301      	str	r3, [sp, #4]
 800a354:	9b04      	ldr	r3, [sp, #16]
 800a356:	3b01      	subs	r3, #1
 800a358:	9303      	str	r3, [sp, #12]
 800a35a:	9b02      	ldr	r3, [sp, #8]
 800a35c:	1d1a      	adds	r2, r3, #4
 800a35e:	f2c0 809b 	blt.w	800a498 <__kernel_rem_pio2f+0x15c>
 800a362:	1edc      	subs	r4, r3, #3
 800a364:	bf48      	it	mi
 800a366:	1d1c      	addmi	r4, r3, #4
 800a368:	10e4      	asrs	r4, r4, #3
 800a36a:	2500      	movs	r5, #0
 800a36c:	f04f 0a00 	mov.w	sl, #0
 800a370:	1c67      	adds	r7, r4, #1
 800a372:	00fb      	lsls	r3, r7, #3
 800a374:	9306      	str	r3, [sp, #24]
 800a376:	9b02      	ldr	r3, [sp, #8]
 800a378:	9a03      	ldr	r2, [sp, #12]
 800a37a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	1aa6      	subs	r6, r4, r2
 800a382:	eb03 0802 	add.w	r8, r3, r2
 800a386:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a388:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800a38c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800a390:	4545      	cmp	r5, r8
 800a392:	f340 8083 	ble.w	800a49c <__kernel_rem_pio2f+0x160>
 800a396:	f04f 0800 	mov.w	r8, #0
 800a39a:	f04f 0b00 	mov.w	fp, #0
 800a39e:	9b04      	ldr	r3, [sp, #16]
 800a3a0:	aa1e      	add	r2, sp, #120	; 0x78
 800a3a2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800a3a6:	ab46      	add	r3, sp, #280	; 0x118
 800a3a8:	9a01      	ldr	r2, [sp, #4]
 800a3aa:	4590      	cmp	r8, r2
 800a3ac:	f340 809c 	ble.w	800a4e8 <__kernel_rem_pio2f+0x1ac>
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	aa0a      	add	r2, sp, #40	; 0x28
 800a3b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3b8:	9308      	str	r3, [sp, #32]
 800a3ba:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a3bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a3c4:	9307      	str	r3, [sp, #28]
 800a3c6:	ad0a      	add	r5, sp, #40	; 0x28
 800a3c8:	462e      	mov	r6, r5
 800a3ca:	46c3      	mov	fp, r8
 800a3cc:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800a3d0:	ab5a      	add	r3, sp, #360	; 0x168
 800a3d2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800a3d6:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800a3da:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800a3de:	f1bb 0f00 	cmp.w	fp, #0
 800a3e2:	f300 8086 	bgt.w	800a4f2 <__kernel_rem_pio2f+0x1b6>
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f000 fedd 	bl	800b1a8 <scalbnf>
 800a3ee:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	f7f6 fca6 	bl	8000d44 <__aeabi_fmul>
 800a3f8:	f000 fe90 	bl	800b11c <floorf>
 800a3fc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800a400:	f7f6 fca0 	bl	8000d44 <__aeabi_fmul>
 800a404:	4601      	mov	r1, r0
 800a406:	4620      	mov	r0, r4
 800a408:	f7f6 fb92 	bl	8000b30 <__aeabi_fsub>
 800a40c:	4604      	mov	r4, r0
 800a40e:	f7f6 fe75 	bl	80010fc <__aeabi_f2iz>
 800a412:	4606      	mov	r6, r0
 800a414:	f7f6 fc42 	bl	8000c9c <__aeabi_i2f>
 800a418:	4601      	mov	r1, r0
 800a41a:	4620      	mov	r0, r4
 800a41c:	f7f6 fb88 	bl	8000b30 <__aeabi_fsub>
 800a420:	2f00      	cmp	r7, #0
 800a422:	4681      	mov	r9, r0
 800a424:	f340 8084 	ble.w	800a530 <__kernel_rem_pio2f+0x1f4>
 800a428:	f108 32ff 	add.w	r2, r8, #4294967295
 800a42c:	ab0a      	add	r3, sp, #40	; 0x28
 800a42e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800a432:	f1c7 0108 	rsb	r1, r7, #8
 800a436:	fa44 f301 	asr.w	r3, r4, r1
 800a43a:	441e      	add	r6, r3
 800a43c:	408b      	lsls	r3, r1
 800a43e:	1ae4      	subs	r4, r4, r3
 800a440:	f1c7 0007 	rsb	r0, r7, #7
 800a444:	ab0a      	add	r3, sp, #40	; 0x28
 800a446:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a44a:	4104      	asrs	r4, r0
 800a44c:	2c00      	cmp	r4, #0
 800a44e:	dd7e      	ble.n	800a54e <__kernel_rem_pio2f+0x212>
 800a450:	2200      	movs	r2, #0
 800a452:	4692      	mov	sl, r2
 800a454:	3601      	adds	r6, #1
 800a456:	4590      	cmp	r8, r2
 800a458:	f300 80b0 	bgt.w	800a5bc <__kernel_rem_pio2f+0x280>
 800a45c:	2f00      	cmp	r7, #0
 800a45e:	dd05      	ble.n	800a46c <__kernel_rem_pio2f+0x130>
 800a460:	2f01      	cmp	r7, #1
 800a462:	f000 80bd 	beq.w	800a5e0 <__kernel_rem_pio2f+0x2a4>
 800a466:	2f02      	cmp	r7, #2
 800a468:	f000 80c5 	beq.w	800a5f6 <__kernel_rem_pio2f+0x2ba>
 800a46c:	2c02      	cmp	r4, #2
 800a46e:	d16e      	bne.n	800a54e <__kernel_rem_pio2f+0x212>
 800a470:	4649      	mov	r1, r9
 800a472:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a476:	f7f6 fb5b 	bl	8000b30 <__aeabi_fsub>
 800a47a:	4681      	mov	r9, r0
 800a47c:	f1ba 0f00 	cmp.w	sl, #0
 800a480:	d065      	beq.n	800a54e <__kernel_rem_pio2f+0x212>
 800a482:	4639      	mov	r1, r7
 800a484:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a488:	f000 fe8e 	bl	800b1a8 <scalbnf>
 800a48c:	4601      	mov	r1, r0
 800a48e:	4648      	mov	r0, r9
 800a490:	f7f6 fb4e 	bl	8000b30 <__aeabi_fsub>
 800a494:	4681      	mov	r9, r0
 800a496:	e05a      	b.n	800a54e <__kernel_rem_pio2f+0x212>
 800a498:	2400      	movs	r4, #0
 800a49a:	e766      	b.n	800a36a <__kernel_rem_pio2f+0x2e>
 800a49c:	42ee      	cmn	r6, r5
 800a49e:	d407      	bmi.n	800a4b0 <__kernel_rem_pio2f+0x174>
 800a4a0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a4a4:	f7f6 fbfa 	bl	8000c9c <__aeabi_i2f>
 800a4a8:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800a4ac:	3501      	adds	r5, #1
 800a4ae:	e76f      	b.n	800a390 <__kernel_rem_pio2f+0x54>
 800a4b0:	4650      	mov	r0, sl
 800a4b2:	e7f9      	b.n	800a4a8 <__kernel_rem_pio2f+0x16c>
 800a4b4:	9b05      	ldr	r3, [sp, #20]
 800a4b6:	f8da 1000 	ldr.w	r1, [sl]
 800a4ba:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800a4be:	f7f6 fc41 	bl	8000d44 <__aeabi_fmul>
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7f6 fb35 	bl	8000b34 <__addsf3>
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	f109 0901 	add.w	r9, r9, #1
 800a4d0:	ab46      	add	r3, sp, #280	; 0x118
 800a4d2:	9a03      	ldr	r2, [sp, #12]
 800a4d4:	f1aa 0a04 	sub.w	sl, sl, #4
 800a4d8:	4591      	cmp	r9, r2
 800a4da:	ddeb      	ble.n	800a4b4 <__kernel_rem_pio2f+0x178>
 800a4dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a4e0:	3504      	adds	r5, #4
 800a4e2:	f108 0801 	add.w	r8, r8, #1
 800a4e6:	e75f      	b.n	800a3a8 <__kernel_rem_pio2f+0x6c>
 800a4e8:	46aa      	mov	sl, r5
 800a4ea:	465e      	mov	r6, fp
 800a4ec:	f04f 0900 	mov.w	r9, #0
 800a4f0:	e7ef      	b.n	800a4d2 <__kernel_rem_pio2f+0x196>
 800a4f2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f7f6 fc24 	bl	8000d44 <__aeabi_fmul>
 800a4fc:	f7f6 fdfe 	bl	80010fc <__aeabi_f2iz>
 800a500:	f7f6 fbcc 	bl	8000c9c <__aeabi_i2f>
 800a504:	4649      	mov	r1, r9
 800a506:	9009      	str	r0, [sp, #36]	; 0x24
 800a508:	f7f6 fc1c 	bl	8000d44 <__aeabi_fmul>
 800a50c:	4601      	mov	r1, r0
 800a50e:	4620      	mov	r0, r4
 800a510:	f7f6 fb0e 	bl	8000b30 <__aeabi_fsub>
 800a514:	f7f6 fdf2 	bl	80010fc <__aeabi_f2iz>
 800a518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a51e:	f846 0b04 	str.w	r0, [r6], #4
 800a522:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800a526:	4618      	mov	r0, r3
 800a528:	f7f6 fb04 	bl	8000b34 <__addsf3>
 800a52c:	4604      	mov	r4, r0
 800a52e:	e756      	b.n	800a3de <__kernel_rem_pio2f+0xa2>
 800a530:	d106      	bne.n	800a540 <__kernel_rem_pio2f+0x204>
 800a532:	f108 33ff 	add.w	r3, r8, #4294967295
 800a536:	aa0a      	add	r2, sp, #40	; 0x28
 800a538:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a53c:	1224      	asrs	r4, r4, #8
 800a53e:	e785      	b.n	800a44c <__kernel_rem_pio2f+0x110>
 800a540:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a544:	f7f6 fdb0 	bl	80010a8 <__aeabi_fcmpge>
 800a548:	4604      	mov	r4, r0
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d134      	bne.n	800a5b8 <__kernel_rem_pio2f+0x27c>
 800a54e:	2100      	movs	r1, #0
 800a550:	4648      	mov	r0, r9
 800a552:	f7f6 fd8b 	bl	800106c <__aeabi_fcmpeq>
 800a556:	2800      	cmp	r0, #0
 800a558:	f000 809a 	beq.w	800a690 <__kernel_rem_pio2f+0x354>
 800a55c:	f108 35ff 	add.w	r5, r8, #4294967295
 800a560:	462b      	mov	r3, r5
 800a562:	2200      	movs	r2, #0
 800a564:	9901      	ldr	r1, [sp, #4]
 800a566:	428b      	cmp	r3, r1
 800a568:	da4d      	bge.n	800a606 <__kernel_rem_pio2f+0x2ca>
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	d07c      	beq.n	800a668 <__kernel_rem_pio2f+0x32c>
 800a56e:	ab0a      	add	r3, sp, #40	; 0x28
 800a570:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a574:	3f08      	subs	r7, #8
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 8088 	beq.w	800a68c <__kernel_rem_pio2f+0x350>
 800a57c:	4639      	mov	r1, r7
 800a57e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a582:	f000 fe11 	bl	800b1a8 <scalbnf>
 800a586:	46aa      	mov	sl, r5
 800a588:	4681      	mov	r9, r0
 800a58a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800a58e:	af46      	add	r7, sp, #280	; 0x118
 800a590:	f1ba 0f00 	cmp.w	sl, #0
 800a594:	f280 80b1 	bge.w	800a6fa <__kernel_rem_pio2f+0x3be>
 800a598:	46a9      	mov	r9, r5
 800a59a:	f04f 0a00 	mov.w	sl, #0
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f1b9 0f00 	cmp.w	r9, #0
 800a5a4:	f2c0 80db 	blt.w	800a75e <__kernel_rem_pio2f+0x422>
 800a5a8:	a946      	add	r1, sp, #280	; 0x118
 800a5aa:	4617      	mov	r7, r2
 800a5ac:	f04f 0800 	mov.w	r8, #0
 800a5b0:	4b2c      	ldr	r3, [pc, #176]	; (800a664 <__kernel_rem_pio2f+0x328>)
 800a5b2:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800a5b6:	e0c3      	b.n	800a740 <__kernel_rem_pio2f+0x404>
 800a5b8:	2402      	movs	r4, #2
 800a5ba:	e749      	b.n	800a450 <__kernel_rem_pio2f+0x114>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	f1ba 0f00 	cmp.w	sl, #0
 800a5c2:	d108      	bne.n	800a5d6 <__kernel_rem_pio2f+0x29a>
 800a5c4:	b11b      	cbz	r3, 800a5ce <__kernel_rem_pio2f+0x292>
 800a5c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a5ca:	602b      	str	r3, [r5, #0]
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	469a      	mov	sl, r3
 800a5d0:	3201      	adds	r2, #1
 800a5d2:	3504      	adds	r5, #4
 800a5d4:	e73f      	b.n	800a456 <__kernel_rem_pio2f+0x11a>
 800a5d6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a5da:	602b      	str	r3, [r5, #0]
 800a5dc:	4653      	mov	r3, sl
 800a5de:	e7f6      	b.n	800a5ce <__kernel_rem_pio2f+0x292>
 800a5e0:	f108 32ff 	add.w	r2, r8, #4294967295
 800a5e4:	ab0a      	add	r3, sp, #40	; 0x28
 800a5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ee:	a90a      	add	r1, sp, #40	; 0x28
 800a5f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a5f4:	e73a      	b.n	800a46c <__kernel_rem_pio2f+0x130>
 800a5f6:	f108 32ff 	add.w	r2, r8, #4294967295
 800a5fa:	ab0a      	add	r3, sp, #40	; 0x28
 800a5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a604:	e7f3      	b.n	800a5ee <__kernel_rem_pio2f+0x2b2>
 800a606:	a90a      	add	r1, sp, #40	; 0x28
 800a608:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	430a      	orrs	r2, r1
 800a610:	e7a8      	b.n	800a564 <__kernel_rem_pio2f+0x228>
 800a612:	3301      	adds	r3, #1
 800a614:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a618:	2900      	cmp	r1, #0
 800a61a:	d0fa      	beq.n	800a612 <__kernel_rem_pio2f+0x2d6>
 800a61c:	9a04      	ldr	r2, [sp, #16]
 800a61e:	f108 0501 	add.w	r5, r8, #1
 800a622:	eb08 0402 	add.w	r4, r8, r2
 800a626:	aa1e      	add	r2, sp, #120	; 0x78
 800a628:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a62c:	4498      	add	r8, r3
 800a62e:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800a632:	45a8      	cmp	r8, r5
 800a634:	f6ff aec7 	blt.w	800a3c6 <__kernel_rem_pio2f+0x8a>
 800a638:	9b07      	ldr	r3, [sp, #28]
 800a63a:	46a3      	mov	fp, r4
 800a63c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a640:	f7f6 fb2c 	bl	8000c9c <__aeabi_i2f>
 800a644:	f04f 0a00 	mov.w	sl, #0
 800a648:	2600      	movs	r6, #0
 800a64a:	f84b 0b04 	str.w	r0, [fp], #4
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	459a      	cmp	sl, r3
 800a652:	dd0c      	ble.n	800a66e <__kernel_rem_pio2f+0x332>
 800a654:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800a658:	465c      	mov	r4, fp
 800a65a:	3501      	adds	r5, #1
 800a65c:	e7e9      	b.n	800a632 <__kernel_rem_pio2f+0x2f6>
 800a65e:	bf00      	nop
 800a660:	0800be44 	.word	0x0800be44
 800a664:	0800be18 	.word	0x0800be18
 800a668:	2301      	movs	r3, #1
 800a66a:	9a08      	ldr	r2, [sp, #32]
 800a66c:	e7d2      	b.n	800a614 <__kernel_rem_pio2f+0x2d8>
 800a66e:	9b05      	ldr	r3, [sp, #20]
 800a670:	f854 0904 	ldr.w	r0, [r4], #-4
 800a674:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800a678:	f7f6 fb64 	bl	8000d44 <__aeabi_fmul>
 800a67c:	4601      	mov	r1, r0
 800a67e:	4630      	mov	r0, r6
 800a680:	f7f6 fa58 	bl	8000b34 <__addsf3>
 800a684:	f10a 0a01 	add.w	sl, sl, #1
 800a688:	4606      	mov	r6, r0
 800a68a:	e7e0      	b.n	800a64e <__kernel_rem_pio2f+0x312>
 800a68c:	3d01      	subs	r5, #1
 800a68e:	e76e      	b.n	800a56e <__kernel_rem_pio2f+0x232>
 800a690:	9b06      	ldr	r3, [sp, #24]
 800a692:	9a02      	ldr	r2, [sp, #8]
 800a694:	4648      	mov	r0, r9
 800a696:	1a99      	subs	r1, r3, r2
 800a698:	f000 fd86 	bl	800b1a8 <scalbnf>
 800a69c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	f7f6 fd01 	bl	80010a8 <__aeabi_fcmpge>
 800a6a6:	b300      	cbz	r0, 800a6ea <__kernel_rem_pio2f+0x3ae>
 800a6a8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f7f6 fb49 	bl	8000d44 <__aeabi_fmul>
 800a6b2:	f7f6 fd23 	bl	80010fc <__aeabi_f2iz>
 800a6b6:	f7f6 faf1 	bl	8000c9c <__aeabi_i2f>
 800a6ba:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a6be:	4681      	mov	r9, r0
 800a6c0:	f7f6 fb40 	bl	8000d44 <__aeabi_fmul>
 800a6c4:	4601      	mov	r1, r0
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f7f6 fa32 	bl	8000b30 <__aeabi_fsub>
 800a6cc:	f7f6 fd16 	bl	80010fc <__aeabi_f2iz>
 800a6d0:	ab0a      	add	r3, sp, #40	; 0x28
 800a6d2:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a6d6:	4648      	mov	r0, r9
 800a6d8:	f7f6 fd10 	bl	80010fc <__aeabi_f2iz>
 800a6dc:	f108 0501 	add.w	r5, r8, #1
 800a6e0:	ab0a      	add	r3, sp, #40	; 0x28
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a6e8:	e748      	b.n	800a57c <__kernel_rem_pio2f+0x240>
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f7f6 fd06 	bl	80010fc <__aeabi_f2iz>
 800a6f0:	ab0a      	add	r3, sp, #40	; 0x28
 800a6f2:	4645      	mov	r5, r8
 800a6f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a6f8:	e740      	b.n	800a57c <__kernel_rem_pio2f+0x240>
 800a6fa:	ab0a      	add	r3, sp, #40	; 0x28
 800a6fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a700:	f7f6 facc 	bl	8000c9c <__aeabi_i2f>
 800a704:	4649      	mov	r1, r9
 800a706:	f7f6 fb1d 	bl	8000d44 <__aeabi_fmul>
 800a70a:	4641      	mov	r1, r8
 800a70c:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800a710:	4648      	mov	r0, r9
 800a712:	f7f6 fb17 	bl	8000d44 <__aeabi_fmul>
 800a716:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a71a:	4681      	mov	r9, r0
 800a71c:	e738      	b.n	800a590 <__kernel_rem_pio2f+0x254>
 800a71e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a722:	f85b 1b04 	ldr.w	r1, [fp], #4
 800a726:	9203      	str	r2, [sp, #12]
 800a728:	9302      	str	r3, [sp, #8]
 800a72a:	f7f6 fb0b 	bl	8000d44 <__aeabi_fmul>
 800a72e:	4601      	mov	r1, r0
 800a730:	4638      	mov	r0, r7
 800a732:	f7f6 f9ff 	bl	8000b34 <__addsf3>
 800a736:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a73a:	4607      	mov	r7, r0
 800a73c:	f108 0801 	add.w	r8, r8, #1
 800a740:	9901      	ldr	r1, [sp, #4]
 800a742:	4588      	cmp	r8, r1
 800a744:	dc01      	bgt.n	800a74a <__kernel_rem_pio2f+0x40e>
 800a746:	45c2      	cmp	sl, r8
 800a748:	dae9      	bge.n	800a71e <__kernel_rem_pio2f+0x3e2>
 800a74a:	ab5a      	add	r3, sp, #360	; 0x168
 800a74c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a750:	f843 7ca0 	str.w	r7, [r3, #-160]
 800a754:	f109 39ff 	add.w	r9, r9, #4294967295
 800a758:	f10a 0a01 	add.w	sl, sl, #1
 800a75c:	e720      	b.n	800a5a0 <__kernel_rem_pio2f+0x264>
 800a75e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a760:	2b02      	cmp	r3, #2
 800a762:	dc07      	bgt.n	800a774 <__kernel_rem_pio2f+0x438>
 800a764:	2b00      	cmp	r3, #0
 800a766:	dc4d      	bgt.n	800a804 <__kernel_rem_pio2f+0x4c8>
 800a768:	d02e      	beq.n	800a7c8 <__kernel_rem_pio2f+0x48c>
 800a76a:	f006 0007 	and.w	r0, r6, #7
 800a76e:	b05b      	add	sp, #364	; 0x16c
 800a770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a774:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a776:	2b03      	cmp	r3, #3
 800a778:	d1f7      	bne.n	800a76a <__kernel_rem_pio2f+0x42e>
 800a77a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800a77e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800a782:	46b8      	mov	r8, r7
 800a784:	46aa      	mov	sl, r5
 800a786:	f1ba 0f00 	cmp.w	sl, #0
 800a78a:	dc48      	bgt.n	800a81e <__kernel_rem_pio2f+0x4e2>
 800a78c:	46a9      	mov	r9, r5
 800a78e:	f1b9 0f01 	cmp.w	r9, #1
 800a792:	dc5f      	bgt.n	800a854 <__kernel_rem_pio2f+0x518>
 800a794:	2000      	movs	r0, #0
 800a796:	2d01      	cmp	r5, #1
 800a798:	dc75      	bgt.n	800a886 <__kernel_rem_pio2f+0x54a>
 800a79a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800a79c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800a79e:	2c00      	cmp	r4, #0
 800a7a0:	d177      	bne.n	800a892 <__kernel_rem_pio2f+0x556>
 800a7a2:	9900      	ldr	r1, [sp, #0]
 800a7a4:	600a      	str	r2, [r1, #0]
 800a7a6:	460a      	mov	r2, r1
 800a7a8:	604b      	str	r3, [r1, #4]
 800a7aa:	6090      	str	r0, [r2, #8]
 800a7ac:	e7dd      	b.n	800a76a <__kernel_rem_pio2f+0x42e>
 800a7ae:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800a7b2:	f7f6 f9bf 	bl	8000b34 <__addsf3>
 800a7b6:	3d01      	subs	r5, #1
 800a7b8:	2d00      	cmp	r5, #0
 800a7ba:	daf8      	bge.n	800a7ae <__kernel_rem_pio2f+0x472>
 800a7bc:	b10c      	cbz	r4, 800a7c2 <__kernel_rem_pio2f+0x486>
 800a7be:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a7c2:	9b00      	ldr	r3, [sp, #0]
 800a7c4:	6018      	str	r0, [r3, #0]
 800a7c6:	e7d0      	b.n	800a76a <__kernel_rem_pio2f+0x42e>
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	af32      	add	r7, sp, #200	; 0xc8
 800a7cc:	e7f4      	b.n	800a7b8 <__kernel_rem_pio2f+0x47c>
 800a7ce:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800a7d2:	f7f6 f9af 	bl	8000b34 <__addsf3>
 800a7d6:	3f01      	subs	r7, #1
 800a7d8:	2f00      	cmp	r7, #0
 800a7da:	daf8      	bge.n	800a7ce <__kernel_rem_pio2f+0x492>
 800a7dc:	b1bc      	cbz	r4, 800a80e <__kernel_rem_pio2f+0x4d2>
 800a7de:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800a7e2:	9a00      	ldr	r2, [sp, #0]
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800a7ea:	f7f6 f9a1 	bl	8000b30 <__aeabi_fsub>
 800a7ee:	2701      	movs	r7, #1
 800a7f0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800a7f4:	42bd      	cmp	r5, r7
 800a7f6:	da0c      	bge.n	800a812 <__kernel_rem_pio2f+0x4d6>
 800a7f8:	b10c      	cbz	r4, 800a7fe <__kernel_rem_pio2f+0x4c2>
 800a7fa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a7fe:	9b00      	ldr	r3, [sp, #0]
 800a800:	6058      	str	r0, [r3, #4]
 800a802:	e7b2      	b.n	800a76a <__kernel_rem_pio2f+0x42e>
 800a804:	462f      	mov	r7, r5
 800a806:	2000      	movs	r0, #0
 800a808:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800a80c:	e7e4      	b.n	800a7d8 <__kernel_rem_pio2f+0x49c>
 800a80e:	4603      	mov	r3, r0
 800a810:	e7e7      	b.n	800a7e2 <__kernel_rem_pio2f+0x4a6>
 800a812:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800a816:	f7f6 f98d 	bl	8000b34 <__addsf3>
 800a81a:	3701      	adds	r7, #1
 800a81c:	e7ea      	b.n	800a7f4 <__kernel_rem_pio2f+0x4b8>
 800a81e:	f8d8 3000 	ldr.w	r3, [r8]
 800a822:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	9302      	str	r3, [sp, #8]
 800a82c:	9201      	str	r2, [sp, #4]
 800a82e:	f7f6 f981 	bl	8000b34 <__addsf3>
 800a832:	9a01      	ldr	r2, [sp, #4]
 800a834:	4601      	mov	r1, r0
 800a836:	4681      	mov	r9, r0
 800a838:	4610      	mov	r0, r2
 800a83a:	f7f6 f979 	bl	8000b30 <__aeabi_fsub>
 800a83e:	9b02      	ldr	r3, [sp, #8]
 800a840:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a844:	4619      	mov	r1, r3
 800a846:	f7f6 f975 	bl	8000b34 <__addsf3>
 800a84a:	f848 0904 	str.w	r0, [r8], #-4
 800a84e:	f8c8 9000 	str.w	r9, [r8]
 800a852:	e798      	b.n	800a786 <__kernel_rem_pio2f+0x44a>
 800a854:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800a858:	f8d7 a000 	ldr.w	sl, [r7]
 800a85c:	4618      	mov	r0, r3
 800a85e:	4651      	mov	r1, sl
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	f7f6 f967 	bl	8000b34 <__addsf3>
 800a866:	9b01      	ldr	r3, [sp, #4]
 800a868:	4601      	mov	r1, r0
 800a86a:	4680      	mov	r8, r0
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7f6 f95f 	bl	8000b30 <__aeabi_fsub>
 800a872:	4651      	mov	r1, sl
 800a874:	f7f6 f95e 	bl	8000b34 <__addsf3>
 800a878:	f847 0904 	str.w	r0, [r7], #-4
 800a87c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a880:	f8c7 8000 	str.w	r8, [r7]
 800a884:	e783      	b.n	800a78e <__kernel_rem_pio2f+0x452>
 800a886:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800a88a:	f7f6 f953 	bl	8000b34 <__addsf3>
 800a88e:	3d01      	subs	r5, #1
 800a890:	e781      	b.n	800a796 <__kernel_rem_pio2f+0x45a>
 800a892:	9900      	ldr	r1, [sp, #0]
 800a894:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800a898:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a89c:	600a      	str	r2, [r1, #0]
 800a89e:	604b      	str	r3, [r1, #4]
 800a8a0:	460a      	mov	r2, r1
 800a8a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a8a6:	e780      	b.n	800a7aa <__kernel_rem_pio2f+0x46e>

0800a8a8 <__kernel_sinf>:
 800a8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a8b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	460f      	mov	r7, r1
 800a8b8:	4691      	mov	r9, r2
 800a8ba:	da03      	bge.n	800a8c4 <__kernel_sinf+0x1c>
 800a8bc:	f7f6 fc1e 	bl	80010fc <__aeabi_f2iz>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d035      	beq.n	800a930 <__kernel_sinf+0x88>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7f6 fa3c 	bl	8000d44 <__aeabi_fmul>
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	4601      	mov	r1, r0
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f7f6 fa37 	bl	8000d44 <__aeabi_fmul>
 800a8d6:	4929      	ldr	r1, [pc, #164]	; (800a97c <__kernel_sinf+0xd4>)
 800a8d8:	4606      	mov	r6, r0
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f7f6 fa32 	bl	8000d44 <__aeabi_fmul>
 800a8e0:	4927      	ldr	r1, [pc, #156]	; (800a980 <__kernel_sinf+0xd8>)
 800a8e2:	f7f6 f925 	bl	8000b30 <__aeabi_fsub>
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f7f6 fa2c 	bl	8000d44 <__aeabi_fmul>
 800a8ec:	4925      	ldr	r1, [pc, #148]	; (800a984 <__kernel_sinf+0xdc>)
 800a8ee:	f7f6 f921 	bl	8000b34 <__addsf3>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	f7f6 fa26 	bl	8000d44 <__aeabi_fmul>
 800a8f8:	4923      	ldr	r1, [pc, #140]	; (800a988 <__kernel_sinf+0xe0>)
 800a8fa:	f7f6 f919 	bl	8000b30 <__aeabi_fsub>
 800a8fe:	4629      	mov	r1, r5
 800a900:	f7f6 fa20 	bl	8000d44 <__aeabi_fmul>
 800a904:	4921      	ldr	r1, [pc, #132]	; (800a98c <__kernel_sinf+0xe4>)
 800a906:	f7f6 f915 	bl	8000b34 <__addsf3>
 800a90a:	4680      	mov	r8, r0
 800a90c:	f1b9 0f00 	cmp.w	r9, #0
 800a910:	d111      	bne.n	800a936 <__kernel_sinf+0x8e>
 800a912:	4601      	mov	r1, r0
 800a914:	4628      	mov	r0, r5
 800a916:	f7f6 fa15 	bl	8000d44 <__aeabi_fmul>
 800a91a:	491d      	ldr	r1, [pc, #116]	; (800a990 <__kernel_sinf+0xe8>)
 800a91c:	f7f6 f908 	bl	8000b30 <__aeabi_fsub>
 800a920:	4631      	mov	r1, r6
 800a922:	f7f6 fa0f 	bl	8000d44 <__aeabi_fmul>
 800a926:	4601      	mov	r1, r0
 800a928:	4620      	mov	r0, r4
 800a92a:	f7f6 f903 	bl	8000b34 <__addsf3>
 800a92e:	4604      	mov	r4, r0
 800a930:	4620      	mov	r0, r4
 800a932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a936:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a93a:	4638      	mov	r0, r7
 800a93c:	f7f6 fa02 	bl	8000d44 <__aeabi_fmul>
 800a940:	4641      	mov	r1, r8
 800a942:	4681      	mov	r9, r0
 800a944:	4630      	mov	r0, r6
 800a946:	f7f6 f9fd 	bl	8000d44 <__aeabi_fmul>
 800a94a:	4601      	mov	r1, r0
 800a94c:	4648      	mov	r0, r9
 800a94e:	f7f6 f8ef 	bl	8000b30 <__aeabi_fsub>
 800a952:	4629      	mov	r1, r5
 800a954:	f7f6 f9f6 	bl	8000d44 <__aeabi_fmul>
 800a958:	4639      	mov	r1, r7
 800a95a:	f7f6 f8e9 	bl	8000b30 <__aeabi_fsub>
 800a95e:	490c      	ldr	r1, [pc, #48]	; (800a990 <__kernel_sinf+0xe8>)
 800a960:	4605      	mov	r5, r0
 800a962:	4630      	mov	r0, r6
 800a964:	f7f6 f9ee 	bl	8000d44 <__aeabi_fmul>
 800a968:	4601      	mov	r1, r0
 800a96a:	4628      	mov	r0, r5
 800a96c:	f7f6 f8e2 	bl	8000b34 <__addsf3>
 800a970:	4601      	mov	r1, r0
 800a972:	4620      	mov	r0, r4
 800a974:	f7f6 f8dc 	bl	8000b30 <__aeabi_fsub>
 800a978:	e7d9      	b.n	800a92e <__kernel_sinf+0x86>
 800a97a:	bf00      	nop
 800a97c:	2f2ec9d3 	.word	0x2f2ec9d3
 800a980:	32d72f34 	.word	0x32d72f34
 800a984:	3638ef1b 	.word	0x3638ef1b
 800a988:	39500d01 	.word	0x39500d01
 800a98c:	3c088889 	.word	0x3c088889
 800a990:	3e2aaaab 	.word	0x3e2aaaab

0800a994 <__kernel_tanf>:
 800a994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 800a99c:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	460e      	mov	r6, r1
 800a9a4:	4690      	mov	r8, r2
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	da1b      	bge.n	800a9e2 <__kernel_tanf+0x4e>
 800a9aa:	f7f6 fba7 	bl	80010fc <__aeabi_f2iz>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d12f      	bne.n	800aa12 <__kernel_tanf+0x7e>
 800a9b2:	f108 0301 	add.w	r3, r8, #1
 800a9b6:	ea53 030a 	orrs.w	r3, r3, sl
 800a9ba:	d10c      	bne.n	800a9d6 <__kernel_tanf+0x42>
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f7fe f921 	bl	8008c04 <fabsf>
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a9c8:	f7f6 fa70 	bl	8000eac <__aeabi_fdiv>
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	b003      	add	sp, #12
 800a9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d6:	f1b8 0f01 	cmp.w	r8, #1
 800a9da:	d0f8      	beq.n	800a9ce <__kernel_tanf+0x3a>
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4872      	ldr	r0, [pc, #456]	; (800aba8 <__kernel_tanf+0x214>)
 800a9e0:	e7f2      	b.n	800a9c8 <__kernel_tanf+0x34>
 800a9e2:	4b72      	ldr	r3, [pc, #456]	; (800abac <__kernel_tanf+0x218>)
 800a9e4:	459a      	cmp	sl, r3
 800a9e6:	db14      	blt.n	800aa12 <__kernel_tanf+0x7e>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	bfbe      	ittt	lt
 800a9ec:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 800a9f0:	4604      	movlt	r4, r0
 800a9f2:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 800a9f6:	486e      	ldr	r0, [pc, #440]	; (800abb0 <__kernel_tanf+0x21c>)
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	f7f6 f899 	bl	8000b30 <__aeabi_fsub>
 800a9fe:	4604      	mov	r4, r0
 800aa00:	4631      	mov	r1, r6
 800aa02:	486c      	ldr	r0, [pc, #432]	; (800abb4 <__kernel_tanf+0x220>)
 800aa04:	f7f6 f894 	bl	8000b30 <__aeabi_fsub>
 800aa08:	4621      	mov	r1, r4
 800aa0a:	f7f6 f893 	bl	8000b34 <__addsf3>
 800aa0e:	2600      	movs	r6, #0
 800aa10:	4604      	mov	r4, r0
 800aa12:	4621      	mov	r1, r4
 800aa14:	4620      	mov	r0, r4
 800aa16:	f7f6 f995 	bl	8000d44 <__aeabi_fmul>
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	4681      	mov	r9, r0
 800aa1e:	f7f6 f991 	bl	8000d44 <__aeabi_fmul>
 800aa22:	4649      	mov	r1, r9
 800aa24:	4605      	mov	r5, r0
 800aa26:	4620      	mov	r0, r4
 800aa28:	f7f6 f98c 	bl	8000d44 <__aeabi_fmul>
 800aa2c:	4962      	ldr	r1, [pc, #392]	; (800abb8 <__kernel_tanf+0x224>)
 800aa2e:	4683      	mov	fp, r0
 800aa30:	4628      	mov	r0, r5
 800aa32:	f7f6 f987 	bl	8000d44 <__aeabi_fmul>
 800aa36:	4961      	ldr	r1, [pc, #388]	; (800abbc <__kernel_tanf+0x228>)
 800aa38:	f7f6 f87c 	bl	8000b34 <__addsf3>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	f7f6 f981 	bl	8000d44 <__aeabi_fmul>
 800aa42:	495f      	ldr	r1, [pc, #380]	; (800abc0 <__kernel_tanf+0x22c>)
 800aa44:	f7f6 f876 	bl	8000b34 <__addsf3>
 800aa48:	4629      	mov	r1, r5
 800aa4a:	f7f6 f97b 	bl	8000d44 <__aeabi_fmul>
 800aa4e:	495d      	ldr	r1, [pc, #372]	; (800abc4 <__kernel_tanf+0x230>)
 800aa50:	f7f6 f870 	bl	8000b34 <__addsf3>
 800aa54:	4629      	mov	r1, r5
 800aa56:	f7f6 f975 	bl	8000d44 <__aeabi_fmul>
 800aa5a:	495b      	ldr	r1, [pc, #364]	; (800abc8 <__kernel_tanf+0x234>)
 800aa5c:	f7f6 f86a 	bl	8000b34 <__addsf3>
 800aa60:	4629      	mov	r1, r5
 800aa62:	f7f6 f96f 	bl	8000d44 <__aeabi_fmul>
 800aa66:	4959      	ldr	r1, [pc, #356]	; (800abcc <__kernel_tanf+0x238>)
 800aa68:	f7f6 f864 	bl	8000b34 <__addsf3>
 800aa6c:	4649      	mov	r1, r9
 800aa6e:	f7f6 f969 	bl	8000d44 <__aeabi_fmul>
 800aa72:	4957      	ldr	r1, [pc, #348]	; (800abd0 <__kernel_tanf+0x23c>)
 800aa74:	9001      	str	r0, [sp, #4]
 800aa76:	4628      	mov	r0, r5
 800aa78:	f7f6 f964 	bl	8000d44 <__aeabi_fmul>
 800aa7c:	4955      	ldr	r1, [pc, #340]	; (800abd4 <__kernel_tanf+0x240>)
 800aa7e:	f7f6 f859 	bl	8000b34 <__addsf3>
 800aa82:	4629      	mov	r1, r5
 800aa84:	f7f6 f95e 	bl	8000d44 <__aeabi_fmul>
 800aa88:	4953      	ldr	r1, [pc, #332]	; (800abd8 <__kernel_tanf+0x244>)
 800aa8a:	f7f6 f853 	bl	8000b34 <__addsf3>
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f6 f958 	bl	8000d44 <__aeabi_fmul>
 800aa94:	4951      	ldr	r1, [pc, #324]	; (800abdc <__kernel_tanf+0x248>)
 800aa96:	f7f6 f84d 	bl	8000b34 <__addsf3>
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	f7f6 f952 	bl	8000d44 <__aeabi_fmul>
 800aaa0:	494f      	ldr	r1, [pc, #316]	; (800abe0 <__kernel_tanf+0x24c>)
 800aaa2:	f7f6 f847 	bl	8000b34 <__addsf3>
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	f7f6 f94c 	bl	8000d44 <__aeabi_fmul>
 800aaac:	494d      	ldr	r1, [pc, #308]	; (800abe4 <__kernel_tanf+0x250>)
 800aaae:	f7f6 f841 	bl	8000b34 <__addsf3>
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	4601      	mov	r1, r0
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7f6 f83c 	bl	8000b34 <__addsf3>
 800aabc:	4659      	mov	r1, fp
 800aabe:	f7f6 f941 	bl	8000d44 <__aeabi_fmul>
 800aac2:	4631      	mov	r1, r6
 800aac4:	f7f6 f836 	bl	8000b34 <__addsf3>
 800aac8:	4649      	mov	r1, r9
 800aaca:	f7f6 f93b 	bl	8000d44 <__aeabi_fmul>
 800aace:	4631      	mov	r1, r6
 800aad0:	f7f6 f830 	bl	8000b34 <__addsf3>
 800aad4:	4605      	mov	r5, r0
 800aad6:	4944      	ldr	r1, [pc, #272]	; (800abe8 <__kernel_tanf+0x254>)
 800aad8:	4658      	mov	r0, fp
 800aada:	f7f6 f933 	bl	8000d44 <__aeabi_fmul>
 800aade:	4629      	mov	r1, r5
 800aae0:	f7f6 f828 	bl	8000b34 <__addsf3>
 800aae4:	4601      	mov	r1, r0
 800aae6:	4681      	mov	r9, r0
 800aae8:	4620      	mov	r0, r4
 800aaea:	f7f6 f823 	bl	8000b34 <__addsf3>
 800aaee:	4b2f      	ldr	r3, [pc, #188]	; (800abac <__kernel_tanf+0x218>)
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	459a      	cmp	sl, r3
 800aaf4:	db2b      	blt.n	800ab4e <__kernel_tanf+0x1ba>
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	f7f6 f8d0 	bl	8000c9c <__aeabi_i2f>
 800aafc:	4629      	mov	r1, r5
 800aafe:	4606      	mov	r6, r0
 800ab00:	4628      	mov	r0, r5
 800ab02:	f7f6 f91f 	bl	8000d44 <__aeabi_fmul>
 800ab06:	4631      	mov	r1, r6
 800ab08:	4680      	mov	r8, r0
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f7f6 f812 	bl	8000b34 <__addsf3>
 800ab10:	4601      	mov	r1, r0
 800ab12:	4640      	mov	r0, r8
 800ab14:	f7f6 f9ca 	bl	8000eac <__aeabi_fdiv>
 800ab18:	4649      	mov	r1, r9
 800ab1a:	f7f6 f809 	bl	8000b30 <__aeabi_fsub>
 800ab1e:	4601      	mov	r1, r0
 800ab20:	4620      	mov	r0, r4
 800ab22:	f7f6 f805 	bl	8000b30 <__aeabi_fsub>
 800ab26:	4601      	mov	r1, r0
 800ab28:	f7f6 f804 	bl	8000b34 <__addsf3>
 800ab2c:	4601      	mov	r1, r0
 800ab2e:	4630      	mov	r0, r6
 800ab30:	f7f5 fffe 	bl	8000b30 <__aeabi_fsub>
 800ab34:	17bf      	asrs	r7, r7, #30
 800ab36:	f007 0702 	and.w	r7, r7, #2
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	f1c7 0001 	rsb	r0, r7, #1
 800ab40:	f7f6 f8ac 	bl	8000c9c <__aeabi_i2f>
 800ab44:	4601      	mov	r1, r0
 800ab46:	4620      	mov	r0, r4
 800ab48:	f7f6 f8fc 	bl	8000d44 <__aeabi_fmul>
 800ab4c:	e73e      	b.n	800a9cc <__kernel_tanf+0x38>
 800ab4e:	f1b8 0f01 	cmp.w	r8, #1
 800ab52:	d027      	beq.n	800aba4 <__kernel_tanf+0x210>
 800ab54:	4e25      	ldr	r6, [pc, #148]	; (800abec <__kernel_tanf+0x258>)
 800ab56:	4601      	mov	r1, r0
 800ab58:	ea06 0800 	and.w	r8, r6, r0
 800ab5c:	4812      	ldr	r0, [pc, #72]	; (800aba8 <__kernel_tanf+0x214>)
 800ab5e:	f7f6 f9a5 	bl	8000eac <__aeabi_fdiv>
 800ab62:	4621      	mov	r1, r4
 800ab64:	4006      	ands	r6, r0
 800ab66:	4607      	mov	r7, r0
 800ab68:	4640      	mov	r0, r8
 800ab6a:	f7f5 ffe1 	bl	8000b30 <__aeabi_fsub>
 800ab6e:	4601      	mov	r1, r0
 800ab70:	4648      	mov	r0, r9
 800ab72:	f7f5 ffdd 	bl	8000b30 <__aeabi_fsub>
 800ab76:	4631      	mov	r1, r6
 800ab78:	f7f6 f8e4 	bl	8000d44 <__aeabi_fmul>
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	4604      	mov	r4, r0
 800ab80:	4640      	mov	r0, r8
 800ab82:	f7f6 f8df 	bl	8000d44 <__aeabi_fmul>
 800ab86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab8a:	f7f5 ffd3 	bl	8000b34 <__addsf3>
 800ab8e:	4601      	mov	r1, r0
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7f5 ffcf 	bl	8000b34 <__addsf3>
 800ab96:	4639      	mov	r1, r7
 800ab98:	f7f6 f8d4 	bl	8000d44 <__aeabi_fmul>
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	f7f5 ffc9 	bl	8000b34 <__addsf3>
 800aba2:	e713      	b.n	800a9cc <__kernel_tanf+0x38>
 800aba4:	4604      	mov	r4, r0
 800aba6:	e712      	b.n	800a9ce <__kernel_tanf+0x3a>
 800aba8:	bf800000 	.word	0xbf800000
 800abac:	3f2ca140 	.word	0x3f2ca140
 800abb0:	3f490fda 	.word	0x3f490fda
 800abb4:	33222168 	.word	0x33222168
 800abb8:	37d95384 	.word	0x37d95384
 800abbc:	3895c07a 	.word	0x3895c07a
 800abc0:	398137b9 	.word	0x398137b9
 800abc4:	3abede48 	.word	0x3abede48
 800abc8:	3c11371f 	.word	0x3c11371f
 800abcc:	3d5d0dd1 	.word	0x3d5d0dd1
 800abd0:	b79bae5f 	.word	0xb79bae5f
 800abd4:	38a3f445 	.word	0x38a3f445
 800abd8:	3a1a26c8 	.word	0x3a1a26c8
 800abdc:	3b6b6916 	.word	0x3b6b6916
 800abe0:	3cb327a4 	.word	0x3cb327a4
 800abe4:	3e088889 	.word	0x3e088889
 800abe8:	3eaaaaab 	.word	0x3eaaaaab
 800abec:	fffff000 	.word	0xfffff000

0800abf0 <atan>:
 800abf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	4bb6      	ldr	r3, [pc, #728]	; (800aed0 <atan+0x2e0>)
 800abf6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800abfa:	429e      	cmp	r6, r3
 800abfc:	4604      	mov	r4, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	468b      	mov	fp, r1
 800ac02:	dd17      	ble.n	800ac34 <atan+0x44>
 800ac04:	4bb3      	ldr	r3, [pc, #716]	; (800aed4 <atan+0x2e4>)
 800ac06:	429e      	cmp	r6, r3
 800ac08:	dc01      	bgt.n	800ac0e <atan+0x1e>
 800ac0a:	d109      	bne.n	800ac20 <atan+0x30>
 800ac0c:	b140      	cbz	r0, 800ac20 <atan+0x30>
 800ac0e:	4622      	mov	r2, r4
 800ac10:	462b      	mov	r3, r5
 800ac12:	4620      	mov	r0, r4
 800ac14:	4629      	mov	r1, r5
 800ac16:	f7f5 faa9 	bl	800016c <__adddf3>
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	e005      	b.n	800ac2c <atan+0x3c>
 800ac20:	f1bb 0f00 	cmp.w	fp, #0
 800ac24:	4cac      	ldr	r4, [pc, #688]	; (800aed8 <atan+0x2e8>)
 800ac26:	f300 8121 	bgt.w	800ae6c <atan+0x27c>
 800ac2a:	4dac      	ldr	r5, [pc, #688]	; (800aedc <atan+0x2ec>)
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4629      	mov	r1, r5
 800ac30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac34:	4baa      	ldr	r3, [pc, #680]	; (800aee0 <atan+0x2f0>)
 800ac36:	429e      	cmp	r6, r3
 800ac38:	dc11      	bgt.n	800ac5e <atan+0x6e>
 800ac3a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ac3e:	429e      	cmp	r6, r3
 800ac40:	dc0a      	bgt.n	800ac58 <atan+0x68>
 800ac42:	a38b      	add	r3, pc, #556	; (adr r3, 800ae70 <atan+0x280>)
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f7f5 fa90 	bl	800016c <__adddf3>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	4ba5      	ldr	r3, [pc, #660]	; (800aee4 <atan+0x2f4>)
 800ac50:	f7f5 fed2 	bl	80009f8 <__aeabi_dcmpgt>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d1e9      	bne.n	800ac2c <atan+0x3c>
 800ac58:	f04f 3aff 	mov.w	sl, #4294967295
 800ac5c:	e027      	b.n	800acae <atan+0xbe>
 800ac5e:	f000 f951 	bl	800af04 <fabs>
 800ac62:	4ba1      	ldr	r3, [pc, #644]	; (800aee8 <atan+0x2f8>)
 800ac64:	4604      	mov	r4, r0
 800ac66:	429e      	cmp	r6, r3
 800ac68:	460d      	mov	r5, r1
 800ac6a:	f300 80b8 	bgt.w	800adde <atan+0x1ee>
 800ac6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ac72:	429e      	cmp	r6, r3
 800ac74:	f300 809c 	bgt.w	800adb0 <atan+0x1c0>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	f7f5 fa76 	bl	800016c <__adddf3>
 800ac80:	2200      	movs	r2, #0
 800ac82:	4b98      	ldr	r3, [pc, #608]	; (800aee4 <atan+0x2f4>)
 800ac84:	f7f5 fa70 	bl	8000168 <__aeabi_dsub>
 800ac88:	2200      	movs	r2, #0
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac92:	4620      	mov	r0, r4
 800ac94:	4629      	mov	r1, r5
 800ac96:	f7f5 fa69 	bl	800016c <__adddf3>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4630      	mov	r0, r6
 800aca0:	4639      	mov	r1, r7
 800aca2:	f7f5 fd43 	bl	800072c <__aeabi_ddiv>
 800aca6:	f04f 0a00 	mov.w	sl, #0
 800acaa:	4604      	mov	r4, r0
 800acac:	460d      	mov	r5, r1
 800acae:	4622      	mov	r2, r4
 800acb0:	462b      	mov	r3, r5
 800acb2:	4620      	mov	r0, r4
 800acb4:	4629      	mov	r1, r5
 800acb6:	f7f5 fc0f 	bl	80004d8 <__aeabi_dmul>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4680      	mov	r8, r0
 800acc0:	4689      	mov	r9, r1
 800acc2:	f7f5 fc09 	bl	80004d8 <__aeabi_dmul>
 800acc6:	a36c      	add	r3, pc, #432	; (adr r3, 800ae78 <atan+0x288>)
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	f7f5 fc02 	bl	80004d8 <__aeabi_dmul>
 800acd4:	a36a      	add	r3, pc, #424	; (adr r3, 800ae80 <atan+0x290>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fa47 	bl	800016c <__adddf3>
 800acde:	4632      	mov	r2, r6
 800ace0:	463b      	mov	r3, r7
 800ace2:	f7f5 fbf9 	bl	80004d8 <__aeabi_dmul>
 800ace6:	a368      	add	r3, pc, #416	; (adr r3, 800ae88 <atan+0x298>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 fa3e 	bl	800016c <__adddf3>
 800acf0:	4632      	mov	r2, r6
 800acf2:	463b      	mov	r3, r7
 800acf4:	f7f5 fbf0 	bl	80004d8 <__aeabi_dmul>
 800acf8:	a365      	add	r3, pc, #404	; (adr r3, 800ae90 <atan+0x2a0>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	f7f5 fa35 	bl	800016c <__adddf3>
 800ad02:	4632      	mov	r2, r6
 800ad04:	463b      	mov	r3, r7
 800ad06:	f7f5 fbe7 	bl	80004d8 <__aeabi_dmul>
 800ad0a:	a363      	add	r3, pc, #396	; (adr r3, 800ae98 <atan+0x2a8>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 fa2c 	bl	800016c <__adddf3>
 800ad14:	4632      	mov	r2, r6
 800ad16:	463b      	mov	r3, r7
 800ad18:	f7f5 fbde 	bl	80004d8 <__aeabi_dmul>
 800ad1c:	a360      	add	r3, pc, #384	; (adr r3, 800aea0 <atan+0x2b0>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	f7f5 fa23 	bl	800016c <__adddf3>
 800ad26:	4642      	mov	r2, r8
 800ad28:	464b      	mov	r3, r9
 800ad2a:	f7f5 fbd5 	bl	80004d8 <__aeabi_dmul>
 800ad2e:	a35e      	add	r3, pc, #376	; (adr r3, 800aea8 <atan+0x2b8>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	4680      	mov	r8, r0
 800ad36:	4689      	mov	r9, r1
 800ad38:	4630      	mov	r0, r6
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	f7f5 fbcc 	bl	80004d8 <__aeabi_dmul>
 800ad40:	a35b      	add	r3, pc, #364	; (adr r3, 800aeb0 <atan+0x2c0>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f7f5 fa0f 	bl	8000168 <__aeabi_dsub>
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	f7f5 fbc3 	bl	80004d8 <__aeabi_dmul>
 800ad52:	a359      	add	r3, pc, #356	; (adr r3, 800aeb8 <atan+0x2c8>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f7f5 fa06 	bl	8000168 <__aeabi_dsub>
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	463b      	mov	r3, r7
 800ad60:	f7f5 fbba 	bl	80004d8 <__aeabi_dmul>
 800ad64:	a356      	add	r3, pc, #344	; (adr r3, 800aec0 <atan+0x2d0>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f7f5 f9fd 	bl	8000168 <__aeabi_dsub>
 800ad6e:	4632      	mov	r2, r6
 800ad70:	463b      	mov	r3, r7
 800ad72:	f7f5 fbb1 	bl	80004d8 <__aeabi_dmul>
 800ad76:	a354      	add	r3, pc, #336	; (adr r3, 800aec8 <atan+0x2d8>)
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	f7f5 f9f4 	bl	8000168 <__aeabi_dsub>
 800ad80:	4632      	mov	r2, r6
 800ad82:	463b      	mov	r3, r7
 800ad84:	f7f5 fba8 	bl	80004d8 <__aeabi_dmul>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4649      	mov	r1, r9
 800ad90:	f7f5 f9ec 	bl	800016c <__adddf3>
 800ad94:	4622      	mov	r2, r4
 800ad96:	462b      	mov	r3, r5
 800ad98:	f7f5 fb9e 	bl	80004d8 <__aeabi_dmul>
 800ad9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	d144      	bne.n	800ae30 <atan+0x240>
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 f9dd 	bl	8000168 <__aeabi_dsub>
 800adae:	e734      	b.n	800ac1a <atan+0x2a>
 800adb0:	2200      	movs	r2, #0
 800adb2:	4b4c      	ldr	r3, [pc, #304]	; (800aee4 <atan+0x2f4>)
 800adb4:	f7f5 f9d8 	bl	8000168 <__aeabi_dsub>
 800adb8:	2200      	movs	r2, #0
 800adba:	4606      	mov	r6, r0
 800adbc:	460f      	mov	r7, r1
 800adbe:	4620      	mov	r0, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	4b48      	ldr	r3, [pc, #288]	; (800aee4 <atan+0x2f4>)
 800adc4:	f7f5 f9d2 	bl	800016c <__adddf3>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	4630      	mov	r0, r6
 800adce:	4639      	mov	r1, r7
 800add0:	f7f5 fcac 	bl	800072c <__aeabi_ddiv>
 800add4:	f04f 0a01 	mov.w	sl, #1
 800add8:	4604      	mov	r4, r0
 800adda:	460d      	mov	r5, r1
 800addc:	e767      	b.n	800acae <atan+0xbe>
 800adde:	4b43      	ldr	r3, [pc, #268]	; (800aeec <atan+0x2fc>)
 800ade0:	429e      	cmp	r6, r3
 800ade2:	da1a      	bge.n	800ae1a <atan+0x22a>
 800ade4:	2200      	movs	r2, #0
 800ade6:	4b42      	ldr	r3, [pc, #264]	; (800aef0 <atan+0x300>)
 800ade8:	f7f5 f9be 	bl	8000168 <__aeabi_dsub>
 800adec:	2200      	movs	r2, #0
 800adee:	4606      	mov	r6, r0
 800adf0:	460f      	mov	r7, r1
 800adf2:	4620      	mov	r0, r4
 800adf4:	4629      	mov	r1, r5
 800adf6:	4b3e      	ldr	r3, [pc, #248]	; (800aef0 <atan+0x300>)
 800adf8:	f7f5 fb6e 	bl	80004d8 <__aeabi_dmul>
 800adfc:	2200      	movs	r2, #0
 800adfe:	4b39      	ldr	r3, [pc, #228]	; (800aee4 <atan+0x2f4>)
 800ae00:	f7f5 f9b4 	bl	800016c <__adddf3>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fc8e 	bl	800072c <__aeabi_ddiv>
 800ae10:	f04f 0a02 	mov.w	sl, #2
 800ae14:	4604      	mov	r4, r0
 800ae16:	460d      	mov	r5, r1
 800ae18:	e749      	b.n	800acae <atan+0xbe>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	2000      	movs	r0, #0
 800ae20:	4934      	ldr	r1, [pc, #208]	; (800aef4 <atan+0x304>)
 800ae22:	f7f5 fc83 	bl	800072c <__aeabi_ddiv>
 800ae26:	f04f 0a03 	mov.w	sl, #3
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	460d      	mov	r5, r1
 800ae2e:	e73e      	b.n	800acae <atan+0xbe>
 800ae30:	4b31      	ldr	r3, [pc, #196]	; (800aef8 <atan+0x308>)
 800ae32:	4e32      	ldr	r6, [pc, #200]	; (800aefc <atan+0x30c>)
 800ae34:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ae38:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ae3c:	e9da 2300 	ldrd	r2, r3, [sl]
 800ae40:	f7f5 f992 	bl	8000168 <__aeabi_dsub>
 800ae44:	4622      	mov	r2, r4
 800ae46:	462b      	mov	r3, r5
 800ae48:	f7f5 f98e 	bl	8000168 <__aeabi_dsub>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	460b      	mov	r3, r1
 800ae50:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ae54:	f7f5 f988 	bl	8000168 <__aeabi_dsub>
 800ae58:	f1bb 0f00 	cmp.w	fp, #0
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	460d      	mov	r5, r1
 800ae60:	f6bf aee4 	bge.w	800ac2c <atan+0x3c>
 800ae64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae68:	461d      	mov	r5, r3
 800ae6a:	e6df      	b.n	800ac2c <atan+0x3c>
 800ae6c:	4d24      	ldr	r5, [pc, #144]	; (800af00 <atan+0x310>)
 800ae6e:	e6dd      	b.n	800ac2c <atan+0x3c>
 800ae70:	8800759c 	.word	0x8800759c
 800ae74:	7e37e43c 	.word	0x7e37e43c
 800ae78:	e322da11 	.word	0xe322da11
 800ae7c:	3f90ad3a 	.word	0x3f90ad3a
 800ae80:	24760deb 	.word	0x24760deb
 800ae84:	3fa97b4b 	.word	0x3fa97b4b
 800ae88:	a0d03d51 	.word	0xa0d03d51
 800ae8c:	3fb10d66 	.word	0x3fb10d66
 800ae90:	c54c206e 	.word	0xc54c206e
 800ae94:	3fb745cd 	.word	0x3fb745cd
 800ae98:	920083ff 	.word	0x920083ff
 800ae9c:	3fc24924 	.word	0x3fc24924
 800aea0:	5555550d 	.word	0x5555550d
 800aea4:	3fd55555 	.word	0x3fd55555
 800aea8:	2c6a6c2f 	.word	0x2c6a6c2f
 800aeac:	bfa2b444 	.word	0xbfa2b444
 800aeb0:	52defd9a 	.word	0x52defd9a
 800aeb4:	3fadde2d 	.word	0x3fadde2d
 800aeb8:	af749a6d 	.word	0xaf749a6d
 800aebc:	3fb3b0f2 	.word	0x3fb3b0f2
 800aec0:	fe231671 	.word	0xfe231671
 800aec4:	3fbc71c6 	.word	0x3fbc71c6
 800aec8:	9998ebc4 	.word	0x9998ebc4
 800aecc:	3fc99999 	.word	0x3fc99999
 800aed0:	440fffff 	.word	0x440fffff
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	54442d18 	.word	0x54442d18
 800aedc:	bff921fb 	.word	0xbff921fb
 800aee0:	3fdbffff 	.word	0x3fdbffff
 800aee4:	3ff00000 	.word	0x3ff00000
 800aee8:	3ff2ffff 	.word	0x3ff2ffff
 800aeec:	40038000 	.word	0x40038000
 800aef0:	3ff80000 	.word	0x3ff80000
 800aef4:	bff00000 	.word	0xbff00000
 800aef8:	0800be70 	.word	0x0800be70
 800aefc:	0800be50 	.word	0x0800be50
 800af00:	3ff921fb 	.word	0x3ff921fb

0800af04 <fabs>:
 800af04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800af08:	4770      	bx	lr
 800af0a:	0000      	movs	r0, r0
 800af0c:	0000      	movs	r0, r0
	...

0800af10 <floor>:
 800af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af14:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800af18:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800af1c:	2e13      	cmp	r6, #19
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	4607      	mov	r7, r0
 800af24:	460c      	mov	r4, r1
 800af26:	4605      	mov	r5, r0
 800af28:	dc34      	bgt.n	800af94 <floor+0x84>
 800af2a:	2e00      	cmp	r6, #0
 800af2c:	da15      	bge.n	800af5a <floor+0x4a>
 800af2e:	a334      	add	r3, pc, #208	; (adr r3, 800b000 <floor+0xf0>)
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	f7f5 f91a 	bl	800016c <__adddf3>
 800af38:	2200      	movs	r2, #0
 800af3a:	2300      	movs	r3, #0
 800af3c:	f7f5 fd5c 	bl	80009f8 <__aeabi_dcmpgt>
 800af40:	b140      	cbz	r0, 800af54 <floor+0x44>
 800af42:	2c00      	cmp	r4, #0
 800af44:	da59      	bge.n	800affa <floor+0xea>
 800af46:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af4a:	ea57 0503 	orrs.w	r5, r7, r3
 800af4e:	d001      	beq.n	800af54 <floor+0x44>
 800af50:	2500      	movs	r5, #0
 800af52:	4c2d      	ldr	r4, [pc, #180]	; (800b008 <floor+0xf8>)
 800af54:	4623      	mov	r3, r4
 800af56:	462f      	mov	r7, r5
 800af58:	e025      	b.n	800afa6 <floor+0x96>
 800af5a:	4a2c      	ldr	r2, [pc, #176]	; (800b00c <floor+0xfc>)
 800af5c:	fa42 f806 	asr.w	r8, r2, r6
 800af60:	ea01 0208 	and.w	r2, r1, r8
 800af64:	4302      	orrs	r2, r0
 800af66:	d01e      	beq.n	800afa6 <floor+0x96>
 800af68:	a325      	add	r3, pc, #148	; (adr r3, 800b000 <floor+0xf0>)
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	f7f5 f8fd 	bl	800016c <__adddf3>
 800af72:	2200      	movs	r2, #0
 800af74:	2300      	movs	r3, #0
 800af76:	f7f5 fd3f 	bl	80009f8 <__aeabi_dcmpgt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d0ea      	beq.n	800af54 <floor+0x44>
 800af7e:	2c00      	cmp	r4, #0
 800af80:	bfbe      	ittt	lt
 800af82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800af86:	fa43 f606 	asrlt.w	r6, r3, r6
 800af8a:	19a4      	addlt	r4, r4, r6
 800af8c:	2500      	movs	r5, #0
 800af8e:	ea24 0408 	bic.w	r4, r4, r8
 800af92:	e7df      	b.n	800af54 <floor+0x44>
 800af94:	2e33      	cmp	r6, #51	; 0x33
 800af96:	dd0a      	ble.n	800afae <floor+0x9e>
 800af98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af9c:	d103      	bne.n	800afa6 <floor+0x96>
 800af9e:	f7f5 f8e5 	bl	800016c <__adddf3>
 800afa2:	4607      	mov	r7, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	4638      	mov	r0, r7
 800afa8:	4619      	mov	r1, r3
 800afaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afae:	f04f 32ff 	mov.w	r2, #4294967295
 800afb2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800afb6:	fa22 f808 	lsr.w	r8, r2, r8
 800afba:	ea18 0f00 	tst.w	r8, r0
 800afbe:	d0f2      	beq.n	800afa6 <floor+0x96>
 800afc0:	a30f      	add	r3, pc, #60	; (adr r3, 800b000 <floor+0xf0>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 f8d1 	bl	800016c <__adddf3>
 800afca:	2200      	movs	r2, #0
 800afcc:	2300      	movs	r3, #0
 800afce:	f7f5 fd13 	bl	80009f8 <__aeabi_dcmpgt>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d0be      	beq.n	800af54 <floor+0x44>
 800afd6:	2c00      	cmp	r4, #0
 800afd8:	da02      	bge.n	800afe0 <floor+0xd0>
 800afda:	2e14      	cmp	r6, #20
 800afdc:	d103      	bne.n	800afe6 <floor+0xd6>
 800afde:	3401      	adds	r4, #1
 800afe0:	ea25 0508 	bic.w	r5, r5, r8
 800afe4:	e7b6      	b.n	800af54 <floor+0x44>
 800afe6:	2301      	movs	r3, #1
 800afe8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800afec:	fa03 f606 	lsl.w	r6, r3, r6
 800aff0:	4435      	add	r5, r6
 800aff2:	42bd      	cmp	r5, r7
 800aff4:	bf38      	it	cc
 800aff6:	18e4      	addcc	r4, r4, r3
 800aff8:	e7f2      	b.n	800afe0 <floor+0xd0>
 800affa:	2500      	movs	r5, #0
 800affc:	462c      	mov	r4, r5
 800affe:	e7a9      	b.n	800af54 <floor+0x44>
 800b000:	8800759c 	.word	0x8800759c
 800b004:	7e37e43c 	.word	0x7e37e43c
 800b008:	bff00000 	.word	0xbff00000
 800b00c:	000fffff 	.word	0x000fffff

0800b010 <scalbn>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b016:	4604      	mov	r4, r0
 800b018:	460d      	mov	r5, r1
 800b01a:	4617      	mov	r7, r2
 800b01c:	460b      	mov	r3, r1
 800b01e:	b996      	cbnz	r6, 800b046 <scalbn+0x36>
 800b020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b024:	4303      	orrs	r3, r0
 800b026:	d039      	beq.n	800b09c <scalbn+0x8c>
 800b028:	4b35      	ldr	r3, [pc, #212]	; (800b100 <scalbn+0xf0>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	f7f5 fa54 	bl	80004d8 <__aeabi_dmul>
 800b030:	4b34      	ldr	r3, [pc, #208]	; (800b104 <scalbn+0xf4>)
 800b032:	4604      	mov	r4, r0
 800b034:	429f      	cmp	r7, r3
 800b036:	460d      	mov	r5, r1
 800b038:	da0f      	bge.n	800b05a <scalbn+0x4a>
 800b03a:	a32d      	add	r3, pc, #180	; (adr r3, 800b0f0 <scalbn+0xe0>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f7f5 fa4a 	bl	80004d8 <__aeabi_dmul>
 800b044:	e006      	b.n	800b054 <scalbn+0x44>
 800b046:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b04a:	4296      	cmp	r6, r2
 800b04c:	d10a      	bne.n	800b064 <scalbn+0x54>
 800b04e:	4602      	mov	r2, r0
 800b050:	f7f5 f88c 	bl	800016c <__adddf3>
 800b054:	4604      	mov	r4, r0
 800b056:	460d      	mov	r5, r1
 800b058:	e020      	b.n	800b09c <scalbn+0x8c>
 800b05a:	460b      	mov	r3, r1
 800b05c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b060:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b064:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b068:	19b9      	adds	r1, r7, r6
 800b06a:	4291      	cmp	r1, r2
 800b06c:	dd0e      	ble.n	800b08c <scalbn+0x7c>
 800b06e:	a322      	add	r3, pc, #136	; (adr r3, 800b0f8 <scalbn+0xe8>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b078:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b07c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b080:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b084:	4820      	ldr	r0, [pc, #128]	; (800b108 <scalbn+0xf8>)
 800b086:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b08a:	e7d9      	b.n	800b040 <scalbn+0x30>
 800b08c:	2900      	cmp	r1, #0
 800b08e:	dd08      	ble.n	800b0a2 <scalbn+0x92>
 800b090:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b094:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b098:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b09c:	4620      	mov	r0, r4
 800b09e:	4629      	mov	r1, r5
 800b0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b0a6:	da16      	bge.n	800b0d6 <scalbn+0xc6>
 800b0a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b0ac:	429f      	cmp	r7, r3
 800b0ae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b0b2:	dd08      	ble.n	800b0c6 <scalbn+0xb6>
 800b0b4:	4c15      	ldr	r4, [pc, #84]	; (800b10c <scalbn+0xfc>)
 800b0b6:	4814      	ldr	r0, [pc, #80]	; (800b108 <scalbn+0xf8>)
 800b0b8:	f363 74df 	bfi	r4, r3, #31, #1
 800b0bc:	a30e      	add	r3, pc, #56	; (adr r3, 800b0f8 <scalbn+0xe8>)
 800b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	e7bc      	b.n	800b040 <scalbn+0x30>
 800b0c6:	4c12      	ldr	r4, [pc, #72]	; (800b110 <scalbn+0x100>)
 800b0c8:	4812      	ldr	r0, [pc, #72]	; (800b114 <scalbn+0x104>)
 800b0ca:	f363 74df 	bfi	r4, r3, #31, #1
 800b0ce:	a308      	add	r3, pc, #32	; (adr r3, 800b0f0 <scalbn+0xe0>)
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	e7f5      	b.n	800b0c2 <scalbn+0xb2>
 800b0d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0da:	3136      	adds	r1, #54	; 0x36
 800b0dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b0e0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	4b0b      	ldr	r3, [pc, #44]	; (800b118 <scalbn+0x108>)
 800b0ec:	e7a8      	b.n	800b040 <scalbn+0x30>
 800b0ee:	bf00      	nop
 800b0f0:	c2f8f359 	.word	0xc2f8f359
 800b0f4:	01a56e1f 	.word	0x01a56e1f
 800b0f8:	8800759c 	.word	0x8800759c
 800b0fc:	7e37e43c 	.word	0x7e37e43c
 800b100:	43500000 	.word	0x43500000
 800b104:	ffff3cb0 	.word	0xffff3cb0
 800b108:	8800759c 	.word	0x8800759c
 800b10c:	7e37e43c 	.word	0x7e37e43c
 800b110:	01a56e1f 	.word	0x01a56e1f
 800b114:	c2f8f359 	.word	0xc2f8f359
 800b118:	3c900000 	.word	0x3c900000

0800b11c <floorf>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800b122:	3d7f      	subs	r5, #127	; 0x7f
 800b124:	2d16      	cmp	r5, #22
 800b126:	4601      	mov	r1, r0
 800b128:	4604      	mov	r4, r0
 800b12a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b12e:	dc26      	bgt.n	800b17e <floorf+0x62>
 800b130:	2d00      	cmp	r5, #0
 800b132:	da0e      	bge.n	800b152 <floorf+0x36>
 800b134:	4917      	ldr	r1, [pc, #92]	; (800b194 <floorf+0x78>)
 800b136:	f7f5 fcfd 	bl	8000b34 <__addsf3>
 800b13a:	2100      	movs	r1, #0
 800b13c:	f7f5 ffbe 	bl	80010bc <__aeabi_fcmpgt>
 800b140:	b128      	cbz	r0, 800b14e <floorf+0x32>
 800b142:	2c00      	cmp	r4, #0
 800b144:	da23      	bge.n	800b18e <floorf+0x72>
 800b146:	4b14      	ldr	r3, [pc, #80]	; (800b198 <floorf+0x7c>)
 800b148:	2e00      	cmp	r6, #0
 800b14a:	bf18      	it	ne
 800b14c:	461c      	movne	r4, r3
 800b14e:	4621      	mov	r1, r4
 800b150:	e01b      	b.n	800b18a <floorf+0x6e>
 800b152:	4e12      	ldr	r6, [pc, #72]	; (800b19c <floorf+0x80>)
 800b154:	412e      	asrs	r6, r5
 800b156:	4230      	tst	r0, r6
 800b158:	d017      	beq.n	800b18a <floorf+0x6e>
 800b15a:	490e      	ldr	r1, [pc, #56]	; (800b194 <floorf+0x78>)
 800b15c:	f7f5 fcea 	bl	8000b34 <__addsf3>
 800b160:	2100      	movs	r1, #0
 800b162:	f7f5 ffab 	bl	80010bc <__aeabi_fcmpgt>
 800b166:	2800      	cmp	r0, #0
 800b168:	d0f1      	beq.n	800b14e <floorf+0x32>
 800b16a:	2c00      	cmp	r4, #0
 800b16c:	bfbe      	ittt	lt
 800b16e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800b172:	fa43 f505 	asrlt.w	r5, r3, r5
 800b176:	1964      	addlt	r4, r4, r5
 800b178:	ea24 0406 	bic.w	r4, r4, r6
 800b17c:	e7e7      	b.n	800b14e <floorf+0x32>
 800b17e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b182:	d302      	bcc.n	800b18a <floorf+0x6e>
 800b184:	f7f5 fcd6 	bl	8000b34 <__addsf3>
 800b188:	4601      	mov	r1, r0
 800b18a:	4608      	mov	r0, r1
 800b18c:	bd70      	pop	{r4, r5, r6, pc}
 800b18e:	2400      	movs	r4, #0
 800b190:	e7dd      	b.n	800b14e <floorf+0x32>
 800b192:	bf00      	nop
 800b194:	7149f2ca 	.word	0x7149f2ca
 800b198:	bf800000 	.word	0xbf800000
 800b19c:	007fffff 	.word	0x007fffff

0800b1a0 <nanf>:
 800b1a0:	4800      	ldr	r0, [pc, #0]	; (800b1a4 <nanf+0x4>)
 800b1a2:	4770      	bx	lr
 800b1a4:	7fc00000 	.word	0x7fc00000

0800b1a8 <scalbnf>:
 800b1a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	460d      	mov	r5, r1
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	d02a      	beq.n	800b20c <scalbnf+0x64>
 800b1b6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b1ba:	d304      	bcc.n	800b1c6 <scalbnf+0x1e>
 800b1bc:	4601      	mov	r1, r0
 800b1be:	f7f5 fcb9 	bl	8000b34 <__addsf3>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	e022      	b.n	800b20c <scalbnf+0x64>
 800b1c6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800b1ca:	d117      	bne.n	800b1fc <scalbnf+0x54>
 800b1cc:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800b1d0:	f7f5 fdb8 	bl	8000d44 <__aeabi_fmul>
 800b1d4:	4a17      	ldr	r2, [pc, #92]	; (800b234 <scalbnf+0x8c>)
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4295      	cmp	r5, r2
 800b1da:	db0b      	blt.n	800b1f4 <scalbnf+0x4c>
 800b1dc:	4604      	mov	r4, r0
 800b1de:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b1e2:	3a19      	subs	r2, #25
 800b1e4:	442a      	add	r2, r5
 800b1e6:	2afe      	cmp	r2, #254	; 0xfe
 800b1e8:	dd0a      	ble.n	800b200 <scalbnf+0x58>
 800b1ea:	4913      	ldr	r1, [pc, #76]	; (800b238 <scalbnf+0x90>)
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f361 001e 	bfi	r0, r1, #0, #31
 800b1f2:	e000      	b.n	800b1f6 <scalbnf+0x4e>
 800b1f4:	4911      	ldr	r1, [pc, #68]	; (800b23c <scalbnf+0x94>)
 800b1f6:	f7f5 fda5 	bl	8000d44 <__aeabi_fmul>
 800b1fa:	e7e2      	b.n	800b1c2 <scalbnf+0x1a>
 800b1fc:	0dd2      	lsrs	r2, r2, #23
 800b1fe:	e7f1      	b.n	800b1e4 <scalbnf+0x3c>
 800b200:	2a00      	cmp	r2, #0
 800b202:	dd05      	ble.n	800b210 <scalbnf+0x68>
 800b204:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800b208:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800b20c:	4618      	mov	r0, r3
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	f112 0f16 	cmn.w	r2, #22
 800b214:	da05      	bge.n	800b222 <scalbnf+0x7a>
 800b216:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b21a:	4295      	cmp	r5, r2
 800b21c:	dce5      	bgt.n	800b1ea <scalbnf+0x42>
 800b21e:	4907      	ldr	r1, [pc, #28]	; (800b23c <scalbnf+0x94>)
 800b220:	e7e4      	b.n	800b1ec <scalbnf+0x44>
 800b222:	3219      	adds	r2, #25
 800b224:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800b228:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800b22c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800b230:	e7e1      	b.n	800b1f6 <scalbnf+0x4e>
 800b232:	bf00      	nop
 800b234:	ffff3cb0 	.word	0xffff3cb0
 800b238:	7149f2ca 	.word	0x7149f2ca
 800b23c:	0da24260 	.word	0x0da24260

0800b240 <_init>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	bf00      	nop
 800b244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b246:	bc08      	pop	{r3}
 800b248:	469e      	mov	lr, r3
 800b24a:	4770      	bx	lr

0800b24c <_fini>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr
